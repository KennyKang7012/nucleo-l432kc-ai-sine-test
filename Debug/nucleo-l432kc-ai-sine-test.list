
nucleo-l432kc-ai-sine-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008174  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a34  08008320  08008320  00018320  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d54  08008d54  000207e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008d54  08008d54  00018d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d5c  08008d5c  000207e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d5c  08008d5c  00018d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d60  08008d60  00018d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007e0  20000000  08008d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200007e0  08009544  000207e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000098c  08009544  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000207e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c7a  00000000  00000000  00020810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c6  00000000  00000000  0003248a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00034950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00035700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023163  00000000  00000000  000363c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f429  00000000  00000000  0005952b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d668e  00000000  00000000  00068954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0013efe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b00  00000000  00000000  0013f0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00143bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00143c7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200007e0 	.word	0x200007e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082ec 	.word	0x080082ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200007e4 	.word	0x200007e4
 80001cc:	080082ec 	.word	0x080082ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b0d0      	sub	sp, #320	; 0x140
 8000ea4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  char buf[50];
  int buf_len = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle sine_model = AI_HANDLE_NULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	663b      	str	r3, [r7, #96]	; 0x60

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000eb0:	4b87      	ldr	r3, [pc, #540]	; (80010d0 <main+0x230>)
 8000eb2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000eb6:	461d      	mov	r5, r3
 8000eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ec0:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000ec4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ec8:	4a81      	ldr	r2, [pc, #516]	; (80010d0 <main+0x230>)
 8000eca:	461c      	mov	r4, r3
 8000ecc:	4615      	mov	r5, r2
 8000ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ed6:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = AI_NETWORK_PARAMS_INIT(AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()), AI_SINE_MODEL_DATA_ACTIVATIONS(activations));
 8000eda:	463b      	mov	r3, r7
 8000edc:	4a7d      	ldr	r2, [pc, #500]	; (80010d4 <main+0x234>)
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	809a      	strh	r2, [r3, #4]
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2201      	movs	r2, #1
 8000eea:	80da      	strh	r2, [r3, #6]
 8000eec:	463b      	mov	r3, r7
 8000eee:	2201      	movs	r2, #1
 8000ef0:	811a      	strh	r2, [r3, #8]
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	f240 5204 	movw	r2, #1284	; 0x504
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	f002 ff81 	bl	8003e00 <ai_sine_model_data_weights_get>
 8000efe:	4602      	mov	r2, r0
 8000f00:	463b      	mov	r3, r7
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4a72      	ldr	r2, [pc, #456]	; (80010d8 <main+0x238>)
 8000f0e:	619a      	str	r2, [r3, #24]
 8000f10:	463b      	mov	r3, r7
 8000f12:	2201      	movs	r2, #1
 8000f14:	839a      	strh	r2, [r3, #28]
 8000f16:	463b      	mov	r3, r7
 8000f18:	2201      	movs	r2, #1
 8000f1a:	83da      	strh	r2, [r3, #30]
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	2201      	movs	r2, #1
 8000f20:	841a      	strh	r2, [r3, #32]
 8000f22:	463b      	mov	r3, r7
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24
 8000f28:	463b      	mov	r3, r7
 8000f2a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c

  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000f3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f40:	65bb      	str	r3, [r7, #88]	; 0x58
  ai_output[0].n_batches = 1;
 8000f42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f46:	2201      	movs	r2, #1
 8000f48:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000f4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f4e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000f52:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f000 fb73 	bl	800163e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f8ce 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f000 f996 	bl	800128c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f60:	f000 f964 	bl	800122c <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000f64:	f000 f91a 	bl	800119c <MX_CRC_Init>
  MX_TIM16_Init();
 8000f68:	f000 f93a 	bl	80011e0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // Start timer/counter
   HAL_TIM_Base_Start(&htim16);
 8000f6c:	485b      	ldr	r0, [pc, #364]	; (80010dc <main+0x23c>)
 8000f6e:	f002 f919 	bl	80031a4 <HAL_TIM_Base_Start>

   // Greetings!
   buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8000f72:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f76:	495a      	ldr	r1, [pc, #360]	; (80010e0 <main+0x240>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f005 f81d 	bl	8005fb8 <siprintf>
 8000f7e:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
   HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000f82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000f8c:	2364      	movs	r3, #100	; 0x64
 8000f8e:	4855      	ldr	r0, [pc, #340]	; (80010e4 <main+0x244>)
 8000f90:	f002 fa06 	bl	80033a0 <HAL_UART_Transmit>

   // Create instance of neural network
   ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8000f94:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 fece 	bl	8003d3c <ai_sine_model_create>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
   if (ai_err.type != AI_ERROR_NONE)
 8000fa6:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d011      	beq.n	8000fd2 <main+0x132>
   {
     buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000fae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000fb2:	494d      	ldr	r1, [pc, #308]	; (80010e8 <main+0x248>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 ffff 	bl	8005fb8 <siprintf>
 8000fba:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
     HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000fbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000fc8:	2364      	movs	r3, #100	; 0x64
 8000fca:	4846      	ldr	r0, [pc, #280]	; (80010e4 <main+0x244>)
 8000fcc:	f002 f9e8 	bl	80033a0 <HAL_UART_Transmit>
     while(1);
 8000fd0:	e7fe      	b.n	8000fd0 <main+0x130>
   }

   // Initialize neural network
   if (!ai_sine_model_init(sine_model, &ai_params))
 8000fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fd4:	463a      	mov	r2, r7
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fec5 	bl	8003d68 <ai_sine_model_init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d011      	beq.n	800100e <main+0x16e>
   {
     buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000fea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000fee:	493f      	ldr	r1, [pc, #252]	; (80010ec <main+0x24c>)
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 ffe1 	bl	8005fb8 <siprintf>
 8000ff6:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
     HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000ffa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001004:	2364      	movs	r3, #100	; 0x64
 8001006:	4837      	ldr	r0, [pc, #220]	; (80010e4 <main+0x244>)
 8001008:	f002 f9ca 	bl	80033a0 <HAL_UART_Transmit>
     while(1);
 800100c:	e7fe      	b.n	800100c <main+0x16c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Fill input buffer (use test value)
	for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001014:	e00d      	b.n	8001032 <main+0x192>
	{
	  ((ai_float *)in_data)[i] = (ai_float)2.0f;
 8001016:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001020:	4413      	add	r3, r2
 8001022:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001026:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001028:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800102c:	3301      	adds	r3, #1
 800102e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001032:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0ed      	beq.n	8001016 <main+0x176>
	}

	// Get current timestamp
	timestamp = htim16.Instance->CNT;
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <main+0x23c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	// Perform inference
	nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8001044:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001046:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800104a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fec6 	bl	8003de0 <ai_sine_model_run>
 8001054:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	if (nbatch != 1) {
 8001058:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800105c:	2b01      	cmp	r3, #1
 800105e:	d010      	beq.n	8001082 <main+0x1e2>
	  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001060:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001064:	4922      	ldr	r1, [pc, #136]	; (80010f0 <main+0x250>)
 8001066:	4618      	mov	r0, r3
 8001068:	f004 ffa6 	bl	8005fb8 <siprintf>
 800106c:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001070:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001074:	b29a      	uxth	r2, r3
 8001076:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800107a:	2364      	movs	r3, #100	; 0x64
 800107c:	4819      	ldr	r0, [pc, #100]	; (80010e4 <main+0x244>)
 800107e:	f002 f98f 	bl	80033a0 <HAL_UART_Transmit>
	}

	// Read output (predicted y) of neural network
	y_val = ((float *)out_data)[0];
 8001082:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	// Print output of neural network along with inference time (microseconds)
	buf_len = sprintf(buf,
 800108c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8001090:	f7ff fa5a 	bl	8000548 <__aeabi_f2d>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
					  "Output: %f | Duration: %lu\r\n",
					  y_val,
					  htim16.Instance->CNT - timestamp);
 8001098:	4910      	ldr	r1, [pc, #64]	; (80010dc <main+0x23c>)
 800109a:	6809      	ldr	r1, [r1, #0]
 800109c:	6a48      	ldr	r0, [r1, #36]	; 0x24
	buf_len = sprintf(buf,
 800109e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80010a2:	1a41      	subs	r1, r0, r1
 80010a4:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 80010a8:	9100      	str	r1, [sp, #0]
 80010aa:	4912      	ldr	r1, [pc, #72]	; (80010f4 <main+0x254>)
 80010ac:	f004 ff84 	bl	8005fb8 <siprintf>
 80010b0:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80010b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80010be:	2364      	movs	r3, #100	; 0x64
 80010c0:	4808      	ldr	r0, [pc, #32]	; (80010e4 <main+0x244>)
 80010c2:	f002 f96d 	bl	80033a0 <HAL_UART_Transmit>

	// Wait before doing it again
	HAL_Delay(500);
 80010c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ca:	f000 fb2d 	bl	8001728 <HAL_Delay>
	for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 80010ce:	e79e      	b.n	800100e <main+0x16e>
 80010d0:	080083cc 	.word	0x080083cc
 80010d4:	40040440 	.word	0x40040440
 80010d8:	00040440 	.word	0x00040440
 80010dc:	2000092c 	.word	0x2000092c
 80010e0:	08008320 	.word	0x08008320
 80010e4:	200008a8 	.word	0x200008a8
 80010e8:	0800833c 	.word	0x0800833c
 80010ec:	08008364 	.word	0x08008364
 80010f0:	08008388 	.word	0x08008388
 80010f4:	080083ac 	.word	0x080083ac

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b096      	sub	sp, #88	; 0x58
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	2244      	movs	r2, #68	; 0x44
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f004 fa2a 	bl	8005560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800111a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800111e:	f000 fe87 	bl	8001e30 <HAL_PWREx_ControlVoltageScaling>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001128:	f000 f8fa 	bl	8001320 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112c:	2302      	movs	r3, #2
 800112e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001134:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001136:	2310      	movs	r3, #16
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113a:	2302      	movs	r3, #2
 800113c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800113e:	2302      	movs	r3, #2
 8001140:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001142:	2301      	movs	r3, #1
 8001144:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001146:	230a      	movs	r3, #10
 8001148:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800114a:	2307      	movs	r3, #7
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800114e:	2302      	movs	r3, #2
 8001150:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001152:	2302      	movs	r3, #2
 8001154:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4618      	mov	r0, r3
 800115c:	f000 febe 	bl	8001edc <HAL_RCC_OscConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001166:	f000 f8db 	bl	8001320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116a:	230f      	movs	r3, #15
 800116c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116e:	2303      	movs	r3, #3
 8001170:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	2104      	movs	r1, #4
 8001182:	4618      	mov	r0, r3
 8001184:	f001 faca 	bl	800271c <HAL_RCC_ClockConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800118e:	f000 f8c7 	bl	8001320 <Error_Handler>
  }
}
 8001192:	bf00      	nop
 8001194:	3758      	adds	r7, #88	; 0x58
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <MX_CRC_Init+0x3c>)
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <MX_CRC_Init+0x40>)
 80011a4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_CRC_Init+0x3c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <MX_CRC_Init+0x3c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_CRC_Init+0x3c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_CRC_Init+0x3c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_CRC_Init+0x3c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_CRC_Init+0x3c>)
 80011c6:	f000 fbb9 	bl	800193c <HAL_CRC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80011d0:	f000 f8a6 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000884 	.word	0x20000884
 80011dc:	40023000 	.word	0x40023000

080011e0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_TIM16_Init+0x44>)
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <MX_TIM16_Init+0x48>)
 80011e8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80 - 1;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_TIM16_Init+0x44>)
 80011ec:	224f      	movs	r2, #79	; 0x4f
 80011ee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_TIM16_Init+0x44>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_TIM16_Init+0x44>)
 80011f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_TIM16_Init+0x44>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_TIM16_Init+0x44>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_TIM16_Init+0x44>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_TIM16_Init+0x44>)
 8001212:	f001 ff6f 	bl	80030f4 <HAL_TIM_Base_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800121c:	f000 f880 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000092c 	.word	0x2000092c
 8001228:	40014400 	.word	0x40014400

0800122c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <MX_USART2_UART_Init+0x5c>)
 8001234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_USART2_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_USART2_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_USART2_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001270:	f002 f848 	bl	8003304 <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800127a:	f000 f851 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200008a8 	.word	0x200008a8
 8001288:	40004400 	.word	0x40004400

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_GPIO_Init+0x8c>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <MX_GPIO_Init+0x8c>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_GPIO_Init+0x8c>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_GPIO_Init+0x8c>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a16      	ldr	r2, [pc, #88]	; (8001318 <MX_GPIO_Init+0x8c>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_GPIO_Init+0x8c>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_GPIO_Init+0x8c>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a10      	ldr	r2, [pc, #64]	; (8001318 <MX_GPIO_Init+0x8c>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_GPIO_Init+0x8c>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2108      	movs	r1, #8
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <MX_GPIO_Init+0x90>)
 80012f0:	f000 fd78 	bl	8001de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80012f4:	2308      	movs	r3, #8
 80012f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4619      	mov	r1, r3
 800130a:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_GPIO_Init+0x90>)
 800130c:	f000 fc00 	bl	8001b10 <HAL_GPIO_Init>

}
 8001310:	bf00      	nop
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40021000 	.word	0x40021000
 800131c:	48000400 	.word	0x48000400

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	e7fe      	b.n	8001328 <Error_Handler+0x8>
	...

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_MspInit+0x44>)
 8001334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001336:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <HAL_MspInit+0x44>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6613      	str	r3, [r2, #96]	; 0x60
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <HAL_MspInit+0x44>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_MspInit+0x44>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_MspInit+0x44>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6593      	str	r3, [r2, #88]	; 0x58
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_MspInit+0x44>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000

08001374 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_CRC_MspInit+0x38>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d10b      	bne.n	800139e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_CRC_MspInit+0x3c>)
 8001388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138a:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <HAL_CRC_MspInit+0x3c>)
 800138c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001390:	6493      	str	r3, [r2, #72]	; 0x48
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <HAL_CRC_MspInit+0x3c>)
 8001394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023000 	.word	0x40023000
 80013b0:	40021000 	.word	0x40021000

080013b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_TIM_Base_MspInit+0x38>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d10b      	bne.n	80013de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_TIM_Base_MspInit+0x3c>)
 80013c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <HAL_TIM_Base_MspInit+0x3c>)
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	6613      	str	r3, [r2, #96]	; 0x60
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_TIM_Base_MspInit+0x3c>)
 80013d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40014400 	.word	0x40014400
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b09e      	sub	sp, #120	; 0x78
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	2254      	movs	r2, #84	; 0x54
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f004 f8a3 	bl	8005560 <memset>
  if(huart->Instance==USART2)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a28      	ldr	r2, [pc, #160]	; (80014c0 <HAL_UART_MspInit+0xcc>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d148      	bne.n	80014b6 <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001424:	2302      	movs	r3, #2
 8001426:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001428:	2300      	movs	r3, #0
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fb79 	bl	8002b28 <HAL_RCCEx_PeriphCLKConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800143c:	f7ff ff70 	bl	8001320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001440:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_UART_MspInit+0xd0>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <HAL_UART_MspInit+0xd0>)
 8001446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144a:	6593      	str	r3, [r2, #88]	; 0x58
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_UART_MspInit+0xd0>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_UART_MspInit+0xd0>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <HAL_UART_MspInit+0xd0>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_UART_MspInit+0xd0>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001470:	2304      	movs	r3, #4
 8001472:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001480:	2307      	movs	r3, #7
 8001482:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f000 fb3f 	bl	8001b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001496:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80014a4:	2303      	movs	r3, #3
 80014a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014ac:	4619      	mov	r1, r3
 80014ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b2:	f000 fb2d 	bl	8001b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3778      	adds	r7, #120	; 0x78
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40004400 	.word	0x40004400
 80014c4:	40021000 	.word	0x40021000

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <NMI_Handler+0x4>

080014ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <MemManage_Handler+0x4>

080014da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001514:	f000 f8e8 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001524:	4a14      	ldr	r2, [pc, #80]	; (8001578 <_sbrk+0x5c>)
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <_sbrk+0x60>)
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <_sbrk+0x64>)
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <_sbrk+0x68>)
 800153c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	429a      	cmp	r2, r3
 800154a:	d207      	bcs.n	800155c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800154c:	f003 ffc8 	bl	80054e0 <__errno>
 8001550:	4603      	mov	r3, r0
 8001552:	220c      	movs	r2, #12
 8001554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	e009      	b.n	8001570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <_sbrk+0x64>)
 800156c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156e:	68fb      	ldr	r3, [r7, #12]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000c000 	.word	0x2000c000
 800157c:	00000800 	.word	0x00000800
 8001580:	200007fc 	.word	0x200007fc
 8001584:	20000990 	.word	0x20000990

08001588 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <SystemInit+0x5c>)
 800158e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001592:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <SystemInit+0x5c>)
 8001594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <SystemInit+0x60>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <SystemInit+0x60>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <SystemInit+0x60>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <SystemInit+0x60>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <SystemInit+0x60>)
 80015b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <SystemInit+0x60>)
 80015c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <SystemInit+0x60>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <SystemInit+0x60>)
 80015cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SystemInit+0x60>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00
 80015e8:	40021000 	.word	0x40021000

080015ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001624 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f0:	f7ff ffca 	bl	8001588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015f6:	e003      	b.n	8001600 <LoopCopyDataInit>

080015f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015fe:	3104      	adds	r1, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001600:	480a      	ldr	r0, [pc, #40]	; (800162c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001604:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001606:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001608:	d3f6      	bcc.n	80015f8 <CopyDataInit>
	ldr	r2, =_sbss
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <LoopForever+0x12>)
	b	LoopFillZerobss
 800160c:	e002      	b.n	8001614 <LoopFillZerobss>

0800160e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800160e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001610:	f842 3b04 	str.w	r3, [r2], #4

08001614 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <LoopForever+0x16>)
	cmp	r2, r3
 8001616:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001618:	d3f9      	bcc.n	800160e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800161a:	f003 ff67 	bl	80054ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800161e:	f7ff fc3f 	bl	8000ea0 <main>

08001622 <LoopForever>:

LoopForever:
    b LoopForever
 8001622:	e7fe      	b.n	8001622 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001624:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8001628:	08008d64 	.word	0x08008d64
	ldr	r0, =_sdata
 800162c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001630:	200007e0 	.word	0x200007e0
	ldr	r2, =_sbss
 8001634:	200007e0 	.word	0x200007e0
	ldr	r3, = _ebss
 8001638:	2000098c 	.word	0x2000098c

0800163c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC1_IRQHandler>

0800163e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f943 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f80e 	bl	8001670 <HAL_InitTick>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d002      	beq.n	8001660 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	e001      	b.n	8001664 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001660:	f7ff fe64 	bl	800132c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001664:	79fb      	ldrb	r3, [r7, #7]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_InitTick+0x6c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d023      	beq.n	80016cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_InitTick+0x70>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_InitTick+0x6c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f941 	bl	8001922 <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10f      	bne.n	80016c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d809      	bhi.n	80016c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 f919 	bl	80018ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_InitTick+0x74>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e007      	b.n	80016d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e004      	b.n	80016d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	e001      	b.n	80016d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008
 800170c:	20000978 	.word	0x20000978

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000978 	.word	0x20000978

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff ffee 	bl	8001710 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_Delay+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174e:	bf00      	nop
 8001750:	f7ff ffde 	bl	8001710 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60d3      	str	r3, [r2, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
         );
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a0:	d301      	bcc.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <SysTick_Config+0x40>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	210f      	movs	r1, #15
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f7ff ff8e 	bl	80017d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <SysTick_Config+0x40>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <SysTick_Config+0x40>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff47 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff5c 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff8e 	bl	8001828 <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5d 	bl	80017d4 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffb0 	bl	8001890 <SysTick_Config>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e054      	b.n	80019f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7f5b      	ldrb	r3, [r3, #29]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d105      	bne.n	8001964 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fd08 	bl	8001374 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	791b      	ldrb	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10c      	bne.n	800198c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <HAL_CRC_Init+0xc4>)
 8001978:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0218 	bic.w	r2, r2, #24
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	e00c      	b.n	80019a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6899      	ldr	r1, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	461a      	mov	r2, r3
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f834 	bl	8001a04 <HAL_CRCEx_Polynomial_Set>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e028      	b.n	80019f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	795b      	ldrb	r3, [r3, #5]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d105      	bne.n	80019ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f04f 32ff 	mov.w	r2, #4294967295
 80019b6:	611a      	str	r2, [r3, #16]
 80019b8:	e004      	b.n	80019c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6912      	ldr	r2, [r2, #16]
 80019c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	04c11db7 	.word	0x04c11db7

08001a04 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a14:	231f      	movs	r3, #31
 8001a16:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a18:	bf00      	nop
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1e5a      	subs	r2, r3, #1
 8001a1e:	613a      	str	r2, [r7, #16]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d009      	beq.n	8001a38 <HAL_CRCEx_Polynomial_Set+0x34>
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_CRCEx_Polynomial_Set+0x16>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b18      	cmp	r3, #24
 8001a3c:	d846      	bhi.n	8001acc <HAL_CRCEx_Polynomial_Set+0xc8>
 8001a3e:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a44:	08001ad3 	.word	0x08001ad3
 8001a48:	08001acd 	.word	0x08001acd
 8001a4c:	08001acd 	.word	0x08001acd
 8001a50:	08001acd 	.word	0x08001acd
 8001a54:	08001acd 	.word	0x08001acd
 8001a58:	08001acd 	.word	0x08001acd
 8001a5c:	08001acd 	.word	0x08001acd
 8001a60:	08001acd 	.word	0x08001acd
 8001a64:	08001ac1 	.word	0x08001ac1
 8001a68:	08001acd 	.word	0x08001acd
 8001a6c:	08001acd 	.word	0x08001acd
 8001a70:	08001acd 	.word	0x08001acd
 8001a74:	08001acd 	.word	0x08001acd
 8001a78:	08001acd 	.word	0x08001acd
 8001a7c:	08001acd 	.word	0x08001acd
 8001a80:	08001acd 	.word	0x08001acd
 8001a84:	08001ab5 	.word	0x08001ab5
 8001a88:	08001acd 	.word	0x08001acd
 8001a8c:	08001acd 	.word	0x08001acd
 8001a90:	08001acd 	.word	0x08001acd
 8001a94:	08001acd 	.word	0x08001acd
 8001a98:	08001acd 	.word	0x08001acd
 8001a9c:	08001acd 	.word	0x08001acd
 8001aa0:	08001acd 	.word	0x08001acd
 8001aa4:	08001aa9 	.word	0x08001aa9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d913      	bls.n	8001ad6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001ab2:	e010      	b.n	8001ad6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b07      	cmp	r3, #7
 8001ab8:	d90f      	bls.n	8001ada <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001abe:	e00c      	b.n	8001ada <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2b0f      	cmp	r3, #15
 8001ac4:	d90b      	bls.n	8001ade <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001aca:	e008      	b.n	8001ade <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	75fb      	strb	r3, [r7, #23]
      break;
 8001ad0:	e006      	b.n	8001ae0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001ad2:	bf00      	nop
 8001ad4:	e004      	b.n	8001ae0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001ad6:	bf00      	nop
 8001ad8:	e002      	b.n	8001ae0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001ada:	bf00      	nop
 8001adc:	e000      	b.n	8001ae0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001ade:	bf00      	nop
  }
  if (status == HAL_OK)
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10d      	bne.n	8001b02 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 0118 	bic.w	r1, r3, #24
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	371c      	adds	r7, #28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1e:	e148      	b.n	8001db2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2101      	movs	r1, #1
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 813a 	beq.w	8001dac <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d00b      	beq.n	8001b58 <HAL_GPIO_Init+0x48>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d007      	beq.n	8001b58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4c:	2b11      	cmp	r3, #17
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b12      	cmp	r3, #18
 8001b56:	d130      	bne.n	8001bba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b8e:	2201      	movs	r2, #1
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	f003 0201 	and.w	r2, r3, #1
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0xea>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b12      	cmp	r3, #18
 8001bf8:	d123      	bne.n	8001c42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	08da      	lsrs	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3208      	adds	r2, #8
 8001c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	6939      	ldr	r1, [r7, #16]
 8001c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0203 	and.w	r2, r3, #3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8094 	beq.w	8001dac <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c84:	4b52      	ldr	r3, [pc, #328]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c88:	4a51      	ldr	r2, [pc, #324]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c90:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <HAL_GPIO_Init+0x2c0>)
 8001c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c9c:	4a4d      	ldr	r2, [pc, #308]	; (8001dd4 <HAL_GPIO_Init+0x2c4>)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_GPIO_Init+0x1d4>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a43      	ldr	r2, [pc, #268]	; (8001dd8 <HAL_GPIO_Init+0x2c8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d007      	beq.n	8001ce0 <HAL_GPIO_Init+0x1d0>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a42      	ldr	r2, [pc, #264]	; (8001ddc <HAL_GPIO_Init+0x2cc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_GPIO_Init+0x1cc>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e004      	b.n	8001ce6 <HAL_GPIO_Init+0x1d6>
 8001cdc:	2307      	movs	r3, #7
 8001cde:	e002      	b.n	8001ce6 <HAL_GPIO_Init+0x1d6>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_GPIO_Init+0x1d6>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	f002 0203 	and.w	r2, r2, #3
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	4093      	lsls	r3, r2
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf6:	4937      	ldr	r1, [pc, #220]	; (8001dd4 <HAL_GPIO_Init+0x2c4>)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d04:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d28:	4a2d      	ldr	r2, [pc, #180]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d52:	4a23      	ldr	r2, [pc, #140]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d58:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d7c:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da6:	4a0e      	ldr	r2, [pc, #56]	; (8001de0 <HAL_GPIO_Init+0x2d0>)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3301      	adds	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f47f aeaf 	bne.w	8001b20 <HAL_GPIO_Init+0x10>
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	40010400 	.word	0x40010400

08001de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
 8001df0:	4613      	mov	r3, r2
 8001df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df4:	787b      	ldrb	r3, [r7, #1]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e00:	e002      	b.n	8001e08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40007000 	.word	0x40007000

08001e30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e3e:	d130      	bne.n	8001ea2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e40:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4c:	d038      	beq.n	8001ec0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e56:	4a1e      	ldr	r2, [pc, #120]	; (8001ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2232      	movs	r2, #50	; 0x32
 8001e64:	fb02 f303 	mul.w	r3, r2, r3
 8001e68:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	0c9b      	lsrs	r3, r3, #18
 8001e70:	3301      	adds	r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e74:	e002      	b.n	8001e7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e88:	d102      	bne.n	8001e90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f2      	bne.n	8001e76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9c:	d110      	bne.n	8001ec0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e00f      	b.n	8001ec2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eae:	d007      	beq.n	8001ec0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eb8:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ebe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	431bde83 	.word	0x431bde83

08001edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d102      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f000 bc11 	b.w	8002712 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef0:	4ba0      	ldr	r3, [pc, #640]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001efa:	4b9e      	ldr	r3, [pc, #632]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80e4 	beq.w	80020da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <HAL_RCC_OscConfig+0x4c>
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	f040 808b 	bne.w	8002036 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	f040 8087 	bne.w	8002036 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f28:	4b92      	ldr	r3, [pc, #584]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_OscConfig+0x64>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e3e8      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1a      	ldr	r2, [r3, #32]
 8001f44:	4b8b      	ldr	r3, [pc, #556]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <HAL_RCC_OscConfig+0x7e>
 8001f50:	4b88      	ldr	r3, [pc, #544]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f58:	e005      	b.n	8001f66 <HAL_RCC_OscConfig+0x8a>
 8001f5a:	4b86      	ldr	r3, [pc, #536]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d223      	bcs.n	8001fb2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fd7a 	bl	8002a68 <RCC_SetFlashLatencyFromMSIRange>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e3c9      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7e:	4b7d      	ldr	r3, [pc, #500]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a7c      	ldr	r2, [pc, #496]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b7a      	ldr	r3, [pc, #488]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4977      	ldr	r1, [pc, #476]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9c:	4b75      	ldr	r3, [pc, #468]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	4972      	ldr	r1, [pc, #456]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
 8001fb0:	e025      	b.n	8001ffe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fb2:	4b70      	ldr	r3, [pc, #448]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a6f      	ldr	r2, [pc, #444]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001fb8:	f043 0308 	orr.w	r3, r3, #8
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	4b6d      	ldr	r3, [pc, #436]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	496a      	ldr	r1, [pc, #424]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd0:	4b68      	ldr	r3, [pc, #416]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	4965      	ldr	r1, [pc, #404]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 fd3a 	bl	8002a68 <RCC_SetFlashLatencyFromMSIRange>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e389      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ffe:	f000 fc6f 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8002002:	4602      	mov	r2, r0
 8002004:	4b5b      	ldr	r3, [pc, #364]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	495a      	ldr	r1, [pc, #360]	; (8002178 <HAL_RCC_OscConfig+0x29c>)
 8002010:	5ccb      	ldrb	r3, [r1, r3]
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	4a58      	ldr	r2, [pc, #352]	; (800217c <HAL_RCC_OscConfig+0x2a0>)
 800201c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800201e:	4b58      	ldr	r3, [pc, #352]	; (8002180 <HAL_RCC_OscConfig+0x2a4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fb24 	bl	8001670 <HAL_InitTick>
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d052      	beq.n	80020d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	e36d      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d032      	beq.n	80020a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800203e:	4b4d      	ldr	r3, [pc, #308]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a4c      	ldr	r2, [pc, #304]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800204a:	f7ff fb61 	bl	8001710 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002052:	f7ff fb5d 	bl	8001710 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e356      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002064:	4b43      	ldr	r3, [pc, #268]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002070:	4b40      	ldr	r3, [pc, #256]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a3f      	ldr	r2, [pc, #252]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8002076:	f043 0308 	orr.w	r3, r3, #8
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	493a      	ldr	r1, [pc, #232]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800208e:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	4935      	ldr	r1, [pc, #212]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]
 80020a2:	e01a      	b.n	80020da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020a4:	4b33      	ldr	r3, [pc, #204]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a32      	ldr	r2, [pc, #200]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020b0:	f7ff fb2e 	bl	8001710 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020b8:	f7ff fb2a 	bl	8001710 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e323      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ca:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x1dc>
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d073      	beq.n	80021ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_OscConfig+0x21c>
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d10e      	bne.n	8002110 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d10b      	bne.n	8002110 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d063      	beq.n	80021cc <HAL_RCC_OscConfig+0x2f0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d15f      	bne.n	80021cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e300      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002118:	d106      	bne.n	8002128 <HAL_RCC_OscConfig+0x24c>
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e01d      	b.n	8002164 <HAL_RCC_OscConfig+0x288>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x270>
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a0c      	ldr	r2, [pc, #48]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0x288>
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a08      	ldr	r2, [pc, #32]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a05      	ldr	r2, [pc, #20]	; (8002174 <HAL_RCC_OscConfig+0x298>)
 800215e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01b      	beq.n	80021a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7ff fad0 	bl	8001710 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002172:	e010      	b.n	8002196 <HAL_RCC_OscConfig+0x2ba>
 8002174:	40021000 	.word	0x40021000
 8002178:	080083e8 	.word	0x080083e8
 800217c:	20000000 	.word	0x20000000
 8002180:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff fac4 	bl	8001710 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e2bd      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002196:	4baf      	ldr	r3, [pc, #700]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x2a8>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7ff fab4 	bl	8001710 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7ff fab0 	bl	8001710 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e2a9      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021be:	4ba5      	ldr	r3, [pc, #660]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x2d0>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d060      	beq.n	800229c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d005      	beq.n	80021ec <HAL_RCC_OscConfig+0x310>
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d119      	bne.n	800221a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d116      	bne.n	800221a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ec:	4b99      	ldr	r3, [pc, #612]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_OscConfig+0x328>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e286      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	4b93      	ldr	r3, [pc, #588]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	061b      	lsls	r3, r3, #24
 8002212:	4990      	ldr	r1, [pc, #576]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002218:	e040      	b.n	800229c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d023      	beq.n	800226a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002222:	4b8c      	ldr	r3, [pc, #560]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a8b      	ldr	r2, [pc, #556]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7ff fa6f 	bl	8001710 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002236:	f7ff fa6b 	bl	8001710 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e264      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002248:	4b82      	ldr	r3, [pc, #520]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002254:	4b7f      	ldr	r3, [pc, #508]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	497c      	ldr	r1, [pc, #496]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
 8002268:	e018      	b.n	800229c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226a:	4b7a      	ldr	r3, [pc, #488]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a79      	ldr	r2, [pc, #484]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7ff fa4b 	bl	8001710 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227e:	f7ff fa47 	bl	8001710 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e240      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002290:	4b70      	ldr	r3, [pc, #448]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d03c      	beq.n	8002322 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01c      	beq.n	80022ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b0:	4b68      	ldr	r3, [pc, #416]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80022b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b6:	4a67      	ldr	r2, [pc, #412]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c0:	f7ff fa26 	bl	8001710 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c8:	f7ff fa22 	bl	8001710 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e21b      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022da:	4b5e      	ldr	r3, [pc, #376]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80022dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ef      	beq.n	80022c8 <HAL_RCC_OscConfig+0x3ec>
 80022e8:	e01b      	b.n	8002322 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ea:	4b5a      	ldr	r3, [pc, #360]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80022ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f0:	4a58      	ldr	r2, [pc, #352]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7ff fa09 	bl	8001710 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002302:	f7ff fa05 	bl	8001710 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1fe      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002314:	4b4f      	ldr	r3, [pc, #316]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1ef      	bne.n	8002302 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 80a6 	beq.w	800247c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002334:	4b47      	ldr	r3, [pc, #284]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10d      	bne.n	800235c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002340:	4b44      	ldr	r3, [pc, #272]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	4a43      	ldr	r2, [pc, #268]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234a:	6593      	str	r3, [r2, #88]	; 0x58
 800234c:	4b41      	ldr	r3, [pc, #260]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002358:	2301      	movs	r3, #1
 800235a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235c:	4b3e      	ldr	r3, [pc, #248]	; (8002458 <HAL_RCC_OscConfig+0x57c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d118      	bne.n	800239a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002368:	4b3b      	ldr	r3, [pc, #236]	; (8002458 <HAL_RCC_OscConfig+0x57c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a3a      	ldr	r2, [pc, #232]	; (8002458 <HAL_RCC_OscConfig+0x57c>)
 800236e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002372:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002374:	f7ff f9cc 	bl	8001710 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237c:	f7ff f9c8 	bl	8001710 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e1c1      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238e:	4b32      	ldr	r3, [pc, #200]	; (8002458 <HAL_RCC_OscConfig+0x57c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d108      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4d8>
 80023a2:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	4a2a      	ldr	r2, [pc, #168]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b2:	e024      	b.n	80023fe <HAL_RCC_OscConfig+0x522>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d110      	bne.n	80023de <HAL_RCC_OscConfig+0x502>
 80023bc:	4b25      	ldr	r3, [pc, #148]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c2:	4a24      	ldr	r2, [pc, #144]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	4a20      	ldr	r2, [pc, #128]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023dc:	e00f      	b.n	80023fe <HAL_RCC_OscConfig+0x522>
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e4:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 80023f6:	f023 0304 	bic.w	r3, r3, #4
 80023fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d016      	beq.n	8002434 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002406:	f7ff f983 	bl	8001710 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7ff f97f 	bl	8001710 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e176      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_OscConfig+0x578>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ed      	beq.n	800240e <HAL_RCC_OscConfig+0x532>
 8002432:	e01a      	b.n	800246a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7ff f96c 	bl	8001710 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800243a:	e00f      	b.n	800245c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7ff f968 	bl	8001710 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d906      	bls.n	800245c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e15f      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800245c:	4baa      	ldr	r3, [pc, #680]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1e8      	bne.n	800243c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800246a:	7ffb      	ldrb	r3, [r7, #31]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d105      	bne.n	800247c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002470:	4ba5      	ldr	r3, [pc, #660]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	4aa4      	ldr	r2, [pc, #656]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d03c      	beq.n	8002502 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01c      	beq.n	80024ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002490:	4b9d      	ldr	r3, [pc, #628]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002492:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002496:	4a9c      	ldr	r2, [pc, #624]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a0:	f7ff f936 	bl	8001710 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a8:	f7ff f932 	bl	8001710 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e12b      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ba:	4b93      	ldr	r3, [pc, #588]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80024bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ef      	beq.n	80024a8 <HAL_RCC_OscConfig+0x5cc>
 80024c8:	e01b      	b.n	8002502 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ca:	4b8f      	ldr	r3, [pc, #572]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80024cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024d0:	4a8d      	ldr	r2, [pc, #564]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7ff f919 	bl	8001710 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024e2:	f7ff f915 	bl	8001710 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e10e      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024f4:	4b84      	ldr	r3, [pc, #528]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80024f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ef      	bne.n	80024e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8102 	beq.w	8002710 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	2b02      	cmp	r3, #2
 8002512:	f040 80c5 	bne.w	80026a0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002516:	4b7c      	ldr	r3, [pc, #496]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 0203 	and.w	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	429a      	cmp	r2, r3
 8002528:	d12c      	bne.n	8002584 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	3b01      	subs	r3, #1
 8002536:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d123      	bne.n	8002584 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002546:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d11b      	bne.n	8002584 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d113      	bne.n	8002584 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	085b      	lsrs	r3, r3, #1
 8002568:	3b01      	subs	r3, #1
 800256a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d109      	bne.n	8002584 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	085b      	lsrs	r3, r3, #1
 800257c:	3b01      	subs	r3, #1
 800257e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d067      	beq.n	8002654 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d062      	beq.n	8002650 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800258a:	4b5f      	ldr	r3, [pc, #380]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0bb      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800259a:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a5a      	ldr	r2, [pc, #360]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80025a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a6:	f7ff f8b3 	bl	8001710 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7ff f8af 	bl	8001710 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e0a8      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c0:	4b51      	ldr	r3, [pc, #324]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025cc:	4b4e      	ldr	r3, [pc, #312]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	4b4e      	ldr	r3, [pc, #312]	; (800270c <HAL_RCC_OscConfig+0x830>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025dc:	3a01      	subs	r2, #1
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	4311      	orrs	r1, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025e6:	0212      	lsls	r2, r2, #8
 80025e8:	4311      	orrs	r1, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025ee:	0852      	lsrs	r2, r2, #1
 80025f0:	3a01      	subs	r2, #1
 80025f2:	0552      	lsls	r2, r2, #21
 80025f4:	4311      	orrs	r1, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025fa:	0852      	lsrs	r2, r2, #1
 80025fc:	3a01      	subs	r2, #1
 80025fe:	0652      	lsls	r2, r2, #25
 8002600:	4311      	orrs	r1, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002606:	06d2      	lsls	r2, r2, #27
 8002608:	430a      	orrs	r2, r1
 800260a:	493f      	ldr	r1, [pc, #252]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 800260c:	4313      	orrs	r3, r2
 800260e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002610:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a3c      	ldr	r2, [pc, #240]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800261c:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a39      	ldr	r2, [pc, #228]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002626:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002628:	f7ff f872 	bl	8001710 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002630:	f7ff f86e 	bl	8001710 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e067      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002642:	4b31      	ldr	r3, [pc, #196]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800264e:	e05f      	b.n	8002710 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e05e      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002654:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d157      	bne.n	8002710 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002660:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a28      	ldr	r2, [pc, #160]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800266c:	4b26      	ldr	r3, [pc, #152]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a25      	ldr	r2, [pc, #148]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002676:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002678:	f7ff f84a 	bl	8001710 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002680:	f7ff f846 	bl	8001710 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e03f      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x7a4>
 800269e:	e037      	b.n	8002710 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d02d      	beq.n	8002702 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a17      	ldr	r2, [pc, #92]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80026ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80026c4:	f023 0303 	bic.w	r3, r3, #3
 80026c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026ca:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80026d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7ff f819 	bl	8001710 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e2:	f7ff f815 	bl	8001710 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e00e      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <HAL_RCC_OscConfig+0x82c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f0      	bne.n	80026e2 <HAL_RCC_OscConfig+0x806>
 8002700:	e006      	b.n	8002710 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e005      	b.n	8002712 <HAL_RCC_OscConfig+0x836>
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop

0800271c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0c8      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	4b66      	ldr	r3, [pc, #408]	; (80028cc <HAL_RCC_ClockConfig+0x1b0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d910      	bls.n	8002760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b63      	ldr	r3, [pc, #396]	; (80028cc <HAL_RCC_ClockConfig+0x1b0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0207 	bic.w	r2, r3, #7
 8002746:	4961      	ldr	r1, [pc, #388]	; (80028cc <HAL_RCC_ClockConfig+0x1b0>)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b5f      	ldr	r3, [pc, #380]	; (80028cc <HAL_RCC_ClockConfig+0x1b0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0b0      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d04c      	beq.n	8002806 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d107      	bne.n	8002784 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002774:	4b56      	ldr	r3, [pc, #344]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d121      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e09e      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d107      	bne.n	800279c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278c:	4b50      	ldr	r3, [pc, #320]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d115      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e092      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a4:	4b4a      	ldr	r3, [pc, #296]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e086      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b4:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e07e      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027c4:	4b42      	ldr	r3, [pc, #264]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f023 0203 	bic.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	493f      	ldr	r1, [pc, #252]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d6:	f7fe ff9b 	bl	8001710 <HAL_GetTick>
 80027da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027de:	f7fe ff97 	bl	8001710 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e066      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f4:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 020c 	and.w	r2, r3, #12
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	429a      	cmp	r2, r3
 8002804:	d1eb      	bne.n	80027de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002812:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	492c      	ldr	r1, [pc, #176]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002824:	4b29      	ldr	r3, [pc, #164]	; (80028cc <HAL_RCC_ClockConfig+0x1b0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d210      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_RCC_ClockConfig+0x1b0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 0207 	bic.w	r2, r3, #7
 800283a:	4924      	ldr	r1, [pc, #144]	; (80028cc <HAL_RCC_ClockConfig+0x1b0>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b22      	ldr	r3, [pc, #136]	; (80028cc <HAL_RCC_ClockConfig+0x1b0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e036      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4918      	ldr	r1, [pc, #96]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4910      	ldr	r1, [pc, #64]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002892:	f000 f825 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8002896:	4602      	mov	r2, r0
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <HAL_RCC_ClockConfig+0x1b4>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	490c      	ldr	r1, [pc, #48]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 80028a4:	5ccb      	ldrb	r3, [r1, r3]
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe feda 	bl	8001670 <HAL_InitTick>
 80028bc:	4603      	mov	r3, r0
 80028be:	72fb      	strb	r3, [r7, #11]

  return status;
 80028c0:	7afb      	ldrb	r3, [r7, #11]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40022000 	.word	0x40022000
 80028d0:	40021000 	.word	0x40021000
 80028d4:	080083e8 	.word	0x080083e8
 80028d8:	20000000 	.word	0x20000000
 80028dc:	20000004 	.word	0x20000004

080028e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ee:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f8:	4b3b      	ldr	r3, [pc, #236]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x34>
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d121      	bne.n	8002952 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d11e      	bne.n	8002952 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002914:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d107      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002920:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	e005      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800293c:	4a2b      	ldr	r2, [pc, #172]	; (80029ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002944:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10d      	bne.n	8002968 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b04      	cmp	r3, #4
 8002956:	d102      	bne.n	800295e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002958:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800295a:	61bb      	str	r3, [r7, #24]
 800295c:	e004      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b08      	cmp	r3, #8
 8002962:	d101      	bne.n	8002968 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002966:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d134      	bne.n	80029d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800296e:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d003      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0xa6>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d003      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0xac>
 8002984:	e005      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002986:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002988:	617b      	str	r3, [r7, #20]
      break;
 800298a:	e005      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800298e:	617b      	str	r3, [r7, #20]
      break;
 8002990:	e002      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	617b      	str	r3, [r7, #20]
      break;
 8002996:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	3301      	adds	r3, #1
 80029a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	fb02 f203 	mul.w	r2, r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	0e5b      	lsrs	r3, r3, #25
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	3301      	adds	r3, #1
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029d8:	69bb      	ldr	r3, [r7, #24]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	; 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	08008400 	.word	0x08008400
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	007a1200 	.word	0x007a1200

080029f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000000 	.word	0x20000000

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a14:	f7ff fff0 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4904      	ldr	r1, [pc, #16]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	080083f8 	.word	0x080083f8

08002a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a40:	f7ff ffda 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	0adb      	lsrs	r3, r3, #11
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	4904      	ldr	r1, [pc, #16]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a52:	5ccb      	ldrb	r3, [r1, r3]
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	080083f8 	.word	0x080083f8

08002a68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a74:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a80:	f7ff f9c8 	bl	8001e14 <HAL_PWREx_GetVoltageRange>
 8002a84:	6178      	str	r0, [r7, #20]
 8002a86:	e014      	b.n	8002ab2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	4b25      	ldr	r3, [pc, #148]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	4a24      	ldr	r2, [pc, #144]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a92:	6593      	str	r3, [r2, #88]	; 0x58
 8002a94:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002aa0:	f7ff f9b8 	bl	8001e14 <HAL_PWREx_GetVoltageRange>
 8002aa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab8:	d10b      	bne.n	8002ad2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b80      	cmp	r3, #128	; 0x80
 8002abe:	d919      	bls.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ac4:	d902      	bls.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	e013      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002acc:	2301      	movs	r3, #1
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	e010      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b80      	cmp	r3, #128	; 0x80
 8002ad6:	d902      	bls.n	8002ade <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ad8:	2303      	movs	r3, #3
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	e00a      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b80      	cmp	r3, #128	; 0x80
 8002ae2:	d102      	bne.n	8002aea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	e004      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b70      	cmp	r3, #112	; 0x70
 8002aee:	d101      	bne.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002af0:	2301      	movs	r3, #1
 8002af2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 0207 	bic.w	r2, r3, #7
 8002afc:	4909      	ldr	r1, [pc, #36]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b04:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d001      	beq.n	8002b16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40022000 	.word	0x40022000

08002b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b30:	2300      	movs	r3, #0
 8002b32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b34:	2300      	movs	r3, #0
 8002b36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d031      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b4c:	d01a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b52:	d814      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d009      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b5c:	d10f      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b5e:	4bac      	ldr	r3, [pc, #688]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	4aab      	ldr	r2, [pc, #684]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b6a:	e00c      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3304      	adds	r3, #4
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f9cc 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b7c:	e003      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	74fb      	strb	r3, [r7, #19]
      break;
 8002b82:	e000      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b8c:	4ba0      	ldr	r3, [pc, #640]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	499d      	ldr	r1, [pc, #628]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ba2:	e001      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba4:	7cfb      	ldrb	r3, [r7, #19]
 8002ba6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8099 	beq.w	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bba:	4b95      	ldr	r3, [pc, #596]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00d      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	4b8f      	ldr	r3, [pc, #572]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	4a8e      	ldr	r2, [pc, #568]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6593      	str	r3, [r2, #88]	; 0x58
 8002bdc:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be8:	2301      	movs	r3, #1
 8002bea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bec:	4b89      	ldr	r3, [pc, #548]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a88      	ldr	r2, [pc, #544]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fd8a 	bl	8001710 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bfe:	e009      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c00:	f7fe fd86 	bl	8001710 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d902      	bls.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	74fb      	strb	r3, [r7, #19]
        break;
 8002c12:	e005      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c14:	4b7f      	ldr	r3, [pc, #508]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ef      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d155      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c26:	4b7a      	ldr	r3, [pc, #488]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01e      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d019      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c42:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c4c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c4e:	4b70      	ldr	r3, [pc, #448]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c54:	4a6e      	ldr	r2, [pc, #440]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c5e:	4b6c      	ldr	r3, [pc, #432]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c64:	4a6a      	ldr	r2, [pc, #424]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c6e:	4a68      	ldr	r2, [pc, #416]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d016      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fd46 	bl	8001710 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c88:	f7fe fd42 	bl	8001710 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d902      	bls.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	74fb      	strb	r3, [r7, #19]
            break;
 8002c9e:	e006      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca0:	4b5b      	ldr	r3, [pc, #364]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0ec      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002cae:	7cfb      	ldrb	r3, [r7, #19]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cb4:	4b56      	ldr	r3, [pc, #344]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc2:	4953      	ldr	r1, [pc, #332]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cca:	e004      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	74bb      	strb	r3, [r7, #18]
 8002cd0:	e001      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd6:	7c7b      	ldrb	r3, [r7, #17]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cdc:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	4a4b      	ldr	r2, [pc, #300]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cf4:	4b46      	ldr	r3, [pc, #280]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4943      	ldr	r1, [pc, #268]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d16:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1c:	f023 020c 	bic.w	r2, r3, #12
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	493a      	ldr	r1, [pc, #232]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d38:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	4932      	ldr	r1, [pc, #200]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	4929      	ldr	r1, [pc, #164]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d7c:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	4921      	ldr	r1, [pc, #132]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	4918      	ldr	r1, [pc, #96]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4910      	ldr	r1, [pc, #64]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d02c      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002de2:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	4907      	ldr	r1, [pc, #28]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e00:	d10a      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e02:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4a02      	ldr	r2, [pc, #8]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e0c:	60d3      	str	r3, [r2, #12]
 8002e0e:	e015      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3304      	adds	r3, #4
 8002e26:	2101      	movs	r1, #1
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f871 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e32:	7cfb      	ldrb	r3, [r7, #19]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d028      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e48:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	492d      	ldr	r1, [pc, #180]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e66:	d106      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e68:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e72:	60d3      	str	r3, [r2, #12]
 8002e74:	e011      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e7e:	d10c      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3304      	adds	r3, #4
 8002e84:	2101      	movs	r1, #1
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f842 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01c      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb4:	4915      	ldr	r1, [pc, #84]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2102      	movs	r1, #2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 f81f 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002eec:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efa:	4904      	ldr	r1, [pc, #16]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f02:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000

08002f10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f1e:	4b74      	ldr	r3, [pc, #464]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d018      	beq.n	8002f5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f2a:	4b71      	ldr	r3, [pc, #452]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0203 	and.w	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d10d      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f42:	4b6b      	ldr	r3, [pc, #428]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
       ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d047      	beq.n	8002fe6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	e044      	b.n	8002fe6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d018      	beq.n	8002f96 <RCCEx_PLLSAI1_Config+0x86>
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d825      	bhi.n	8002fb4 <RCCEx_PLLSAI1_Config+0xa4>
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d002      	beq.n	8002f72 <RCCEx_PLLSAI1_Config+0x62>
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d009      	beq.n	8002f84 <RCCEx_PLLSAI1_Config+0x74>
 8002f70:	e020      	b.n	8002fb4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f72:	4b5f      	ldr	r3, [pc, #380]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d11d      	bne.n	8002fba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f82:	e01a      	b.n	8002fba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f84:	4b5a      	ldr	r3, [pc, #360]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d116      	bne.n	8002fbe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f94:	e013      	b.n	8002fbe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f96:	4b56      	ldr	r3, [pc, #344]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fa2:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fb2:	e006      	b.n	8002fc2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb8:	e004      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fba:	bf00      	nop
 8002fbc:	e002      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fbe:	bf00      	nop
 8002fc0:	e000      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10d      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fca:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6819      	ldr	r1, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	4943      	ldr	r1, [pc, #268]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d17c      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fec:	4b40      	ldr	r3, [pc, #256]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a3f      	ldr	r2, [pc, #252]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff8:	f7fe fb8a 	bl	8001710 <HAL_GetTick>
 8002ffc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ffe:	e009      	b.n	8003014 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003000:	f7fe fb86 	bl	8001710 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d902      	bls.n	8003014 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	73fb      	strb	r3, [r7, #15]
        break;
 8003012:	e005      	b.n	8003020 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003014:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ef      	bne.n	8003000 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d15f      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d110      	bne.n	800304e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800302c:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003034:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6892      	ldr	r2, [r2, #8]
 800303c:	0211      	lsls	r1, r2, #8
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68d2      	ldr	r2, [r2, #12]
 8003042:	06d2      	lsls	r2, r2, #27
 8003044:	430a      	orrs	r2, r1
 8003046:	492a      	ldr	r1, [pc, #168]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003048:	4313      	orrs	r3, r2
 800304a:	610b      	str	r3, [r1, #16]
 800304c:	e027      	b.n	800309e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d112      	bne.n	800307a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003054:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800305c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6892      	ldr	r2, [r2, #8]
 8003064:	0211      	lsls	r1, r2, #8
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6912      	ldr	r2, [r2, #16]
 800306a:	0852      	lsrs	r2, r2, #1
 800306c:	3a01      	subs	r2, #1
 800306e:	0552      	lsls	r2, r2, #21
 8003070:	430a      	orrs	r2, r1
 8003072:	491f      	ldr	r1, [pc, #124]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003074:	4313      	orrs	r3, r2
 8003076:	610b      	str	r3, [r1, #16]
 8003078:	e011      	b.n	800309e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800307a:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003082:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6892      	ldr	r2, [r2, #8]
 800308a:	0211      	lsls	r1, r2, #8
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6952      	ldr	r2, [r2, #20]
 8003090:	0852      	lsrs	r2, r2, #1
 8003092:	3a01      	subs	r2, #1
 8003094:	0652      	lsls	r2, r2, #25
 8003096:	430a      	orrs	r2, r1
 8003098:	4915      	ldr	r1, [pc, #84]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800309a:	4313      	orrs	r3, r2
 800309c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800309e:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a13      	ldr	r2, [pc, #76]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fe fb31 	bl	8001710 <HAL_GetTick>
 80030ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030b0:	e009      	b.n	80030c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030b2:	f7fe fb2d 	bl	8001710 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d902      	bls.n	80030c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	73fb      	strb	r3, [r7, #15]
          break;
 80030c4:	e005      	b.n	80030d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0ef      	beq.n	80030b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	4903      	ldr	r1, [pc, #12]	; (80030f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000

080030f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e049      	b.n	800319a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe f94a 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f000 f882 	bl	800323c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d001      	beq.n	80031bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e033      	b.n	8003224 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a19      	ldr	r2, [pc, #100]	; (8003230 <HAL_TIM_Base_Start+0x8c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_TIM_Base_Start+0x3e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d6:	d004      	beq.n	80031e2 <HAL_TIM_Base_Start+0x3e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a15      	ldr	r2, [pc, #84]	; (8003234 <HAL_TIM_Base_Start+0x90>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d115      	bne.n	800320e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_TIM_Base_Start+0x94>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b06      	cmp	r3, #6
 80031f2:	d015      	beq.n	8003220 <HAL_TIM_Base_Start+0x7c>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fa:	d011      	beq.n	8003220 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320c:	e008      	b.n	8003220 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e000      	b.n	8003222 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003220:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40014000 	.word	0x40014000
 8003238:	00010007 	.word	0x00010007

0800323c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a2a      	ldr	r2, [pc, #168]	; (80032f8 <TIM_Base_SetConfig+0xbc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_Base_SetConfig+0x20>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325a:	d108      	bne.n	800326e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a21      	ldr	r2, [pc, #132]	; (80032f8 <TIM_Base_SetConfig+0xbc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00b      	beq.n	800328e <TIM_Base_SetConfig+0x52>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327c:	d007      	beq.n	800328e <TIM_Base_SetConfig+0x52>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a1e      	ldr	r2, [pc, #120]	; (80032fc <TIM_Base_SetConfig+0xc0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <TIM_Base_SetConfig+0x52>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <TIM_Base_SetConfig+0xc4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d108      	bne.n	80032a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a0c      	ldr	r2, [pc, #48]	; (80032f8 <TIM_Base_SetConfig+0xbc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d007      	beq.n	80032dc <TIM_Base_SetConfig+0xa0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <TIM_Base_SetConfig+0xc0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0xa0>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <TIM_Base_SetConfig+0xc4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d103      	bne.n	80032e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	615a      	str	r2, [r3, #20]
}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40014000 	.word	0x40014000
 8003300:	40014400 	.word	0x40014400

08003304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e040      	b.n	8003398 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fe f864 	bl	80013f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2224      	movs	r2, #36	; 0x24
 8003330:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f8c0 	bl	80034c8 <UART_SetConfig>
 8003348:	4603      	mov	r3, r0
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e022      	b.n	8003398 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fac0 	bl	80038e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800336e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800337e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fb47 	bl	8003a24 <UART_CheckIdleState>
 8003396:	4603      	mov	r3, r0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	f040 8082 	bne.w	80034be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_UART_Transmit+0x26>
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e07a      	b.n	80034c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_UART_Transmit+0x38>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e073      	b.n	80034c0 <HAL_UART_Transmit+0x120>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2221      	movs	r2, #33	; 0x21
 80033ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ee:	f7fe f98f 	bl	8001710 <HAL_GetTick>
 80033f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340c:	d108      	bne.n	8003420 <HAL_UART_Transmit+0x80>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d104      	bne.n	8003420 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	e003      	b.n	8003428 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003430:	e02d      	b.n	800348e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	2180      	movs	r1, #128	; 0x80
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fb3a 	bl	8003ab6 <UART_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e039      	b.n	80034c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	881a      	ldrh	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800345e:	b292      	uxth	r2, r2
 8003460:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	3302      	adds	r3, #2
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	e008      	b.n	800347c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b292      	uxth	r2, r2
 8003474:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3301      	adds	r3, #1
 800347a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1cb      	bne.n	8003432 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2200      	movs	r2, #0
 80034a2:	2140      	movs	r1, #64	; 0x40
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fb06 	bl	8003ab6 <UART_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e005      	b.n	80034c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e000      	b.n	80034c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80034be:	2302      	movs	r3, #2
  }
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c8:	b5b0      	push	{r4, r5, r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4baf      	ldr	r3, [pc, #700]	; (80037b0 <UART_SetConfig+0x2e8>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	69f9      	ldr	r1, [r7, #28]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4aa4      	ldr	r2, [pc, #656]	; (80037b4 <UART_SetConfig+0x2ec>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	4313      	orrs	r3, r2
 800352e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	430a      	orrs	r2, r1
 8003542:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a9b      	ldr	r2, [pc, #620]	; (80037b8 <UART_SetConfig+0x2f0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d121      	bne.n	8003592 <UART_SetConfig+0xca>
 800354e:	4b9b      	ldr	r3, [pc, #620]	; (80037bc <UART_SetConfig+0x2f4>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b03      	cmp	r3, #3
 800355a:	d817      	bhi.n	800358c <UART_SetConfig+0xc4>
 800355c:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <UART_SetConfig+0x9c>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003575 	.word	0x08003575
 8003568:	08003581 	.word	0x08003581
 800356c:	0800357b 	.word	0x0800357b
 8003570:	08003587 	.word	0x08003587
 8003574:	2301      	movs	r3, #1
 8003576:	76fb      	strb	r3, [r7, #27]
 8003578:	e070      	b.n	800365c <UART_SetConfig+0x194>
 800357a:	2302      	movs	r3, #2
 800357c:	76fb      	strb	r3, [r7, #27]
 800357e:	e06d      	b.n	800365c <UART_SetConfig+0x194>
 8003580:	2304      	movs	r3, #4
 8003582:	76fb      	strb	r3, [r7, #27]
 8003584:	e06a      	b.n	800365c <UART_SetConfig+0x194>
 8003586:	2308      	movs	r3, #8
 8003588:	76fb      	strb	r3, [r7, #27]
 800358a:	e067      	b.n	800365c <UART_SetConfig+0x194>
 800358c:	2310      	movs	r3, #16
 800358e:	76fb      	strb	r3, [r7, #27]
 8003590:	e064      	b.n	800365c <UART_SetConfig+0x194>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a8a      	ldr	r2, [pc, #552]	; (80037c0 <UART_SetConfig+0x2f8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d132      	bne.n	8003602 <UART_SetConfig+0x13a>
 800359c:	4b87      	ldr	r3, [pc, #540]	; (80037bc <UART_SetConfig+0x2f4>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	d828      	bhi.n	80035fc <UART_SetConfig+0x134>
 80035aa:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <UART_SetConfig+0xe8>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	080035e5 	.word	0x080035e5
 80035b4:	080035fd 	.word	0x080035fd
 80035b8:	080035fd 	.word	0x080035fd
 80035bc:	080035fd 	.word	0x080035fd
 80035c0:	080035f1 	.word	0x080035f1
 80035c4:	080035fd 	.word	0x080035fd
 80035c8:	080035fd 	.word	0x080035fd
 80035cc:	080035fd 	.word	0x080035fd
 80035d0:	080035eb 	.word	0x080035eb
 80035d4:	080035fd 	.word	0x080035fd
 80035d8:	080035fd 	.word	0x080035fd
 80035dc:	080035fd 	.word	0x080035fd
 80035e0:	080035f7 	.word	0x080035f7
 80035e4:	2300      	movs	r3, #0
 80035e6:	76fb      	strb	r3, [r7, #27]
 80035e8:	e038      	b.n	800365c <UART_SetConfig+0x194>
 80035ea:	2302      	movs	r3, #2
 80035ec:	76fb      	strb	r3, [r7, #27]
 80035ee:	e035      	b.n	800365c <UART_SetConfig+0x194>
 80035f0:	2304      	movs	r3, #4
 80035f2:	76fb      	strb	r3, [r7, #27]
 80035f4:	e032      	b.n	800365c <UART_SetConfig+0x194>
 80035f6:	2308      	movs	r3, #8
 80035f8:	76fb      	strb	r3, [r7, #27]
 80035fa:	e02f      	b.n	800365c <UART_SetConfig+0x194>
 80035fc:	2310      	movs	r3, #16
 80035fe:	76fb      	strb	r3, [r7, #27]
 8003600:	e02c      	b.n	800365c <UART_SetConfig+0x194>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a6b      	ldr	r2, [pc, #428]	; (80037b4 <UART_SetConfig+0x2ec>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d125      	bne.n	8003658 <UART_SetConfig+0x190>
 800360c:	4b6b      	ldr	r3, [pc, #428]	; (80037bc <UART_SetConfig+0x2f4>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800361a:	d017      	beq.n	800364c <UART_SetConfig+0x184>
 800361c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003620:	d817      	bhi.n	8003652 <UART_SetConfig+0x18a>
 8003622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003626:	d00b      	beq.n	8003640 <UART_SetConfig+0x178>
 8003628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800362c:	d811      	bhi.n	8003652 <UART_SetConfig+0x18a>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <UART_SetConfig+0x172>
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d006      	beq.n	8003646 <UART_SetConfig+0x17e>
 8003638:	e00b      	b.n	8003652 <UART_SetConfig+0x18a>
 800363a:	2300      	movs	r3, #0
 800363c:	76fb      	strb	r3, [r7, #27]
 800363e:	e00d      	b.n	800365c <UART_SetConfig+0x194>
 8003640:	2302      	movs	r3, #2
 8003642:	76fb      	strb	r3, [r7, #27]
 8003644:	e00a      	b.n	800365c <UART_SetConfig+0x194>
 8003646:	2304      	movs	r3, #4
 8003648:	76fb      	strb	r3, [r7, #27]
 800364a:	e007      	b.n	800365c <UART_SetConfig+0x194>
 800364c:	2308      	movs	r3, #8
 800364e:	76fb      	strb	r3, [r7, #27]
 8003650:	e004      	b.n	800365c <UART_SetConfig+0x194>
 8003652:	2310      	movs	r3, #16
 8003654:	76fb      	strb	r3, [r7, #27]
 8003656:	e001      	b.n	800365c <UART_SetConfig+0x194>
 8003658:	2310      	movs	r3, #16
 800365a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a54      	ldr	r2, [pc, #336]	; (80037b4 <UART_SetConfig+0x2ec>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d173      	bne.n	800374e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003666:	7efb      	ldrb	r3, [r7, #27]
 8003668:	2b08      	cmp	r3, #8
 800366a:	d824      	bhi.n	80036b6 <UART_SetConfig+0x1ee>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <UART_SetConfig+0x1ac>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	08003699 	.word	0x08003699
 8003678:	080036b7 	.word	0x080036b7
 800367c:	080036a1 	.word	0x080036a1
 8003680:	080036b7 	.word	0x080036b7
 8003684:	080036a7 	.word	0x080036a7
 8003688:	080036b7 	.word	0x080036b7
 800368c:	080036b7 	.word	0x080036b7
 8003690:	080036b7 	.word	0x080036b7
 8003694:	080036af 	.word	0x080036af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003698:	f7ff f9ba 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 800369c:	6178      	str	r0, [r7, #20]
        break;
 800369e:	e00f      	b.n	80036c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a0:	4b48      	ldr	r3, [pc, #288]	; (80037c4 <UART_SetConfig+0x2fc>)
 80036a2:	617b      	str	r3, [r7, #20]
        break;
 80036a4:	e00c      	b.n	80036c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a6:	f7ff f91b 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 80036aa:	6178      	str	r0, [r7, #20]
        break;
 80036ac:	e008      	b.n	80036c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036b2:	617b      	str	r3, [r7, #20]
        break;
 80036b4:	e004      	b.n	80036c0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	76bb      	strb	r3, [r7, #26]
        break;
 80036be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80fe 	beq.w	80038c4 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d305      	bcc.n	80036e4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d902      	bls.n	80036ea <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	76bb      	strb	r3, [r7, #26]
 80036e8:	e0ec      	b.n	80038c4 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	020b      	lsls	r3, r1, #8
 80036fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003700:	0202      	lsls	r2, r0, #8
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	6849      	ldr	r1, [r1, #4]
 8003706:	0849      	lsrs	r1, r1, #1
 8003708:	4608      	mov	r0, r1
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	1814      	adds	r4, r2, r0
 8003710:	eb43 0501 	adc.w	r5, r3, r1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	461a      	mov	r2, r3
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	4620      	mov	r0, r4
 8003720:	4629      	mov	r1, r5
 8003722:	f7fd fa41 	bl	8000ba8 <__aeabi_uldivmod>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4613      	mov	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003734:	d308      	bcc.n	8003748 <UART_SetConfig+0x280>
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800373c:	d204      	bcs.n	8003748 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	e0bd      	b.n	80038c4 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	76bb      	strb	r3, [r7, #26]
 800374c:	e0ba      	b.n	80038c4 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003756:	d168      	bne.n	800382a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8003758:	7efb      	ldrb	r3, [r7, #27]
 800375a:	2b08      	cmp	r3, #8
 800375c:	d834      	bhi.n	80037c8 <UART_SetConfig+0x300>
 800375e:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <UART_SetConfig+0x29c>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	08003789 	.word	0x08003789
 8003768:	08003791 	.word	0x08003791
 800376c:	08003799 	.word	0x08003799
 8003770:	080037c9 	.word	0x080037c9
 8003774:	0800379f 	.word	0x0800379f
 8003778:	080037c9 	.word	0x080037c9
 800377c:	080037c9 	.word	0x080037c9
 8003780:	080037c9 	.word	0x080037c9
 8003784:	080037a7 	.word	0x080037a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003788:	f7ff f942 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 800378c:	6178      	str	r0, [r7, #20]
        break;
 800378e:	e020      	b.n	80037d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003790:	f7ff f954 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8003794:	6178      	str	r0, [r7, #20]
        break;
 8003796:	e01c      	b.n	80037d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <UART_SetConfig+0x2fc>)
 800379a:	617b      	str	r3, [r7, #20]
        break;
 800379c:	e019      	b.n	80037d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800379e:	f7ff f89f 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 80037a2:	6178      	str	r0, [r7, #20]
        break;
 80037a4:	e015      	b.n	80037d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037aa:	617b      	str	r3, [r7, #20]
        break;
 80037ac:	e011      	b.n	80037d2 <UART_SetConfig+0x30a>
 80037ae:	bf00      	nop
 80037b0:	efff69f3 	.word	0xefff69f3
 80037b4:	40008000 	.word	0x40008000
 80037b8:	40013800 	.word	0x40013800
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40004400 	.word	0x40004400
 80037c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	76bb      	strb	r3, [r7, #26]
        break;
 80037d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d075      	beq.n	80038c4 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	005a      	lsls	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	441a      	add	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b0f      	cmp	r3, #15
 80037f4:	d916      	bls.n	8003824 <UART_SetConfig+0x35c>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fc:	d212      	bcs.n	8003824 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f023 030f 	bic.w	r3, r3, #15
 8003806:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	b29b      	uxth	r3, r3
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	b29a      	uxth	r2, r3
 8003814:	89fb      	ldrh	r3, [r7, #14]
 8003816:	4313      	orrs	r3, r2
 8003818:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	89fa      	ldrh	r2, [r7, #14]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	e04f      	b.n	80038c4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	76bb      	strb	r3, [r7, #26]
 8003828:	e04c      	b.n	80038c4 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800382a:	7efb      	ldrb	r3, [r7, #27]
 800382c:	2b08      	cmp	r3, #8
 800382e:	d828      	bhi.n	8003882 <UART_SetConfig+0x3ba>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <UART_SetConfig+0x370>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	0800385d 	.word	0x0800385d
 800383c:	08003865 	.word	0x08003865
 8003840:	0800386d 	.word	0x0800386d
 8003844:	08003883 	.word	0x08003883
 8003848:	08003873 	.word	0x08003873
 800384c:	08003883 	.word	0x08003883
 8003850:	08003883 	.word	0x08003883
 8003854:	08003883 	.word	0x08003883
 8003858:	0800387b 	.word	0x0800387b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800385c:	f7ff f8d8 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8003860:	6178      	str	r0, [r7, #20]
        break;
 8003862:	e013      	b.n	800388c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003864:	f7ff f8ea 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8003868:	6178      	str	r0, [r7, #20]
        break;
 800386a:	e00f      	b.n	800388c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800386c:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <UART_SetConfig+0x414>)
 800386e:	617b      	str	r3, [r7, #20]
        break;
 8003870:	e00c      	b.n	800388c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003872:	f7ff f835 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8003876:	6178      	str	r0, [r7, #20]
        break;
 8003878:	e008      	b.n	800388c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800387e:	617b      	str	r3, [r7, #20]
        break;
 8003880:	e004      	b.n	800388c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	76bb      	strb	r3, [r7, #26]
        break;
 800388a:	bf00      	nop
    }

    if (pclk != 0U)
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d018      	beq.n	80038c4 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	085a      	lsrs	r2, r3, #1
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	441a      	add	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b0f      	cmp	r3, #15
 80038ac:	d908      	bls.n	80038c0 <UART_SetConfig+0x3f8>
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b4:	d204      	bcs.n	80038c0 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	e001      	b.n	80038c4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bdb0      	pop	{r4, r5, r7, pc}
 80038da:	bf00      	nop
 80038dc:	00f42400 	.word	0x00f42400

080038e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01a      	beq.n	80039f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039de:	d10a      	bne.n	80039f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
  }
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a34:	f7fd fe6c 	bl	8001710 <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d10e      	bne.n	8003a66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f82d 	bl	8003ab6 <UART_WaitOnFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e023      	b.n	8003aae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d10e      	bne.n	8003a92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f817 	bl	8003ab6 <UART_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e00d      	b.n	8003aae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac6:	e05e      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ace:	d05a      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad0:	f7fd fe1e 	bl	8001710 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d302      	bcc.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d11b      	bne.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003af4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e043      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d02c      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3a:	d124      	bne.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b44:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b54:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e00f      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	bf0c      	ite	eq
 8003b96:	2301      	moveq	r3, #1
 8003b98:	2300      	movne	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d091      	beq.n	8003ac8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <sine_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8003bbe:	f107 030c 	add.w	r3, r7, #12
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f95c 	bl	8003e84 <ai_platform_get_activations_map>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d027      	beq.n	8003c22 <sine_model_configure_activations+0x72>
    /* Updating activations (byte) offsets */
    dense_3_input_output_array.data = AI_PTR(NULL);
 8003bd2:	4b16      	ldr	r3, [pc, #88]	; (8003c2c <sine_model_configure_activations+0x7c>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
    dense_3_input_output_array.data_start = AI_PTR(NULL);
 8003bd8:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <sine_model_configure_activations+0x7c>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations_map[0] + 0);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <sine_model_configure_activations+0x80>)
 8003be2:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <sine_model_configure_activations+0x80>)
 8003be8:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <sine_model_configure_activations+0x84>)
 8003bee:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a10      	ldr	r2, [pc, #64]	; (8003c34 <sine_model_configure_activations+0x84>)
 8003bf4:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 64);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3340      	adds	r3, #64	; 0x40
 8003bfa:	4a0f      	ldr	r2, [pc, #60]	; (8003c38 <sine_model_configure_activations+0x88>)
 8003bfc:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 64);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3340      	adds	r3, #64	; 0x40
 8003c02:	4a0d      	ldr	r2, [pc, #52]	; (8003c38 <sine_model_configure_activations+0x88>)
 8003c04:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a0c      	ldr	r2, [pc, #48]	; (8003c3c <sine_model_configure_activations+0x8c>)
 8003c0a:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <sine_model_configure_activations+0x8c>)
 8003c10:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <sine_model_configure_activations+0x90>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 8003c18:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <sine_model_configure_activations+0x90>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60da      	str	r2, [r3, #12]
    
    return true;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <sine_model_configure_activations+0x74>
  }
  return false;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	2000000c 	.word	0x2000000c
 8003c30:	2000001c 	.word	0x2000001c
 8003c34:	2000002c 	.word	0x2000002c
 8003c38:	2000003c 	.word	0x2000003c
 8003c3c:	2000004c 	.word	0x2000004c
 8003c40:	2000005c 	.word	0x2000005c

08003c44 <sine_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8003c52:	f107 030c 	add.w	r3, r7, #12
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f8de 	bl	8003e1c <ai_platform_get_weights_map>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d059      	beq.n	8003d1a <sine_model_configure_weights+0xd6>
    /* Updating weights with array addresses */
    
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8003c66:	4b2f      	ldr	r3, [pc, #188]	; (8003d24 <sine_model_configure_weights+0xe0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c6e:	4a2d      	ldr	r2, [pc, #180]	; (8003d24 <sine_model_configure_weights+0xe0>)
 8003c70:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a2b      	ldr	r2, [pc, #172]	; (8003d24 <sine_model_configure_weights+0xe0>)
 8003c76:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a2a      	ldr	r2, [pc, #168]	; (8003d24 <sine_model_configure_weights+0xe0>)
 8003c7c:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8003c7e:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <sine_model_configure_weights+0xe4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c86:	4a28      	ldr	r2, [pc, #160]	; (8003d28 <sine_model_configure_weights+0xe4>)
 8003c88:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights_map[0] + 64);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3340      	adds	r3, #64	; 0x40
 8003c8e:	4a26      	ldr	r2, [pc, #152]	; (8003d28 <sine_model_configure_weights+0xe4>)
 8003c90:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights_map[0] + 64);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3340      	adds	r3, #64	; 0x40
 8003c96:	4a24      	ldr	r2, [pc, #144]	; (8003d28 <sine_model_configure_weights+0xe4>)
 8003c98:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8003c9a:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <sine_model_configure_weights+0xe8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ca2:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <sine_model_configure_weights+0xe8>)
 8003ca4:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights_map[0] + 128);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3380      	adds	r3, #128	; 0x80
 8003caa:	4a20      	ldr	r2, [pc, #128]	; (8003d2c <sine_model_configure_weights+0xe8>)
 8003cac:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 128);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3380      	adds	r3, #128	; 0x80
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <sine_model_configure_weights+0xe8>)
 8003cb4:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003cb6:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <sine_model_configure_weights+0xec>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cbe:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <sine_model_configure_weights+0xec>)
 8003cc0:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 1152);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003cc8:	4a19      	ldr	r2, [pc, #100]	; (8003d30 <sine_model_configure_weights+0xec>)
 8003cca:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 1152);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003cd2:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <sine_model_configure_weights+0xec>)
 8003cd4:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8003cd6:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <sine_model_configure_weights+0xf0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cde:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <sine_model_configure_weights+0xf0>)
 8003ce0:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights_map[0] + 1216);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8003ce8:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <sine_model_configure_weights+0xf0>)
 8003cea:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights_map[0] + 1216);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8003cf2:	4a10      	ldr	r2, [pc, #64]	; (8003d34 <sine_model_configure_weights+0xf0>)
 8003cf4:	60d3      	str	r3, [r2, #12]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8003cf6:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <sine_model_configure_weights+0xf4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cfe:	4a0e      	ldr	r2, [pc, #56]	; (8003d38 <sine_model_configure_weights+0xf4>)
 8003d00:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights_map[0] + 1280);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d08:	4a0b      	ldr	r2, [pc, #44]	; (8003d38 <sine_model_configure_weights+0xf4>)
 8003d0a:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights_map[0] + 1280);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d12:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <sine_model_configure_weights+0xf4>)
 8003d14:	60d3      	str	r3, [r2, #12]
    return true;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <sine_model_configure_weights+0xd8>
  }
  return false;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	2000006c 	.word	0x2000006c
 8003d28:	2000007c 	.word	0x2000007c
 8003d2c:	2000008c 	.word	0x2000008c
 8003d30:	2000009c 	.word	0x2000009c
 8003d34:	200000ac 	.word	0x200000ac
 8003d38:	200000bc 	.word	0x200000bc

08003d3c <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8003d46:	2300      	movs	r3, #0
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	2301      	movs	r3, #1
 8003d50:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <ai_sine_model_create+0x28>)
 8003d52:	6839      	ldr	r1, [r7, #0]
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f8c9 	bl	8003eec <ai_platform_network_create>
 8003d5a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	200005c8 	.word	0x200005c8

08003d68 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003d72:	6839      	ldr	r1, [r7, #0]
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f98f 	bl	8004098 <ai_platform_network_init>
 8003d7a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <ai_sine_model_init+0x1e>
 8003d82:	2300      	movs	r3, #0
 8003d84:	e028      	b.n	8003dd8 <ai_sine_model_init+0x70>

  ai_bool ok = true;
 8003d86:	2301      	movs	r3, #1
 8003d88:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, params);
 8003d8a:	6839      	ldr	r1, [r7, #0]
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f7ff ff59 	bl	8003c44 <sine_model_configure_weights>
 8003d92:	4603      	mov	r3, r0
 8003d94:	461a      	mov	r2, r3
 8003d96:	7afb      	ldrb	r3, [r7, #11]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bf14      	ite	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	2300      	moveq	r3, #0
 8003da2:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, params);
 8003da4:	6839      	ldr	r1, [r7, #0]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7ff ff02 	bl	8003bb0 <sine_model_configure_activations>
 8003dac:	4603      	mov	r3, r0
 8003dae:	461a      	mov	r2, r3
 8003db0:	7afb      	ldrb	r3, [r7, #11]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fa7c 	bl	80042bc <ai_platform_network_post_init>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	7afb      	ldrb	r3, [r7, #11]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf14      	ite	ne
 8003dd0:	2301      	movne	r3, #1
 8003dd2:	2300      	moveq	r3, #0
 8003dd4:	72fb      	strb	r3, [r7, #11]

  return ok;
 8003dd6:	7afb      	ldrb	r3, [r7, #11]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 faf7 	bl	80043e4 <ai_platform_network_process>
 8003df6:	4603      	mov	r3, r0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <ai_sine_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_sine_model_data_weights_get(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_sine_model_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_sine_model_weights_map);
 8003e04:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <ai_sine_model_data_weights_get+0x10>)

}
 8003e06:	4618      	mov	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	08008968 	.word	0x08008968

08003e14 <_ai_platform_acquire_crc>:
 8003e14:	2001      	movs	r0, #1
 8003e16:	4770      	bx	lr

08003e18 <_ai_platform_release_crc>:
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop

08003e1c <ai_platform_get_weights_map>:
 8003e1c:	b132      	cbz	r2, 8003e2c <ai_platform_get_weights_map+0x10>
 8003e1e:	6912      	ldr	r2, [r2, #16]
 8003e20:	b122      	cbz	r2, 8003e2c <ai_platform_get_weights_map+0x10>
 8003e22:	b110      	cbz	r0, 8003e2a <ai_platform_get_weights_map+0xe>
 8003e24:	b921      	cbnz	r1, 8003e30 <ai_platform_get_weights_map+0x14>
 8003e26:	4608      	mov	r0, r1
 8003e28:	4770      	bx	lr
 8003e2a:	4770      	bx	lr
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4770      	bx	lr
 8003e30:	b470      	push	{r4, r5, r6}
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <ai_platform_get_weights_map+0x64>)
 8003e34:	6815      	ldr	r5, [r2, #0]
 8003e36:	429d      	cmp	r5, r3
 8003e38:	d007      	beq.n	8003e4a <ai_platform_get_weights_map+0x2e>
 8003e3a:	6002      	str	r2, [r0, #0]
 8003e3c:	f1a1 0001 	sub.w	r0, r1, #1
 8003e40:	fab0 f080 	clz	r0, r0
 8003e44:	0940      	lsrs	r0, r0, #5
 8003e46:	bc70      	pop	{r4, r5, r6}
 8003e48:	4770      	bx	lr
 8003e4a:	6854      	ldr	r4, [r2, #4]
 8003e4c:	42ac      	cmp	r4, r5
 8003e4e:	f102 0204 	add.w	r2, r2, #4
 8003e52:	d011      	beq.n	8003e78 <ai_platform_get_weights_map+0x5c>
 8003e54:	1f03      	subs	r3, r0, #4
 8003e56:	4616      	mov	r6, r2
 8003e58:	2000      	movs	r0, #0
 8003e5a:	e003      	b.n	8003e64 <ai_platform_get_weights_map+0x48>
 8003e5c:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8003e60:	42ac      	cmp	r4, r5
 8003e62:	d009      	beq.n	8003e78 <ai_platform_get_weights_map+0x5c>
 8003e64:	3001      	adds	r0, #1
 8003e66:	4281      	cmp	r1, r0
 8003e68:	f843 4f04 	str.w	r4, [r3, #4]!
 8003e6c:	d1f6      	bne.n	8003e5c <ai_platform_get_weights_map+0x40>
 8003e6e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003e72:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <ai_platform_get_weights_map+0x64>)
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <ai_platform_get_weights_map+0x60>
 8003e78:	2000      	movs	r0, #0
 8003e7a:	e7e4      	b.n	8003e46 <ai_platform_get_weights_map+0x2a>
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	e7e2      	b.n	8003e46 <ai_platform_get_weights_map+0x2a>
 8003e80:	a1facade 	.word	0xa1facade

08003e84 <ai_platform_get_activations_map>:
 8003e84:	b132      	cbz	r2, 8003e94 <ai_platform_get_activations_map+0x10>
 8003e86:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e88:	b122      	cbz	r2, 8003e94 <ai_platform_get_activations_map+0x10>
 8003e8a:	b110      	cbz	r0, 8003e92 <ai_platform_get_activations_map+0xe>
 8003e8c:	b921      	cbnz	r1, 8003e98 <ai_platform_get_activations_map+0x14>
 8003e8e:	4608      	mov	r0, r1
 8003e90:	4770      	bx	lr
 8003e92:	4770      	bx	lr
 8003e94:	4610      	mov	r0, r2
 8003e96:	4770      	bx	lr
 8003e98:	b470      	push	{r4, r5, r6}
 8003e9a:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <ai_platform_get_activations_map+0x64>)
 8003e9c:	6815      	ldr	r5, [r2, #0]
 8003e9e:	429d      	cmp	r5, r3
 8003ea0:	d007      	beq.n	8003eb2 <ai_platform_get_activations_map+0x2e>
 8003ea2:	6002      	str	r2, [r0, #0]
 8003ea4:	f1a1 0001 	sub.w	r0, r1, #1
 8003ea8:	fab0 f080 	clz	r0, r0
 8003eac:	0940      	lsrs	r0, r0, #5
 8003eae:	bc70      	pop	{r4, r5, r6}
 8003eb0:	4770      	bx	lr
 8003eb2:	6854      	ldr	r4, [r2, #4]
 8003eb4:	42ac      	cmp	r4, r5
 8003eb6:	f102 0204 	add.w	r2, r2, #4
 8003eba:	d011      	beq.n	8003ee0 <ai_platform_get_activations_map+0x5c>
 8003ebc:	1f03      	subs	r3, r0, #4
 8003ebe:	4616      	mov	r6, r2
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	e003      	b.n	8003ecc <ai_platform_get_activations_map+0x48>
 8003ec4:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8003ec8:	42ac      	cmp	r4, r5
 8003eca:	d009      	beq.n	8003ee0 <ai_platform_get_activations_map+0x5c>
 8003ecc:	3001      	adds	r0, #1
 8003ece:	4281      	cmp	r1, r0
 8003ed0:	f843 4f04 	str.w	r4, [r3, #4]!
 8003ed4:	d1f6      	bne.n	8003ec4 <ai_platform_get_activations_map+0x40>
 8003ed6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003eda:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <ai_platform_get_activations_map+0x64>)
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <ai_platform_get_activations_map+0x60>
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	e7e4      	b.n	8003eae <ai_platform_get_activations_map+0x2a>
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	e7e2      	b.n	8003eae <ai_platform_get_activations_map+0x2a>
 8003ee8:	a1facade 	.word	0xa1facade

08003eec <ai_platform_network_create>:
 8003eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	4607      	mov	r7, r0
 8003ef4:	4616      	mov	r6, r2
 8003ef6:	461d      	mov	r5, r3
 8003ef8:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8003efc:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8003f00:	f7ff ff88 	bl	8003e14 <_ai_platform_acquire_crc>
 8003f04:	b178      	cbz	r0, 8003f26 <ai_platform_network_create+0x3a>
 8003f06:	4b5a      	ldr	r3, [pc, #360]	; (8004070 <ai_platform_network_create+0x184>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f12:	4602      	mov	r2, r0
 8003f14:	d00c      	beq.n	8003f30 <ai_platform_network_create+0x44>
 8003f16:	4b57      	ldr	r3, [pc, #348]	; (8004074 <ai_platform_network_create+0x188>)
 8003f18:	2118      	movs	r1, #24
 8003f1a:	6019      	str	r1, [r3, #0]
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	2918      	cmp	r1, #24
 8003f20:	d034      	beq.n	8003f8c <ai_platform_network_create+0xa0>
 8003f22:	f7ff ff79 	bl	8003e18 <_ai_platform_release_crc>
 8003f26:	f241 0033 	movw	r0, #4147	; 0x1033
 8003f2a:	b002      	add	sp, #8
 8003f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f30:	4b51      	ldr	r3, [pc, #324]	; (8004078 <ai_platform_network_create+0x18c>)
 8003f32:	2101      	movs	r1, #1
 8003f34:	6019      	str	r1, [r3, #0]
 8003f36:	2114      	movs	r1, #20
 8003f38:	e001      	b.n	8003f3e <ai_platform_network_create+0x52>
 8003f3a:	3901      	subs	r1, #1
 8003f3c:	d002      	beq.n	8003f44 <ai_platform_network_create+0x58>
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d1fa      	bne.n	8003f3a <ai_platform_network_create+0x4e>
 8003f44:	4b4c      	ldr	r3, [pc, #304]	; (8004078 <ai_platform_network_create+0x18c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	b9f3      	cbnz	r3, 8003f88 <ai_platform_network_create+0x9c>
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f7ff ff64 	bl	8003e18 <_ai_platform_release_crc>
 8003f50:	4a4a      	ldr	r2, [pc, #296]	; (800407c <ai_platform_network_create+0x190>)
 8003f52:	6813      	ldr	r3, [r2, #0]
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	f7ff ff5b 	bl	8003e14 <_ai_platform_acquire_crc>
 8003f5e:	4b44      	ldr	r3, [pc, #272]	; (8004070 <ai_platform_network_create+0x184>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6a:	d015      	beq.n	8003f98 <ai_platform_network_create+0xac>
 8003f6c:	4b41      	ldr	r3, [pc, #260]	; (8004074 <ai_platform_network_create+0x188>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	2a00      	cmp	r2, #0
 8003f76:	d1fc      	bne.n	8003f72 <ai_platform_network_create+0x86>
 8003f78:	4b41      	ldr	r3, [pc, #260]	; (8004080 <ai_platform_network_create+0x194>)
 8003f7a:	4a42      	ldr	r2, [pc, #264]	; (8004084 <ai_platform_network_create+0x198>)
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b41      	ldr	r3, [pc, #260]	; (8004088 <ai_platform_network_create+0x19c>)
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d016      	beq.n	8003fb4 <ai_platform_network_create+0xc8>
 8003f86:	e7fe      	b.n	8003f86 <ai_platform_network_create+0x9a>
 8003f88:	4610      	mov	r0, r2
 8003f8a:	e7ca      	b.n	8003f22 <ai_platform_network_create+0x36>
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	6019      	str	r1, [r3, #0]
 8003f90:	6819      	ldr	r1, [r3, #0]
 8003f92:	2900      	cmp	r1, #0
 8003f94:	d1fc      	bne.n	8003f90 <ai_platform_network_create+0xa4>
 8003f96:	e7d8      	b.n	8003f4a <ai_platform_network_create+0x5e>
 8003f98:	4b37      	ldr	r3, [pc, #220]	; (8004078 <ai_platform_network_create+0x18c>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	2a00      	cmp	r2, #0
 8003fa2:	d1fc      	bne.n	8003f9e <ai_platform_network_create+0xb2>
 8003fa4:	4b39      	ldr	r3, [pc, #228]	; (800408c <ai_platform_network_create+0x1a0>)
 8003fa6:	4a37      	ldr	r2, [pc, #220]	; (8004084 <ai_platform_network_create+0x198>)
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4b36      	ldr	r3, [pc, #216]	; (8004088 <ai_platform_network_create+0x19c>)
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d000      	beq.n	8003fb4 <ai_platform_network_create+0xc8>
 8003fb2:	e7fe      	b.n	8003fb2 <ai_platform_network_create+0xc6>
 8003fb4:	f7ff ff30 	bl	8003e18 <_ai_platform_release_crc>
 8003fb8:	b1af      	cbz	r7, 8003fe6 <ai_platform_network_create+0xfa>
 8003fba:	4b35      	ldr	r3, [pc, #212]	; (8004090 <ai_platform_network_create+0x1a4>)
 8003fbc:	6033      	str	r3, [r6, #0]
 8003fbe:	603e      	str	r6, [r7, #0]
 8003fc0:	f000 fc8e 	bl	80048e0 <core_init>
 8003fc4:	b990      	cbnz	r0, 8003fec <ai_platform_network_create+0x100>
 8003fc6:	062d      	lsls	r5, r5, #24
 8003fc8:	0424      	lsls	r4, r4, #16
 8003fca:	2230      	movs	r2, #48	; 0x30
 8003fcc:	2300      	movs	r3, #0
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	2110      	movs	r1, #16
 8003fd2:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	432b      	orrs	r3, r5
 8003fda:	f362 0007 	bfi	r0, r2, #0, #8
 8003fde:	6473      	str	r3, [r6, #68]	; 0x44
 8003fe0:	f361 201f 	bfi	r0, r1, #8, #24
 8003fe4:	e7a1      	b.n	8003f2a <ai_platform_network_create+0x3e>
 8003fe6:	f241 0010 	movw	r0, #4112	; 0x1010
 8003fea:	e79e      	b.n	8003f2a <ai_platform_network_create+0x3e>
 8003fec:	4a23      	ldr	r2, [pc, #140]	; (800407c <ai_platform_network_create+0x190>)
 8003fee:	6813      	ldr	r3, [r2, #0]
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	f7ff ff0d 	bl	8003e14 <_ai_platform_acquire_crc>
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <ai_platform_network_create+0x184>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004006:	d00d      	beq.n	8004024 <ai_platform_network_create+0x138>
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <ai_platform_network_create+0x188>)
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	2a00      	cmp	r2, #0
 8004012:	d1fc      	bne.n	800400e <ai_platform_network_create+0x122>
 8004014:	4b1a      	ldr	r3, [pc, #104]	; (8004080 <ai_platform_network_create+0x194>)
 8004016:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <ai_platform_network_create+0x198>)
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <ai_platform_network_create+0x19c>)
 800401e:	429a      	cmp	r2, r3
 8004020:	d00e      	beq.n	8004040 <ai_platform_network_create+0x154>
 8004022:	e7fe      	b.n	8004022 <ai_platform_network_create+0x136>
 8004024:	4b14      	ldr	r3, [pc, #80]	; (8004078 <ai_platform_network_create+0x18c>)
 8004026:	2201      	movs	r2, #1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	2a00      	cmp	r2, #0
 800402e:	d1fc      	bne.n	800402a <ai_platform_network_create+0x13e>
 8004030:	4b16      	ldr	r3, [pc, #88]	; (800408c <ai_platform_network_create+0x1a0>)
 8004032:	4a14      	ldr	r2, [pc, #80]	; (8004084 <ai_platform_network_create+0x198>)
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b13      	ldr	r3, [pc, #76]	; (8004088 <ai_platform_network_create+0x19c>)
 800403a:	429a      	cmp	r2, r3
 800403c:	d000      	beq.n	8004040 <ai_platform_network_create+0x154>
 800403e:	e7fe      	b.n	800403e <ai_platform_network_create+0x152>
 8004040:	062d      	lsls	r5, r5, #24
 8004042:	0424      	lsls	r4, r4, #16
 8004044:	f7ff fee8 	bl	8003e18 <_ai_platform_release_crc>
 8004048:	ea45 0304 	orr.w	r3, r5, r4
 800404c:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8004050:	d001      	beq.n	8004056 <ai_platform_network_create+0x16a>
 8004052:	2201      	movs	r2, #1
 8004054:	e7ba      	b.n	8003fcc <ai_platform_network_create+0xe0>
 8004056:	a802      	add	r0, sp, #8
 8004058:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <ai_platform_network_create+0x1a8>)
 800405a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800405e:	f001 f921 	bl	80052a4 <ai_check_custom_types>
 8004062:	b110      	cbz	r0, 800406a <ai_platform_network_create+0x17e>
 8004064:	2100      	movs	r1, #0
 8004066:	460a      	mov	r2, r1
 8004068:	e7b3      	b.n	8003fd2 <ai_platform_network_create+0xe6>
 800406a:	2202      	movs	r2, #2
 800406c:	e7ae      	b.n	8003fcc <ai_platform_network_create+0xe0>
 800406e:	bf00      	nop
 8004070:	e0042000 	.word	0xe0042000
 8004074:	58024c08 	.word	0x58024c08
 8004078:	40023008 	.word	0x40023008
 800407c:	e0002000 	.word	0xe0002000
 8004080:	58024c00 	.word	0x58024c00
 8004084:	f407a5c2 	.word	0xf407a5c2
 8004088:	b5e8b5cd 	.word	0xb5e8b5cd
 800408c:	40023000 	.word	0x40023000
 8004090:	a1c00100 	.word	0xa1c00100
 8004094:	84048403 	.word	0x84048403

08004098 <ai_platform_network_init>:
 8004098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800409c:	2800      	cmp	r0, #0
 800409e:	d04d      	beq.n	800413c <ai_platform_network_init+0xa4>
 80040a0:	4b7c      	ldr	r3, [pc, #496]	; (8004294 <ai_platform_network_init+0x1fc>)
 80040a2:	6802      	ldr	r2, [r0, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	4604      	mov	r4, r0
 80040a8:	d148      	bne.n	800413c <ai_platform_network_init+0xa4>
 80040aa:	4a7b      	ldr	r2, [pc, #492]	; (8004298 <ai_platform_network_init+0x200>)
 80040ac:	6813      	ldr	r3, [r2, #0]
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	460d      	mov	r5, r1
 80040b6:	f7ff fead 	bl	8003e14 <_ai_platform_acquire_crc>
 80040ba:	4b78      	ldr	r3, [pc, #480]	; (800429c <ai_platform_network_init+0x204>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c6:	d00d      	beq.n	80040e4 <ai_platform_network_init+0x4c>
 80040c8:	4b75      	ldr	r3, [pc, #468]	; (80042a0 <ai_platform_network_init+0x208>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	d1fc      	bne.n	80040ce <ai_platform_network_init+0x36>
 80040d4:	4b73      	ldr	r3, [pc, #460]	; (80042a4 <ai_platform_network_init+0x20c>)
 80040d6:	4a74      	ldr	r2, [pc, #464]	; (80042a8 <ai_platform_network_init+0x210>)
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b73      	ldr	r3, [pc, #460]	; (80042ac <ai_platform_network_init+0x214>)
 80040de:	429a      	cmp	r2, r3
 80040e0:	d00d      	beq.n	80040fe <ai_platform_network_init+0x66>
 80040e2:	e7fe      	b.n	80040e2 <ai_platform_network_init+0x4a>
 80040e4:	4b72      	ldr	r3, [pc, #456]	; (80042b0 <ai_platform_network_init+0x218>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2a00      	cmp	r2, #0
 80040ee:	d1fc      	bne.n	80040ea <ai_platform_network_init+0x52>
 80040f0:	4b70      	ldr	r3, [pc, #448]	; (80042b4 <ai_platform_network_init+0x21c>)
 80040f2:	4a6d      	ldr	r2, [pc, #436]	; (80042a8 <ai_platform_network_init+0x210>)
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b6c      	ldr	r3, [pc, #432]	; (80042ac <ai_platform_network_init+0x214>)
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d11d      	bne.n	800413a <ai_platform_network_init+0xa2>
 80040fe:	f7ff fe8b 	bl	8003e18 <_ai_platform_release_crc>
 8004102:	2d00      	cmp	r5, #0
 8004104:	d076      	beq.n	80041f4 <ai_platform_network_init+0x15c>
 8004106:	4b6c      	ldr	r3, [pc, #432]	; (80042b8 <ai_platform_network_init+0x220>)
 8004108:	682a      	ldr	r2, [r5, #0]
 800410a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800410e:	429a      	cmp	r2, r3
 8004110:	d030      	beq.n	8004174 <ai_platform_network_init+0xdc>
 8004112:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8004114:	46a9      	mov	r9, r5
 8004116:	f105 0118 	add.w	r1, r5, #24
 800411a:	2e00      	cmp	r6, #0
 800411c:	f000 8095 	beq.w	800424a <ai_platform_network_init+0x1b2>
 8004120:	f1bc 0f00 	cmp.w	ip, #0
 8004124:	f000 80a4 	beq.w	8004270 <ai_platform_network_init+0x1d8>
 8004128:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 800412c:	f1b8 0f01 	cmp.w	r8, #1
 8004130:	d16a      	bne.n	8004208 <ai_platform_network_init+0x170>
 8004132:	2700      	movs	r7, #0
 8004134:	468c      	mov	ip, r1
 8004136:	83a7      	strh	r7, [r4, #28]
 8004138:	e028      	b.n	800418c <ai_platform_network_init+0xf4>
 800413a:	e7fe      	b.n	800413a <ai_platform_network_init+0xa2>
 800413c:	4a56      	ldr	r2, [pc, #344]	; (8004298 <ai_platform_network_init+0x200>)
 800413e:	6813      	ldr	r3, [r2, #0]
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	f7ff fe65 	bl	8003e14 <_ai_platform_acquire_crc>
 800414a:	4b54      	ldr	r3, [pc, #336]	; (800429c <ai_platform_network_init+0x204>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004156:	d067      	beq.n	8004228 <ai_platform_network_init+0x190>
 8004158:	4b51      	ldr	r3, [pc, #324]	; (80042a0 <ai_platform_network_init+0x208>)
 800415a:	2201      	movs	r2, #1
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	2a00      	cmp	r2, #0
 8004162:	d1fc      	bne.n	800415e <ai_platform_network_init+0xc6>
 8004164:	4b4f      	ldr	r3, [pc, #316]	; (80042a4 <ai_platform_network_init+0x20c>)
 8004166:	4a50      	ldr	r2, [pc, #320]	; (80042a8 <ai_platform_network_init+0x210>)
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b4f      	ldr	r3, [pc, #316]	; (80042ac <ai_platform_network_init+0x214>)
 800416e:	429a      	cmp	r2, r3
 8004170:	d067      	beq.n	8004242 <ai_platform_network_init+0x1aa>
 8004172:	e7fe      	b.n	8004172 <ai_platform_network_init+0xda>
 8004174:	8be1      	ldrh	r1, [r4, #30]
 8004176:	88eb      	ldrh	r3, [r5, #6]
 8004178:	89af      	ldrh	r7, [r5, #12]
 800417a:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 800417e:	88aa      	ldrh	r2, [r5, #4]
 8004180:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8004184:	428b      	cmp	r3, r1
 8004186:	d13f      	bne.n	8004208 <ai_platform_network_init+0x170>
 8004188:	83a2      	strh	r2, [r4, #28]
 800418a:	b19b      	cbz	r3, 80041b4 <ai_platform_network_init+0x11c>
 800418c:	f04f 0e00 	mov.w	lr, #0
 8004190:	46f2      	mov	sl, lr
 8004192:	eb09 060e 	add.w	r6, r9, lr
 8004196:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004198:	6a25      	ldr	r5, [r4, #32]
 800419a:	4475      	add	r5, lr
 800419c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800419e:	e896 0003 	ldmia.w	r6, {r0, r1}
 80041a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80041a6:	8be3      	ldrh	r3, [r4, #30]
 80041a8:	f10a 0a01 	add.w	sl, sl, #1
 80041ac:	459a      	cmp	sl, r3
 80041ae:	f10e 0e18 	add.w	lr, lr, #24
 80041b2:	d3ee      	bcc.n	8004192 <ai_platform_network_init+0xfa>
 80041b4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80041b6:	4598      	cmp	r8, r3
 80041b8:	d12e      	bne.n	8004218 <ai_platform_network_init+0x180>
 80041ba:	84a7      	strh	r7, [r4, #36]	; 0x24
 80041bc:	f1b8 0f00 	cmp.w	r8, #0
 80041c0:	d012      	beq.n	80041e8 <ai_platform_network_init+0x150>
 80041c2:	2700      	movs	r7, #0
 80041c4:	46be      	mov	lr, r7
 80041c6:	eb0c 0607 	add.w	r6, ip, r7
 80041ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80041cc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80041ce:	443d      	add	r5, r7
 80041d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041d2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80041d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80041da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80041dc:	f10e 0e01 	add.w	lr, lr, #1
 80041e0:	459e      	cmp	lr, r3
 80041e2:	f107 0718 	add.w	r7, r7, #24
 80041e6:	d3ee      	bcc.n	80041c6 <ai_platform_network_init+0x12e>
 80041e8:	2303      	movs	r3, #3
 80041ea:	60e3      	str	r3, [r4, #12]
 80041ec:	4620      	mov	r0, r4
 80041ee:	f001 f883 	bl	80052f8 <ai_layers_init_all>
 80041f2:	e006      	b.n	8004202 <ai_platform_network_init+0x16a>
 80041f4:	f104 0010 	add.w	r0, r4, #16
 80041f8:	2211      	movs	r2, #17
 80041fa:	2110      	movs	r1, #16
 80041fc:	462c      	mov	r4, r5
 80041fe:	f000 fb71 	bl	80048e4 <core_set_error>
 8004202:	4620      	mov	r0, r4
 8004204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004208:	f104 0010 	add.w	r0, r4, #16
 800420c:	2212      	movs	r2, #18
 800420e:	2116      	movs	r1, #22
 8004210:	f000 fb68 	bl	80048e4 <core_set_error>
 8004214:	2400      	movs	r4, #0
 8004216:	e7f4      	b.n	8004202 <ai_platform_network_init+0x16a>
 8004218:	f104 0010 	add.w	r0, r4, #16
 800421c:	2213      	movs	r2, #19
 800421e:	2116      	movs	r1, #22
 8004220:	f000 fb60 	bl	80048e4 <core_set_error>
 8004224:	2400      	movs	r4, #0
 8004226:	e7ec      	b.n	8004202 <ai_platform_network_init+0x16a>
 8004228:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <ai_platform_network_init+0x218>)
 800422a:	2201      	movs	r2, #1
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2a00      	cmp	r2, #0
 8004232:	d1fc      	bne.n	800422e <ai_platform_network_init+0x196>
 8004234:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <ai_platform_network_init+0x21c>)
 8004236:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <ai_platform_network_init+0x210>)
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <ai_platform_network_init+0x214>)
 800423e:	429a      	cmp	r2, r3
 8004240:	d115      	bne.n	800426e <ai_platform_network_init+0x1d6>
 8004242:	f7ff fde9 	bl	8003e18 <_ai_platform_release_crc>
 8004246:	2400      	movs	r4, #0
 8004248:	e7db      	b.n	8004202 <ai_platform_network_init+0x16a>
 800424a:	8c28      	ldrh	r0, [r5, #32]
 800424c:	8bea      	ldrh	r2, [r5, #30]
 800424e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004250:	fb02 f200 	mul.w	r2, r2, r0
 8004254:	fb03 f302 	mul.w	r3, r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	f43f af61 	beq.w	8004120 <ai_platform_network_init+0x88>
 800425e:	f104 0010 	add.w	r0, r4, #16
 8004262:	2213      	movs	r2, #19
 8004264:	2110      	movs	r1, #16
 8004266:	4634      	mov	r4, r6
 8004268:	f000 fb3c 	bl	80048e4 <core_set_error>
 800426c:	e7c9      	b.n	8004202 <ai_platform_network_init+0x16a>
 800426e:	e7fe      	b.n	800426e <ai_platform_network_init+0x1d6>
 8004270:	8928      	ldrh	r0, [r5, #8]
 8004272:	88ea      	ldrh	r2, [r5, #6]
 8004274:	68eb      	ldr	r3, [r5, #12]
 8004276:	fb02 f200 	mul.w	r2, r2, r0
 800427a:	fb03 f302 	mul.w	r3, r3, r2
 800427e:	2b00      	cmp	r3, #0
 8004280:	f43f af52 	beq.w	8004128 <ai_platform_network_init+0x90>
 8004284:	f104 0010 	add.w	r0, r4, #16
 8004288:	2212      	movs	r2, #18
 800428a:	2110      	movs	r1, #16
 800428c:	4664      	mov	r4, ip
 800428e:	f000 fb29 	bl	80048e4 <core_set_error>
 8004292:	e7b6      	b.n	8004202 <ai_platform_network_init+0x16a>
 8004294:	a1c00100 	.word	0xa1c00100
 8004298:	e0002000 	.word	0xe0002000
 800429c:	e0042000 	.word	0xe0042000
 80042a0:	58024c08 	.word	0x58024c08
 80042a4:	58024c00 	.word	0x58024c00
 80042a8:	f407a5c2 	.word	0xf407a5c2
 80042ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80042b0:	40023008 	.word	0x40023008
 80042b4:	40023000 	.word	0x40023000
 80042b8:	a1facade 	.word	0xa1facade

080042bc <ai_platform_network_post_init>:
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	b120      	cbz	r0, 80042ca <ai_platform_network_post_init+0xe>
 80042c0:	4b3f      	ldr	r3, [pc, #252]	; (80043c0 <ai_platform_network_post_init+0x104>)
 80042c2:	6802      	ldr	r2, [r0, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	4604      	mov	r4, r0
 80042c8:	d02d      	beq.n	8004326 <ai_platform_network_post_init+0x6a>
 80042ca:	4a3e      	ldr	r2, [pc, #248]	; (80043c4 <ai_platform_network_post_init+0x108>)
 80042cc:	6813      	ldr	r3, [r2, #0]
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	f7ff fd9e 	bl	8003e14 <_ai_platform_acquire_crc>
 80042d8:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <ai_platform_network_post_init+0x10c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e4:	d00d      	beq.n	8004302 <ai_platform_network_post_init+0x46>
 80042e6:	4b39      	ldr	r3, [pc, #228]	; (80043cc <ai_platform_network_post_init+0x110>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	2a00      	cmp	r2, #0
 80042f0:	d1fc      	bne.n	80042ec <ai_platform_network_post_init+0x30>
 80042f2:	4b37      	ldr	r3, [pc, #220]	; (80043d0 <ai_platform_network_post_init+0x114>)
 80042f4:	4a37      	ldr	r2, [pc, #220]	; (80043d4 <ai_platform_network_post_init+0x118>)
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <ai_platform_network_post_init+0x11c>)
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d00d      	beq.n	800431c <ai_platform_network_post_init+0x60>
 8004300:	e7fe      	b.n	8004300 <ai_platform_network_post_init+0x44>
 8004302:	4b36      	ldr	r3, [pc, #216]	; (80043dc <ai_platform_network_post_init+0x120>)
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	2a00      	cmp	r2, #0
 800430c:	d1fc      	bne.n	8004308 <ai_platform_network_post_init+0x4c>
 800430e:	4b34      	ldr	r3, [pc, #208]	; (80043e0 <ai_platform_network_post_init+0x124>)
 8004310:	4a30      	ldr	r2, [pc, #192]	; (80043d4 <ai_platform_network_post_init+0x118>)
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	4b30      	ldr	r3, [pc, #192]	; (80043d8 <ai_platform_network_post_init+0x11c>)
 8004318:	429a      	cmp	r2, r3
 800431a:	d103      	bne.n	8004324 <ai_platform_network_post_init+0x68>
 800431c:	f7ff fd7c 	bl	8003e18 <_ai_platform_release_crc>
 8004320:	2000      	movs	r0, #0
 8004322:	bd38      	pop	{r3, r4, r5, pc}
 8004324:	e7fe      	b.n	8004324 <ai_platform_network_post_init+0x68>
 8004326:	4a27      	ldr	r2, [pc, #156]	; (80043c4 <ai_platform_network_post_init+0x108>)
 8004328:	6813      	ldr	r3, [r2, #0]
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	f7ff fd70 	bl	8003e14 <_ai_platform_acquire_crc>
 8004334:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <ai_platform_network_post_init+0x10c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004340:	d00d      	beq.n	800435e <ai_platform_network_post_init+0xa2>
 8004342:	4b22      	ldr	r3, [pc, #136]	; (80043cc <ai_platform_network_post_init+0x110>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	2a00      	cmp	r2, #0
 800434c:	d1fc      	bne.n	8004348 <ai_platform_network_post_init+0x8c>
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <ai_platform_network_post_init+0x114>)
 8004350:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <ai_platform_network_post_init+0x118>)
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <ai_platform_network_post_init+0x11c>)
 8004358:	429a      	cmp	r2, r3
 800435a:	d00e      	beq.n	800437a <ai_platform_network_post_init+0xbe>
 800435c:	e7fe      	b.n	800435c <ai_platform_network_post_init+0xa0>
 800435e:	4b1f      	ldr	r3, [pc, #124]	; (80043dc <ai_platform_network_post_init+0x120>)
 8004360:	2201      	movs	r2, #1
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	2a00      	cmp	r2, #0
 8004368:	d1fc      	bne.n	8004364 <ai_platform_network_post_init+0xa8>
 800436a:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <ai_platform_network_post_init+0x124>)
 800436c:	4a19      	ldr	r2, [pc, #100]	; (80043d4 <ai_platform_network_post_init+0x118>)
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <ai_platform_network_post_init+0x11c>)
 8004374:	429a      	cmp	r2, r3
 8004376:	d000      	beq.n	800437a <ai_platform_network_post_init+0xbe>
 8004378:	e7fe      	b.n	8004378 <ai_platform_network_post_init+0xbc>
 800437a:	f7ff fd4d 	bl	8003e18 <_ai_platform_release_crc>
 800437e:	68e3      	ldr	r3, [r4, #12]
 8004380:	f013 0502 	ands.w	r5, r3, #2
 8004384:	d011      	beq.n	80043aa <ai_platform_network_post_init+0xee>
 8004386:	4620      	mov	r0, r4
 8004388:	f000 ffca 	bl	8005320 <ai_layers_post_init_all>
 800438c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800438e:	b1a3      	cbz	r3, 80043ba <ai_platform_network_post_init+0xfe>
 8004390:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004392:	b195      	cbz	r5, 80043ba <ai_platform_network_post_init+0xfe>
 8004394:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004396:	4629      	mov	r1, r5
 8004398:	2000      	movs	r0, #0
 800439a:	4798      	blx	r3
 800439c:	692b      	ldr	r3, [r5, #16]
 800439e:	42ab      	cmp	r3, r5
 80043a0:	d00b      	beq.n	80043ba <ai_platform_network_post_init+0xfe>
 80043a2:	461d      	mov	r5, r3
 80043a4:	b14b      	cbz	r3, 80043ba <ai_platform_network_post_init+0xfe>
 80043a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043a8:	e7f4      	b.n	8004394 <ai_platform_network_post_init+0xd8>
 80043aa:	f104 0010 	add.w	r0, r4, #16
 80043ae:	2210      	movs	r2, #16
 80043b0:	2111      	movs	r1, #17
 80043b2:	f000 fa97 	bl	80048e4 <core_set_error>
 80043b6:	4628      	mov	r0, r5
 80043b8:	bd38      	pop	{r3, r4, r5, pc}
 80043ba:	2001      	movs	r0, #1
 80043bc:	bd38      	pop	{r3, r4, r5, pc}
 80043be:	bf00      	nop
 80043c0:	a1c00100 	.word	0xa1c00100
 80043c4:	e0002000 	.word	0xe0002000
 80043c8:	e0042000 	.word	0xe0042000
 80043cc:	58024c08 	.word	0x58024c08
 80043d0:	58024c00 	.word	0x58024c00
 80043d4:	f407a5c2 	.word	0xf407a5c2
 80043d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80043dc:	40023008 	.word	0x40023008
 80043e0:	40023000 	.word	0x40023000

080043e4 <ai_platform_network_process>:
 80043e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e8:	b085      	sub	sp, #20
 80043ea:	460d      	mov	r5, r1
 80043ec:	9202      	str	r2, [sp, #8]
 80043ee:	4604      	mov	r4, r0
 80043f0:	b120      	cbz	r0, 80043fc <ai_platform_network_process+0x18>
 80043f2:	4b7b      	ldr	r3, [pc, #492]	; (80045e0 <ai_platform_network_process+0x1fc>)
 80043f4:	6802      	ldr	r2, [r0, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	bf18      	it	ne
 80043fa:	2400      	movne	r4, #0
 80043fc:	4a79      	ldr	r2, [pc, #484]	; (80045e4 <ai_platform_network_process+0x200>)
 80043fe:	6813      	ldr	r3, [r2, #0]
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	f7ff fd05 	bl	8003e14 <_ai_platform_acquire_crc>
 800440a:	4b77      	ldr	r3, [pc, #476]	; (80045e8 <ai_platform_network_process+0x204>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004416:	d00d      	beq.n	8004434 <ai_platform_network_process+0x50>
 8004418:	4b74      	ldr	r3, [pc, #464]	; (80045ec <ai_platform_network_process+0x208>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	2a00      	cmp	r2, #0
 8004422:	d1fc      	bne.n	800441e <ai_platform_network_process+0x3a>
 8004424:	4b72      	ldr	r3, [pc, #456]	; (80045f0 <ai_platform_network_process+0x20c>)
 8004426:	4a73      	ldr	r2, [pc, #460]	; (80045f4 <ai_platform_network_process+0x210>)
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b72      	ldr	r3, [pc, #456]	; (80045f8 <ai_platform_network_process+0x214>)
 800442e:	429a      	cmp	r2, r3
 8004430:	d00e      	beq.n	8004450 <ai_platform_network_process+0x6c>
 8004432:	e7fe      	b.n	8004432 <ai_platform_network_process+0x4e>
 8004434:	4b71      	ldr	r3, [pc, #452]	; (80045fc <ai_platform_network_process+0x218>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	2a00      	cmp	r2, #0
 800443e:	d1fc      	bne.n	800443a <ai_platform_network_process+0x56>
 8004440:	4b6f      	ldr	r3, [pc, #444]	; (8004600 <ai_platform_network_process+0x21c>)
 8004442:	4a6c      	ldr	r2, [pc, #432]	; (80045f4 <ai_platform_network_process+0x210>)
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4b6b      	ldr	r3, [pc, #428]	; (80045f8 <ai_platform_network_process+0x214>)
 800444a:	429a      	cmp	r2, r3
 800444c:	d000      	beq.n	8004450 <ai_platform_network_process+0x6c>
 800444e:	e7fe      	b.n	800444e <ai_platform_network_process+0x6a>
 8004450:	f7ff fce2 	bl	8003e18 <_ai_platform_release_crc>
 8004454:	2c00      	cmp	r4, #0
 8004456:	f000 808e 	beq.w	8004576 <ai_platform_network_process+0x192>
 800445a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800445c:	2f00      	cmp	r7, #0
 800445e:	f040 823c 	bne.w	80048da <ai_platform_network_process+0x4f6>
 8004462:	68e3      	ldr	r3, [r4, #12]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	f04f 0b00 	mov.w	fp, #0
 800446c:	2b03      	cmp	r3, #3
 800446e:	f8c4 b014 	str.w	fp, [r4, #20]
 8004472:	f040 822b 	bne.w	80048cc <ai_platform_network_process+0x4e8>
 8004476:	2d00      	cmp	r5, #0
 8004478:	f000 80a8 	beq.w	80045cc <ai_platform_network_process+0x1e8>
 800447c:	2f00      	cmp	r7, #0
 800447e:	f000 80a5 	beq.w	80045cc <ai_platform_network_process+0x1e8>
 8004482:	883b      	ldrh	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a1 	beq.w	80045cc <ai_platform_network_process+0x1e8>
 800448a:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 800448e:	9401      	str	r4, [sp, #4]
 8004490:	46d8      	mov	r8, fp
 8004492:	4598      	cmp	r8, r3
 8004494:	f080 80b6 	bcs.w	8004604 <ai_platform_network_process+0x220>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 80b2 	beq.w	8004604 <ai_platform_network_process+0x220>
 80044a0:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 80044a4:	2e00      	cmp	r6, #0
 80044a6:	f000 80ad 	beq.w	8004604 <ai_platform_network_process+0x220>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	9303      	str	r3, [sp, #12]
 80044b0:	ea4f 1408 	mov.w	r4, r8, lsl #4
 80044b4:	eb13 0a04 	adds.w	sl, r3, r4
 80044b8:	f000 8087 	beq.w	80045ca <ai_platform_network_process+0x1e6>
 80044bc:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 80044c0:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 80044c4:	69b0      	ldr	r0, [r6, #24]
 80044c6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80044ca:	6841      	ldr	r1, [r0, #4]
 80044cc:	fb0b f30e 	mul.w	r3, fp, lr
 80044d0:	fb0c f303 	mul.w	r3, ip, r3
 80044d4:	4299      	cmp	r1, r3
 80044d6:	d36e      	bcc.n	80045b6 <ai_platform_network_process+0x1d2>
 80044d8:	68f3      	ldr	r3, [r6, #12]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	455a      	cmp	r2, fp
 80044de:	d16a      	bne.n	80045b6 <ai_platform_network_process+0x1d2>
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	4572      	cmp	r2, lr
 80044e4:	d167      	bne.n	80045b6 <ai_platform_network_process+0x1d2>
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	459c      	cmp	ip, r3
 80044ea:	d164      	bne.n	80045b6 <ai_platform_network_process+0x1d2>
 80044ec:	6800      	ldr	r0, [r0, #0]
 80044ee:	f000 ffd5 	bl	800549c <ai_array_get_byte_size>
 80044f2:	68f2      	ldr	r2, [r6, #12]
 80044f4:	6973      	ldr	r3, [r6, #20]
 80044f6:	68d2      	ldr	r2, [r2, #12]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	fb03 f302 	mul.w	r3, r3, r2
 80044fe:	4298      	cmp	r0, r3
 8004500:	d359      	bcc.n	80045b6 <ai_platform_network_process+0x1d2>
 8004502:	69b3      	ldr	r3, [r6, #24]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	f000 ff71 	bl	80053ec <ai_array_to_buffer_fmt>
 800450a:	682b      	ldr	r3, [r5, #0]
 800450c:	4043      	eors	r3, r0
 800450e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004512:	d146      	bne.n	80045a2 <ai_platform_network_process+0x1be>
 8004514:	692b      	ldr	r3, [r5, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d03a      	beq.n	8004590 <ai_platform_network_process+0x1ac>
 800451a:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800451e:	f1bb 0f00 	cmp.w	fp, #0
 8004522:	d02d      	beq.n	8004580 <ai_platform_network_process+0x19c>
 8004524:	68f2      	ldr	r2, [r6, #12]
 8004526:	6973      	ldr	r3, [r6, #20]
 8004528:	68d1      	ldr	r1, [r2, #12]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	fb02 f201 	mul.w	r2, r2, r1
 8004530:	f8ca 2008 	str.w	r2, [sl, #8]
 8004534:	88ab      	ldrh	r3, [r5, #4]
 8004536:	fb02 f203 	mul.w	r2, r2, r3
 800453a:	f8ca 200c 	str.w	r2, [sl, #12]
 800453e:	6929      	ldr	r1, [r5, #16]
 8004540:	f8ca 1004 	str.w	r1, [sl, #4]
 8004544:	692b      	ldr	r3, [r5, #16]
 8004546:	4413      	add	r3, r2
 8004548:	9a03      	ldr	r2, [sp, #12]
 800454a:	5113      	str	r3, [r2, r4]
 800454c:	69b0      	ldr	r0, [r6, #24]
 800454e:	6803      	ldr	r3, [r0, #0]
 8004550:	45d9      	cmp	r9, fp
 8004552:	bf38      	it	cc
 8004554:	46d9      	movcc	r9, fp
 8004556:	009a      	lsls	r2, r3, #2
 8004558:	d408      	bmi.n	800456c <ai_platform_network_process+0x188>
 800455a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	4419      	add	r1, r3
 8004562:	6081      	str	r1, [r0, #8]
 8004564:	69b3      	ldr	r3, [r6, #24]
 8004566:	f8da 2004 	ldr.w	r2, [sl, #4]
 800456a:	60da      	str	r2, [r3, #12]
 800456c:	883b      	ldrh	r3, [r7, #0]
 800456e:	f108 0801 	add.w	r8, r8, #1
 8004572:	3518      	adds	r5, #24
 8004574:	e78d      	b.n	8004492 <ai_platform_network_process+0xae>
 8004576:	46a3      	mov	fp, r4
 8004578:	4658      	mov	r0, fp
 800457a:	b005      	add	sp, #20
 800457c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004580:	9c01      	ldr	r4, [sp, #4]
 8004582:	2221      	movs	r2, #33	; 0x21
 8004584:	f104 0010 	add.w	r0, r4, #16
 8004588:	2112      	movs	r1, #18
 800458a:	f000 f9ab 	bl	80048e4 <core_set_error>
 800458e:	e7f3      	b.n	8004578 <ai_platform_network_process+0x194>
 8004590:	9c01      	ldr	r4, [sp, #4]
 8004592:	2217      	movs	r2, #23
 8004594:	f104 0010 	add.w	r0, r4, #16
 8004598:	2112      	movs	r1, #18
 800459a:	469b      	mov	fp, r3
 800459c:	f000 f9a2 	bl	80048e4 <core_set_error>
 80045a0:	e7ea      	b.n	8004578 <ai_platform_network_process+0x194>
 80045a2:	9c01      	ldr	r4, [sp, #4]
 80045a4:	2219      	movs	r2, #25
 80045a6:	f104 0010 	add.w	r0, r4, #16
 80045aa:	2112      	movs	r1, #18
 80045ac:	f000 f99a 	bl	80048e4 <core_set_error>
 80045b0:	f04f 0b00 	mov.w	fp, #0
 80045b4:	e7e0      	b.n	8004578 <ai_platform_network_process+0x194>
 80045b6:	9c01      	ldr	r4, [sp, #4]
 80045b8:	2218      	movs	r2, #24
 80045ba:	f104 0010 	add.w	r0, r4, #16
 80045be:	2112      	movs	r1, #18
 80045c0:	f000 f990 	bl	80048e4 <core_set_error>
 80045c4:	f04f 0b00 	mov.w	fp, #0
 80045c8:	e7d6      	b.n	8004578 <ai_platform_network_process+0x194>
 80045ca:	9c01      	ldr	r4, [sp, #4]
 80045cc:	f104 0010 	add.w	r0, r4, #16
 80045d0:	2217      	movs	r2, #23
 80045d2:	2112      	movs	r1, #18
 80045d4:	f000 f986 	bl	80048e4 <core_set_error>
 80045d8:	f04f 0b00 	mov.w	fp, #0
 80045dc:	e7cc      	b.n	8004578 <ai_platform_network_process+0x194>
 80045de:	bf00      	nop
 80045e0:	a1c00100 	.word	0xa1c00100
 80045e4:	e0002000 	.word	0xe0002000
 80045e8:	e0042000 	.word	0xe0042000
 80045ec:	58024c08 	.word	0x58024c08
 80045f0:	58024c00 	.word	0x58024c00
 80045f4:	f407a5c2 	.word	0xf407a5c2
 80045f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80045fc:	40023008 	.word	0x40023008
 8004600:	40023000 	.word	0x40023000
 8004604:	9c01      	ldr	r4, [sp, #4]
 8004606:	9a02      	ldr	r2, [sp, #8]
 8004608:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800460a:	2a00      	cmp	r2, #0
 800460c:	f000 80a9 	beq.w	8004762 <ai_platform_network_process+0x37e>
 8004610:	2b01      	cmp	r3, #1
 8004612:	f240 809b 	bls.w	800474c <ai_platform_network_process+0x368>
 8004616:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800461a:	f11a 0f0c 	cmn.w	sl, #12
 800461e:	f000 8095 	beq.w	800474c <ai_platform_network_process+0x368>
 8004622:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 8090 	beq.w	800474c <ai_platform_network_process+0x368>
 800462c:	9d02      	ldr	r5, [sp, #8]
 800462e:	9401      	str	r4, [sp, #4]
 8004630:	f04f 0800 	mov.w	r8, #0
 8004634:	4598      	cmp	r8, r3
 8004636:	f080 8092 	bcs.w	800475e <ai_platform_network_process+0x37a>
 800463a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 808d 	beq.w	800475e <ai_platform_network_process+0x37a>
 8004644:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8004648:	2e00      	cmp	r6, #0
 800464a:	f000 8088 	beq.w	800475e <ai_platform_network_process+0x37a>
 800464e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	9302      	str	r3, [sp, #8]
 8004656:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800465a:	191f      	adds	r7, r3, r4
 800465c:	f000 812d 	beq.w	80048ba <ai_platform_network_process+0x4d6>
 8004660:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8004664:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8004668:	69b0      	ldr	r0, [r6, #24]
 800466a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800466e:	6841      	ldr	r1, [r0, #4]
 8004670:	fb0b f30e 	mul.w	r3, fp, lr
 8004674:	fb0c f303 	mul.w	r3, ip, r3
 8004678:	4299      	cmp	r1, r3
 800467a:	d366      	bcc.n	800474a <ai_platform_network_process+0x366>
 800467c:	68f3      	ldr	r3, [r6, #12]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	455a      	cmp	r2, fp
 8004682:	d162      	bne.n	800474a <ai_platform_network_process+0x366>
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	4572      	cmp	r2, lr
 8004688:	d15f      	bne.n	800474a <ai_platform_network_process+0x366>
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	459c      	cmp	ip, r3
 800468e:	d15c      	bne.n	800474a <ai_platform_network_process+0x366>
 8004690:	6800      	ldr	r0, [r0, #0]
 8004692:	f000 ff03 	bl	800549c <ai_array_get_byte_size>
 8004696:	68f2      	ldr	r2, [r6, #12]
 8004698:	6973      	ldr	r3, [r6, #20]
 800469a:	68d2      	ldr	r2, [r2, #12]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	fb03 f302 	mul.w	r3, r3, r2
 80046a2:	4298      	cmp	r0, r3
 80046a4:	d351      	bcc.n	800474a <ai_platform_network_process+0x366>
 80046a6:	69b3      	ldr	r3, [r6, #24]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	f000 fe9f 	bl	80053ec <ai_array_to_buffer_fmt>
 80046ae:	682b      	ldr	r3, [r5, #0]
 80046b0:	4043      	eors	r3, r0
 80046b2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80046b6:	d13e      	bne.n	8004736 <ai_platform_network_process+0x352>
 80046b8:	692b      	ldr	r3, [r5, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d032      	beq.n	8004724 <ai_platform_network_process+0x340>
 80046be:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 80046c2:	f1bb 0f00 	cmp.w	fp, #0
 80046c6:	d025      	beq.n	8004714 <ai_platform_network_process+0x330>
 80046c8:	68f2      	ldr	r2, [r6, #12]
 80046ca:	6973      	ldr	r3, [r6, #20]
 80046cc:	68d1      	ldr	r1, [r2, #12]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	fb02 f201 	mul.w	r2, r2, r1
 80046d4:	60ba      	str	r2, [r7, #8]
 80046d6:	88ab      	ldrh	r3, [r5, #4]
 80046d8:	fb02 f203 	mul.w	r2, r2, r3
 80046dc:	60fa      	str	r2, [r7, #12]
 80046de:	6929      	ldr	r1, [r5, #16]
 80046e0:	6079      	str	r1, [r7, #4]
 80046e2:	692b      	ldr	r3, [r5, #16]
 80046e4:	4413      	add	r3, r2
 80046e6:	9a02      	ldr	r2, [sp, #8]
 80046e8:	5113      	str	r3, [r2, r4]
 80046ea:	69b0      	ldr	r0, [r6, #24]
 80046ec:	6803      	ldr	r3, [r0, #0]
 80046ee:	45d9      	cmp	r9, fp
 80046f0:	bf38      	it	cc
 80046f2:	46d9      	movcc	r9, fp
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	d407      	bmi.n	8004708 <ai_platform_network_process+0x324>
 80046f8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	4419      	add	r1, r3
 8004700:	6081      	str	r1, [r0, #8]
 8004702:	69b3      	ldr	r3, [r6, #24]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	60da      	str	r2, [r3, #12]
 8004708:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800470c:	f108 0801 	add.w	r8, r8, #1
 8004710:	3518      	adds	r5, #24
 8004712:	e78f      	b.n	8004634 <ai_platform_network_process+0x250>
 8004714:	9c01      	ldr	r4, [sp, #4]
 8004716:	2221      	movs	r2, #33	; 0x21
 8004718:	f104 0010 	add.w	r0, r4, #16
 800471c:	2113      	movs	r1, #19
 800471e:	f000 f8e1 	bl	80048e4 <core_set_error>
 8004722:	e729      	b.n	8004578 <ai_platform_network_process+0x194>
 8004724:	9c01      	ldr	r4, [sp, #4]
 8004726:	2217      	movs	r2, #23
 8004728:	f104 0010 	add.w	r0, r4, #16
 800472c:	2113      	movs	r1, #19
 800472e:	469b      	mov	fp, r3
 8004730:	f000 f8d8 	bl	80048e4 <core_set_error>
 8004734:	e720      	b.n	8004578 <ai_platform_network_process+0x194>
 8004736:	9c01      	ldr	r4, [sp, #4]
 8004738:	2219      	movs	r2, #25
 800473a:	f104 0010 	add.w	r0, r4, #16
 800473e:	2113      	movs	r1, #19
 8004740:	f000 f8d0 	bl	80048e4 <core_set_error>
 8004744:	f04f 0b00 	mov.w	fp, #0
 8004748:	e716      	b.n	8004578 <ai_platform_network_process+0x194>
 800474a:	9c01      	ldr	r4, [sp, #4]
 800474c:	f104 0010 	add.w	r0, r4, #16
 8004750:	2218      	movs	r2, #24
 8004752:	2113      	movs	r1, #19
 8004754:	f000 f8c6 	bl	80048e4 <core_set_error>
 8004758:	f04f 0b00 	mov.w	fp, #0
 800475c:	e70c      	b.n	8004578 <ai_platform_network_process+0x194>
 800475e:	9c01      	ldr	r4, [sp, #4]
 8004760:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004762:	f8a4 9014 	strh.w	r9, [r4, #20]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80a4 	beq.w	80048b4 <ai_platform_network_process+0x4d0>
 800476c:	2b01      	cmp	r3, #1
 800476e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004770:	f240 809e 	bls.w	80048b0 <ai_platform_network_process+0x4cc>
 8004774:	f105 070c 	add.w	r7, r5, #12
 8004778:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800477c:	8aa3      	ldrh	r3, [r4, #20]
 800477e:	455b      	cmp	r3, fp
 8004780:	f67f aefa 	bls.w	8004578 <ai_platform_network_process+0x194>
 8004784:	9401      	str	r4, [sp, #4]
 8004786:	2d00      	cmp	r5, #0
 8004788:	d036      	beq.n	80047f8 <ai_platform_network_process+0x414>
 800478a:	882b      	ldrh	r3, [r5, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d033      	beq.n	80047f8 <ai_platform_network_process+0x414>
 8004790:	686b      	ldr	r3, [r5, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d030      	beq.n	80047f8 <ai_platform_network_process+0x414>
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f04f 0800 	mov.w	r8, #0
 800479c:	b9db      	cbnz	r3, 80047d6 <ai_platform_network_process+0x3f2>
 800479e:	e02b      	b.n	80047f8 <ai_platform_network_process+0x414>
 80047a0:	68d4      	ldr	r4, [r2, #12]
 80047a2:	1b00      	subs	r0, r0, r4
 80047a4:	4401      	add	r1, r0
 80047a6:	6091      	str	r1, [r2, #8]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	6872      	ldr	r2, [r6, #4]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80047b2:	f85a 2009 	ldr.w	r2, [sl, r9]
 80047b6:	440b      	add	r3, r1
 80047b8:	4293      	cmp	r3, r2
 80047ba:	bf24      	itt	cs
 80047bc:	68f3      	ldrcs	r3, [r6, #12]
 80047be:	1ad3      	subcs	r3, r2, r3
 80047c0:	6073      	str	r3, [r6, #4]
 80047c2:	882b      	ldrh	r3, [r5, #0]
 80047c4:	f108 0801 	add.w	r8, r8, #1
 80047c8:	4598      	cmp	r8, r3
 80047ca:	d215      	bcs.n	80047f8 <ai_platform_network_process+0x414>
 80047cc:	686b      	ldr	r3, [r5, #4]
 80047ce:	b19b      	cbz	r3, 80047f8 <ai_platform_network_process+0x414>
 80047d0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80047d4:	b183      	cbz	r3, 80047f8 <ai_platform_network_process+0x414>
 80047d6:	68a9      	ldr	r1, [r5, #8]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	f8d1 a000 	ldr.w	sl, [r1]
 80047de:	6814      	ldr	r4, [r2, #0]
 80047e0:	6890      	ldr	r0, [r2, #8]
 80047e2:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80047e6:	eb0a 0609 	add.w	r6, sl, r9
 80047ea:	00a4      	lsls	r4, r4, #2
 80047ec:	6871      	ldr	r1, [r6, #4]
 80047ee:	d5d7      	bpl.n	80047a0 <ai_platform_network_process+0x3bc>
 80047f0:	68b2      	ldr	r2, [r6, #8]
 80047f2:	f000 fea7 	bl	8005544 <memcpy>
 80047f6:	e7da      	b.n	80047ae <ai_platform_network_process+0x3ca>
 80047f8:	9801      	ldr	r0, [sp, #4]
 80047fa:	f000 fda9 	bl	8005350 <ai_layers_forward_all>
 80047fe:	2f00      	cmp	r7, #0
 8004800:	d047      	beq.n	8004892 <ai_platform_network_process+0x4ae>
 8004802:	883b      	ldrh	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d044      	beq.n	8004892 <ai_platform_network_process+0x4ae>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d041      	beq.n	8004892 <ai_platform_network_process+0x4ae>
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	2800      	cmp	r0, #0
 8004812:	d03e      	beq.n	8004892 <ai_platform_network_process+0x4ae>
 8004814:	f04f 0800 	mov.w	r8, #0
 8004818:	e019      	b.n	800484e <ai_platform_network_process+0x46a>
 800481a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800481e:	4293      	cmp	r3, r2
 8004820:	bf24      	itt	cs
 8004822:	68f3      	ldrcs	r3, [r6, #12]
 8004824:	1ad3      	subcs	r3, r2, r3
 8004826:	6073      	str	r3, [r6, #4]
 8004828:	6981      	ldr	r1, [r0, #24]
 800482a:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800482e:	1b12      	subs	r2, r2, r4
 8004830:	4413      	add	r3, r2
 8004832:	608b      	str	r3, [r1, #8]
 8004834:	6983      	ldr	r3, [r0, #24]
 8004836:	6872      	ldr	r2, [r6, #4]
 8004838:	60da      	str	r2, [r3, #12]
 800483a:	883b      	ldrh	r3, [r7, #0]
 800483c:	f108 0801 	add.w	r8, r8, #1
 8004840:	4598      	cmp	r8, r3
 8004842:	d226      	bcs.n	8004892 <ai_platform_network_process+0x4ae>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	b323      	cbz	r3, 8004892 <ai_platform_network_process+0x4ae>
 8004848:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800484c:	b308      	cbz	r0, 8004892 <ai_platform_network_process+0x4ae>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	6981      	ldr	r1, [r0, #24]
 8004852:	f8d3 a000 	ldr.w	sl, [r3]
 8004856:	680c      	ldr	r4, [r1, #0]
 8004858:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800485c:	eb0a 0609 	add.w	r6, sl, r9
 8004860:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8004864:	00a4      	lsls	r4, r4, #2
 8004866:	eb0c 0302 	add.w	r3, ip, r2
 800486a:	d5d6      	bpl.n	800481a <ai_platform_network_process+0x436>
 800486c:	6889      	ldr	r1, [r1, #8]
 800486e:	4660      	mov	r0, ip
 8004870:	f000 fe68 	bl	8005544 <memcpy>
 8004874:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8004878:	f85a 2009 	ldr.w	r2, [sl, r9]
 800487c:	440b      	add	r3, r1
 800487e:	4293      	cmp	r3, r2
 8004880:	bf24      	itt	cs
 8004882:	68f3      	ldrcs	r3, [r6, #12]
 8004884:	1ad3      	subcs	r3, r2, r3
 8004886:	6073      	str	r3, [r6, #4]
 8004888:	883b      	ldrh	r3, [r7, #0]
 800488a:	f108 0801 	add.w	r8, r8, #1
 800488e:	4598      	cmp	r8, r3
 8004890:	d3d8      	bcc.n	8004844 <ai_platform_network_process+0x460>
 8004892:	9b01      	ldr	r3, [sp, #4]
 8004894:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8004898:	461a      	mov	r2, r3
 800489a:	f10b 0b01 	add.w	fp, fp, #1
 800489e:	8a9b      	ldrh	r3, [r3, #20]
 80048a0:	fa1f fb8b 	uxth.w	fp, fp
 80048a4:	455b      	cmp	r3, fp
 80048a6:	f8a2 b016 	strh.w	fp, [r2, #22]
 80048aa:	f63f af6c 	bhi.w	8004786 <ai_platform_network_process+0x3a2>
 80048ae:	e663      	b.n	8004578 <ai_platform_network_process+0x194>
 80048b0:	2700      	movs	r7, #0
 80048b2:	e761      	b.n	8004778 <ai_platform_network_process+0x394>
 80048b4:	461d      	mov	r5, r3
 80048b6:	461f      	mov	r7, r3
 80048b8:	e75e      	b.n	8004778 <ai_platform_network_process+0x394>
 80048ba:	9c01      	ldr	r4, [sp, #4]
 80048bc:	2217      	movs	r2, #23
 80048be:	f104 0010 	add.w	r0, r4, #16
 80048c2:	2113      	movs	r1, #19
 80048c4:	f000 f80e 	bl	80048e4 <core_set_error>
 80048c8:	46bb      	mov	fp, r7
 80048ca:	e655      	b.n	8004578 <ai_platform_network_process+0x194>
 80048cc:	f104 0010 	add.w	r0, r4, #16
 80048d0:	2230      	movs	r2, #48	; 0x30
 80048d2:	2111      	movs	r1, #17
 80048d4:	f000 f806 	bl	80048e4 <core_set_error>
 80048d8:	e64e      	b.n	8004578 <ai_platform_network_process+0x194>
 80048da:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80048dc:	e5c1      	b.n	8004462 <ai_platform_network_process+0x7e>
 80048de:	bf00      	nop

080048e0 <core_init>:
 80048e0:	2001      	movs	r0, #1
 80048e2:	4770      	bx	lr

080048e4 <core_set_error>:
 80048e4:	7803      	ldrb	r3, [r0, #0]
 80048e6:	b933      	cbnz	r3, 80048f6 <core_set_error+0x12>
 80048e8:	7001      	strb	r1, [r0, #0]
 80048ea:	6803      	ldr	r3, [r0, #0]
 80048ec:	f362 231f 	bfi	r3, r2, #8, #24
 80048f0:	6003      	str	r3, [r0, #0]
 80048f2:	2001      	movs	r0, #1
 80048f4:	4770      	bx	lr
 80048f6:	2000      	movs	r0, #0
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop

080048fc <ai_dict8_dot_array_f32>:
 80048fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004900:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004904:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8004908:	f000 80c0 	beq.w	8004a8c <ai_dict8_dot_array_f32+0x190>
 800490c:	f101 0408 	add.w	r4, r1, #8
 8004910:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8004914:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004a94 <ai_dict8_dot_array_f32+0x198>
 8004918:	eb04 0e09 	add.w	lr, r4, r9
 800491c:	f103 0520 	add.w	r5, r3, #32
 8004920:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8004924:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8004928:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800492c:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8004930:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8004934:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8004938:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800493c:	ed55 3a04 	vldr	s7, [r5, #-16]
 8004940:	ed55 4a03 	vldr	s9, [r5, #-12]
 8004944:	ed55 5a02 	vldr	s11, [r5, #-8]
 8004948:	ed55 6a01 	vldr	s13, [r5, #-4]
 800494c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004950:	edd6 7a00 	vldr	s15, [r6]
 8004954:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8004958:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800495c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004960:	ed9a 3a00 	vldr	s6, [sl]
 8004964:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8004968:	eee3 7a05 	vfma.f32	s15, s6, s10
 800496c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004970:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004974:	ed97 3a00 	vldr	s6, [r7]
 8004978:	ed96 5a00 	vldr	s10, [r6]
 800497c:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8004980:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8004984:	eee3 7a04 	vfma.f32	s15, s6, s8
 8004988:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800498c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004990:	ed9a 3a00 	vldr	s6, [sl]
 8004994:	ed96 4a00 	vldr	s8, [r6]
 8004998:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800499c:	eee5 7a06 	vfma.f32	s15, s10, s12
 80049a0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80049a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80049a8:	ed97 5a00 	vldr	s10, [r7]
 80049ac:	ed96 6a00 	vldr	s12, [r6]
 80049b0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80049b4:	3408      	adds	r4, #8
 80049b6:	45a6      	cmp	lr, r4
 80049b8:	f105 0520 	add.w	r5, r5, #32
 80049bc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80049c0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80049c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80049c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049cc:	d1a8      	bne.n	8004920 <ai_dict8_dot_array_f32+0x24>
 80049ce:	4449      	add	r1, r9
 80049d0:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80049d4:	f01c 0c07 	ands.w	ip, ip, #7
 80049d8:	d050      	beq.n	8004a7c <ai_dict8_dot_array_f32+0x180>
 80049da:	780c      	ldrb	r4, [r1, #0]
 80049dc:	edd3 6a00 	vldr	s13, [r3]
 80049e0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80049e4:	edd4 7a00 	vldr	s15, [r4]
 80049e8:	f1bc 0f01 	cmp.w	ip, #1
 80049ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80049f0:	d044      	beq.n	8004a7c <ai_dict8_dot_array_f32+0x180>
 80049f2:	784c      	ldrb	r4, [r1, #1]
 80049f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80049f8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80049fc:	edd4 7a00 	vldr	s15, [r4]
 8004a00:	f1bc 0f02 	cmp.w	ip, #2
 8004a04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a08:	d038      	beq.n	8004a7c <ai_dict8_dot_array_f32+0x180>
 8004a0a:	788c      	ldrb	r4, [r1, #2]
 8004a0c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a10:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a14:	edd4 7a00 	vldr	s15, [r4]
 8004a18:	f1bc 0f03 	cmp.w	ip, #3
 8004a1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a20:	d02c      	beq.n	8004a7c <ai_dict8_dot_array_f32+0x180>
 8004a22:	78cc      	ldrb	r4, [r1, #3]
 8004a24:	edd3 6a03 	vldr	s13, [r3, #12]
 8004a28:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a2c:	edd4 7a00 	vldr	s15, [r4]
 8004a30:	f1bc 0f04 	cmp.w	ip, #4
 8004a34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a38:	d020      	beq.n	8004a7c <ai_dict8_dot_array_f32+0x180>
 8004a3a:	790c      	ldrb	r4, [r1, #4]
 8004a3c:	edd3 6a04 	vldr	s13, [r3, #16]
 8004a40:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a44:	edd4 7a00 	vldr	s15, [r4]
 8004a48:	f1bc 0f05 	cmp.w	ip, #5
 8004a4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a50:	d014      	beq.n	8004a7c <ai_dict8_dot_array_f32+0x180>
 8004a52:	794c      	ldrb	r4, [r1, #5]
 8004a54:	edd3 6a05 	vldr	s13, [r3, #20]
 8004a58:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a5c:	edd4 7a00 	vldr	s15, [r4]
 8004a60:	f1bc 0f06 	cmp.w	ip, #6
 8004a64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a68:	d008      	beq.n	8004a7c <ai_dict8_dot_array_f32+0x180>
 8004a6a:	7989      	ldrb	r1, [r1, #6]
 8004a6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004a70:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004a74:	edd2 6a00 	vldr	s13, [r2]
 8004a78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a7c:	edd0 7a00 	vldr	s15, [r0]
 8004a80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a84:	ed80 7a00 	vstr	s14, [r0]
 8004a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8c:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8004a94 <ai_dict8_dot_array_f32+0x198>
 8004a90:	e7a0      	b.n	80049d4 <ai_dict8_dot_array_f32+0xd8>
 8004a92:	bf00      	nop
 8004a94:	00000000 	.word	0x00000000

08004a98 <ai_dict4_dot_array_f32>:
 8004a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004a9e:	f027 0c01 	bic.w	ip, r7, #1
 8004aa2:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8004aa6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8004aaa:	f000 80ae 	beq.w	8004c0a <ai_dict4_dot_array_f32+0x172>
 8004aae:	1d0d      	adds	r5, r1, #4
 8004ab0:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8004ab4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004c10 <ai_dict4_dot_array_f32+0x178>
 8004ab8:	eb05 0e09 	add.w	lr, r5, r9
 8004abc:	f103 0420 	add.w	r4, r3, #32
 8004ac0:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8004ac4:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8004ac8:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8004acc:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8004ad0:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8004ad4:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8004ad8:	ed14 5a04 	vldr	s10, [r4, #-16]
 8004adc:	ed54 5a03 	vldr	s11, [r4, #-12]
 8004ae0:	ed14 6a02 	vldr	s12, [r4, #-8]
 8004ae4:	ed54 6a01 	vldr	s13, [r4, #-4]
 8004ae8:	f006 0a0f 	and.w	sl, r6, #15
 8004aec:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004af0:	edda 7a00 	vldr	s15, [sl]
 8004af4:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8004af8:	0936      	lsrs	r6, r6, #4
 8004afa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004afe:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004b02:	ed96 3a00 	vldr	s6, [r6]
 8004b06:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8004b0a:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004b0e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004b12:	f00b 0b0f 	and.w	fp, fp, #15
 8004b16:	edd6 3a00 	vldr	s7, [r6]
 8004b1a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8004b1e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004b22:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8004b26:	3504      	adds	r5, #4
 8004b28:	ed9b 4a00 	vldr	s8, [fp]
 8004b2c:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8004b30:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004b34:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8004b38:	f00a 0a0f 	and.w	sl, sl, #15
 8004b3c:	eddb 4a00 	vldr	s9, [fp]
 8004b40:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004b44:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004b48:	45ae      	cmp	lr, r5
 8004b4a:	ed9a 5a00 	vldr	s10, [sl]
 8004b4e:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8004b52:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004b56:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004b5a:	f006 060f 	and.w	r6, r6, #15
 8004b5e:	edda 5a00 	vldr	s11, [sl]
 8004b62:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004b66:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004b6a:	f104 0420 	add.w	r4, r4, #32
 8004b6e:	ed96 6a00 	vldr	s12, [r6]
 8004b72:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004b76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b7a:	d1a1      	bne.n	8004ac0 <ai_dict4_dot_array_f32+0x28>
 8004b7c:	4449      	add	r1, r9
 8004b7e:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8004b82:	459c      	cmp	ip, r3
 8004b84:	d92d      	bls.n	8004be2 <ai_dict4_dot_array_f32+0x14a>
 8004b86:	f10c 0c07 	add.w	ip, ip, #7
 8004b8a:	f103 0508 	add.w	r5, r3, #8
 8004b8e:	ebac 0c05 	sub.w	ip, ip, r5
 8004b92:	f02c 0407 	bic.w	r4, ip, #7
 8004b96:	f103 0810 	add.w	r8, r3, #16
 8004b9a:	44a0      	add	r8, r4
 8004b9c:	f101 3eff 	add.w	lr, r1, #4294967295
 8004ba0:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8004ba4:	ed15 6a01 	vldr	s12, [r5, #-4]
 8004ba8:	ed55 6a02 	vldr	s13, [r5, #-8]
 8004bac:	f004 060f 	and.w	r6, r4, #15
 8004bb0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004bb4:	0924      	lsrs	r4, r4, #4
 8004bb6:	edd6 7a00 	vldr	s15, [r6]
 8004bba:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004bbe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004bc2:	ed94 6a00 	vldr	s12, [r4]
 8004bc6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004bca:	3508      	adds	r5, #8
 8004bcc:	45a8      	cmp	r8, r5
 8004bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bd2:	d1e5      	bne.n	8004ba0 <ai_dict4_dot_array_f32+0x108>
 8004bd4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8004bd8:	f10c 0c01 	add.w	ip, ip, #1
 8004bdc:	4461      	add	r1, ip
 8004bde:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8004be2:	07fc      	lsls	r4, r7, #31
 8004be4:	d509      	bpl.n	8004bfa <ai_dict4_dot_array_f32+0x162>
 8004be6:	7809      	ldrb	r1, [r1, #0]
 8004be8:	edd3 7a00 	vldr	s15, [r3]
 8004bec:	090b      	lsrs	r3, r1, #4
 8004bee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004bf2:	edd2 6a00 	vldr	s13, [r2]
 8004bf6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004bfa:	edd0 7a00 	vldr	s15, [r0]
 8004bfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c02:	ed80 7a00 	vstr	s14, [r0]
 8004c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c0a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8004c10 <ai_dict4_dot_array_f32+0x178>
 8004c0e:	e7b8      	b.n	8004b82 <ai_dict4_dot_array_f32+0xea>
 8004c10:	00000000 	.word	0x00000000

08004c14 <forward_dense>:
 8004c14:	6983      	ldr	r3, [r0, #24]
 8004c16:	881a      	ldrh	r2, [r3, #0]
 8004c18:	2a00      	cmp	r2, #0
 8004c1a:	f000 80b5 	beq.w	8004d88 <forward_dense+0x174>
 8004c1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c22:	ed2d 8b10 	vpush	{d8-d15}
 8004c26:	685f      	ldr	r7, [r3, #4]
 8004c28:	687e      	ldr	r6, [r7, #4]
 8004c2a:	b091      	sub	sp, #68	; 0x44
 8004c2c:	b106      	cbz	r6, 8004c30 <forward_dense+0x1c>
 8004c2e:	6836      	ldr	r6, [r6, #0]
 8004c30:	2a01      	cmp	r2, #1
 8004c32:	f240 80a6 	bls.w	8004d82 <forward_dense+0x16e>
 8004c36:	693d      	ldr	r5, [r7, #16]
 8004c38:	b105      	cbz	r5, 8004c3c <forward_dense+0x28>
 8004c3a:	682d      	ldr	r5, [r5, #0]
 8004c3c:	2a02      	cmp	r2, #2
 8004c3e:	f000 80a5 	beq.w	8004d8c <forward_dense+0x178>
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 821b 	beq.w	8005080 <forward_dense+0x46c>
 8004c4a:	6819      	ldr	r1, [r3, #0]
 8004c4c:	9106      	str	r1, [sp, #24]
 8004c4e:	f117 0118 	adds.w	r1, r7, #24
 8004c52:	f000 80c9 	beq.w	8004de8 <forward_dense+0x1d4>
 8004c56:	8b39      	ldrh	r1, [r7, #24]
 8004c58:	2901      	cmp	r1, #1
 8004c5a:	f240 820e 	bls.w	800507a <forward_dense+0x466>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80c4 	beq.w	8004dec <forward_dense+0x1d8>
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	9307      	str	r3, [sp, #28]
 8004c68:	9b06      	ldr	r3, [sp, #24]
 8004c6a:	68ec      	ldr	r4, [r5, #12]
 8004c6c:	6998      	ldr	r0, [r3, #24]
 8004c6e:	68f1      	ldr	r1, [r6, #12]
 8004c70:	6803      	ldr	r3, [r0, #0]
 8004c72:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8004c76:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 8004c7a:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8004c7e:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8004c82:	fa49 f101 	asr.w	r1, r9, r1
 8004c86:	910b      	str	r1, [sp, #44]	; 0x2c
 8004c88:	2a03      	cmp	r2, #3
 8004c8a:	fb0e f10c 	mul.w	r1, lr, ip
 8004c8e:	6864      	ldr	r4, [r4, #4]
 8004c90:	9108      	str	r1, [sp, #32]
 8004c92:	f000 81de 	beq.w	8005052 <forward_dense+0x43e>
 8004c96:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8004c98:	b117      	cbz	r7, 8004ca0 <forward_dense+0x8c>
 8004c9a:	683f      	ldr	r7, [r7, #0]
 8004c9c:	b107      	cbz	r7, 8004ca0 <forward_dense+0x8c>
 8004c9e:	69bf      	ldr	r7, [r7, #24]
 8004ca0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	f000 81d7 	beq.w	8005058 <forward_dense+0x444>
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	f000 81d4 	beq.w	8005058 <forward_dense+0x444>
 8004cb0:	f04f 0a00 	mov.w	sl, #0
 8004cb4:	69ab      	ldr	r3, [r5, #24]
 8004cb6:	69b2      	ldr	r2, [r6, #24]
 8004cb8:	6899      	ldr	r1, [r3, #8]
 8004cba:	9b06      	ldr	r3, [sp, #24]
 8004cbc:	9104      	str	r1, [sp, #16]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	6897      	ldr	r7, [r2, #8]
 8004cc2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8004cc6:	00a3      	lsls	r3, r4, #2
 8004cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cca:	18ce      	adds	r6, r1, r3
 8004ccc:	9b08      	ldr	r3, [sp, #32]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d052      	beq.n	8004d78 <forward_dense+0x164>
 8004cd2:	f1a8 0310 	sub.w	r3, r8, #16
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	3301      	adds	r3, #1
 8004cda:	019b      	lsls	r3, r3, #6
 8004cdc:	930c      	str	r3, [sp, #48]	; 0x30
 8004cde:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8004ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	9305      	str	r3, [sp, #20]
 8004ce8:	eddf aace 	vldr	s21, [pc, #824]	; 8005024 <forward_dense+0x410>
 8004cec:	f008 030f 	and.w	r3, r8, #15
 8004cf0:	930d      	str	r3, [sp, #52]	; 0x34
 8004cf2:	9b06      	ldr	r3, [sp, #24]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	689d      	ldr	r5, [r3, #8]
 8004cf8:	9b07      	ldr	r3, [sp, #28]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 818f 	beq.w	800501e <forward_dense+0x40a>
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	689c      	ldr	r4, [r3, #8]
 8004d04:	9b04      	ldr	r3, [sp, #16]
 8004d06:	f1ba 0f00 	cmp.w	sl, #0
 8004d0a:	d071      	beq.n	8004df0 <forward_dense+0x1dc>
 8004d0c:	42b3      	cmp	r3, r6
 8004d0e:	d229      	bcs.n	8004d64 <forward_dense+0x150>
 8004d10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d12:	469b      	mov	fp, r3
 8004d14:	ab0f      	add	r3, sp, #60	; 0x3c
 8004d16:	9303      	str	r3, [sp, #12]
 8004d18:	2a04      	cmp	r2, #4
 8004d1a:	4633      	mov	r3, r6
 8004d1c:	4646      	mov	r6, r8
 8004d1e:	4698      	mov	r8, r3
 8004d20:	d037      	beq.n	8004d92 <forward_dense+0x17e>
 8004d22:	2c00      	cmp	r4, #0
 8004d24:	f000 8180 	beq.w	8005028 <forward_dense+0x414>
 8004d28:	f8d4 c000 	ldr.w	ip, [r4]
 8004d2c:	9803      	ldr	r0, [sp, #12]
 8004d2e:	9600      	str	r6, [sp, #0]
 8004d30:	463b      	mov	r3, r7
 8004d32:	4629      	mov	r1, r5
 8004d34:	4652      	mov	r2, sl
 8004d36:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004d3a:	f7ff fddf 	bl	80048fc <ai_dict8_dot_array_f32>
 8004d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d40:	f84b 3b04 	str.w	r3, [fp], #4
 8004d44:	45c3      	cmp	fp, r8
 8004d46:	f104 0404 	add.w	r4, r4, #4
 8004d4a:	444d      	add	r5, r9
 8004d4c:	d3e9      	bcc.n	8004d22 <forward_dense+0x10e>
 8004d4e:	4643      	mov	r3, r8
 8004d50:	46b0      	mov	r8, r6
 8004d52:	461e      	mov	r6, r3
 8004d54:	9a04      	ldr	r2, [sp, #16]
 8004d56:	43d3      	mvns	r3, r2
 8004d58:	4433      	add	r3, r6
 8004d5a:	f023 0303 	bic.w	r3, r3, #3
 8004d5e:	3304      	adds	r3, #4
 8004d60:	18d3      	adds	r3, r2, r3
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d66:	9b05      	ldr	r3, [sp, #20]
 8004d68:	4417      	add	r7, r2
 8004d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d6c:	4416      	add	r6, r2
 8004d6e:	9a08      	ldr	r2, [sp, #32]
 8004d70:	3301      	adds	r3, #1
 8004d72:	4293      	cmp	r3, r2
 8004d74:	9305      	str	r3, [sp, #20]
 8004d76:	d1bc      	bne.n	8004cf2 <forward_dense+0xde>
 8004d78:	b011      	add	sp, #68	; 0x44
 8004d7a:	ecbd 8b10 	vpop	{d8-d15}
 8004d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d82:	2300      	movs	r3, #0
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	deff      	udf	#255	; 0xff
 8004d88:	6853      	ldr	r3, [r2, #4]
 8004d8a:	deff      	udf	#255	; 0xff
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	deff      	udf	#255	; 0xff
 8004d92:	b1a4      	cbz	r4, 8004dbe <forward_dense+0x1aa>
 8004d94:	f8d4 c000 	ldr.w	ip, [r4]
 8004d98:	9803      	ldr	r0, [sp, #12]
 8004d9a:	9600      	str	r6, [sp, #0]
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4652      	mov	r2, sl
 8004da2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004da6:	f7ff fe77 	bl	8004a98 <ai_dict4_dot_array_f32>
 8004daa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dac:	f84b 3b04 	str.w	r3, [fp], #4
 8004db0:	45c3      	cmp	fp, r8
 8004db2:	f104 0404 	add.w	r4, r4, #4
 8004db6:	444d      	add	r5, r9
 8004db8:	d2c9      	bcs.n	8004d4e <forward_dense+0x13a>
 8004dba:	2c00      	cmp	r4, #0
 8004dbc:	d1ea      	bne.n	8004d94 <forward_dense+0x180>
 8004dbe:	4634      	mov	r4, r6
 8004dc0:	4646      	mov	r6, r8
 8004dc2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004dc6:	9400      	str	r4, [sp, #0]
 8004dc8:	463b      	mov	r3, r7
 8004dca:	4629      	mov	r1, r5
 8004dcc:	4652      	mov	r2, sl
 8004dce:	4640      	mov	r0, r8
 8004dd0:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8004dd4:	f7ff fe60 	bl	8004a98 <ai_dict4_dot_array_f32>
 8004dd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dda:	f84b 3b04 	str.w	r3, [fp], #4
 8004dde:	45b3      	cmp	fp, r6
 8004de0:	444d      	add	r5, r9
 8004de2:	d3f0      	bcc.n	8004dc6 <forward_dense+0x1b2>
 8004de4:	46a0      	mov	r8, r4
 8004de6:	e7b5      	b.n	8004d54 <forward_dense+0x140>
 8004de8:	9107      	str	r1, [sp, #28]
 8004dea:	e73d      	b.n	8004c68 <forward_dense+0x54>
 8004dec:	9307      	str	r3, [sp, #28]
 8004dee:	e73b      	b.n	8004c68 <forward_dense+0x54>
 8004df0:	42b3      	cmp	r3, r6
 8004df2:	d2b7      	bcs.n	8004d64 <forward_dense+0x150>
 8004df4:	4618      	mov	r0, r3
 8004df6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004df8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8004dfc:	eb07 0c03 	add.w	ip, r7, r3
 8004e00:	469e      	mov	lr, r3
 8004e02:	2c00      	cmp	r4, #0
 8004e04:	f000 80ff 	beq.w	8005006 <forward_dense+0x3f2>
 8004e08:	f1b8 0f0f 	cmp.w	r8, #15
 8004e0c:	edd4 fa00 	vldr	s31, [r4]
 8004e10:	eddf 6a84 	vldr	s13, [pc, #528]	; 8005024 <forward_dense+0x410>
 8004e14:	f104 0404 	add.w	r4, r4, #4
 8004e18:	f240 80fd 	bls.w	8005016 <forward_dense+0x402>
 8004e1c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004e20:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8004e24:	4641      	mov	r1, r8
 8004e26:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8004e2a:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8004e2e:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8004e32:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8004e36:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8004e3a:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8004e3e:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8004e42:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8004e46:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8004e4a:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8004e4e:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8004e52:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8004e56:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8004e5a:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8004e5e:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8004e62:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8004e66:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8004e6a:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8004e6e:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8004e72:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8004e76:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8004e7a:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8004e7e:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8004e82:	ed12 4a04 	vldr	s8, [r2, #-16]
 8004e86:	ed53 4a04 	vldr	s9, [r3, #-16]
 8004e8a:	ed13 5a03 	vldr	s10, [r3, #-12]
 8004e8e:	ed52 5a03 	vldr	s11, [r2, #-12]
 8004e92:	ed13 6a02 	vldr	s12, [r3, #-8]
 8004e96:	ed12 7a02 	vldr	s14, [r2, #-8]
 8004e9a:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8004e9e:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8004ea2:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8004ea6:	3910      	subs	r1, #16
 8004ea8:	290f      	cmp	r1, #15
 8004eaa:	ed52 ea01 	vldr	s29, [r2, #-4]
 8004eae:	ed13 ea01 	vldr	s28, [r3, #-4]
 8004eb2:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8004eb6:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8004eba:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8004ebe:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8004ec2:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8004ec6:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8004eca:	eee9 7a89 	vfma.f32	s15, s19, s18
 8004ece:	eee8 7a88 	vfma.f32	s15, s17, s16
 8004ed2:	eee0 7a20 	vfma.f32	s15, s0, s1
 8004ed6:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004eda:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004ede:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004ee2:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004ee6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004eea:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004eee:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8004ef2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004ef6:	d896      	bhi.n	8004e26 <forward_dense+0x212>
 8004ef8:	eb05 010e 	add.w	r1, r5, lr
 8004efc:	465b      	mov	r3, fp
 8004efe:	4662      	mov	r2, ip
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d075      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004f04:	ed91 7a00 	vldr	s14, [r1]
 8004f08:	edd2 7a00 	vldr	s15, [r2]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f12:	d06d      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004f14:	ed91 7a01 	vldr	s14, [r1, #4]
 8004f18:	edd2 7a01 	vldr	s15, [r2, #4]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f22:	d065      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004f24:	ed91 7a02 	vldr	s14, [r1, #8]
 8004f28:	edd2 7a02 	vldr	s15, [r2, #8]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f32:	d05d      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004f34:	ed91 7a03 	vldr	s14, [r1, #12]
 8004f38:	edd2 7a03 	vldr	s15, [r2, #12]
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f42:	d055      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004f44:	ed91 7a04 	vldr	s14, [r1, #16]
 8004f48:	edd2 7a04 	vldr	s15, [r2, #16]
 8004f4c:	2b05      	cmp	r3, #5
 8004f4e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f52:	d04d      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004f54:	ed91 7a05 	vldr	s14, [r1, #20]
 8004f58:	edd2 7a05 	vldr	s15, [r2, #20]
 8004f5c:	2b06      	cmp	r3, #6
 8004f5e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f62:	d045      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004f64:	ed91 7a06 	vldr	s14, [r1, #24]
 8004f68:	edd2 7a06 	vldr	s15, [r2, #24]
 8004f6c:	2b07      	cmp	r3, #7
 8004f6e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f72:	d03d      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004f74:	ed91 7a07 	vldr	s14, [r1, #28]
 8004f78:	edd2 7a07 	vldr	s15, [r2, #28]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f82:	d035      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004f84:	ed91 7a08 	vldr	s14, [r1, #32]
 8004f88:	edd2 7a08 	vldr	s15, [r2, #32]
 8004f8c:	2b09      	cmp	r3, #9
 8004f8e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f92:	d02d      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004f94:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8004f98:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8004f9c:	2b0a      	cmp	r3, #10
 8004f9e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004fa2:	d025      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004fa4:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8004fa8:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8004fac:	2b0b      	cmp	r3, #11
 8004fae:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004fb2:	d01d      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004fb4:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8004fb8:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004fc2:	d015      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004fc4:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8004fc8:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8004fcc:	2b0d      	cmp	r3, #13
 8004fce:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004fd2:	d00d      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004fd4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8004fd8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8004fdc:	2b0e      	cmp	r3, #14
 8004fde:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004fe2:	d005      	beq.n	8004ff0 <forward_dense+0x3dc>
 8004fe4:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8004fe8:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8004fec:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ff0:	444d      	add	r5, r9
 8004ff2:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8004ff6:	ece0 6a01 	vstmia	r0!, {s13}
 8004ffa:	42b0      	cmp	r0, r6
 8004ffc:	f4bf aeaa 	bcs.w	8004d54 <forward_dense+0x140>
 8005000:	2c00      	cmp	r4, #0
 8005002:	f47f af01 	bne.w	8004e08 <forward_dense+0x1f4>
 8005006:	f1b8 0f0f 	cmp.w	r8, #15
 800500a:	eef0 fa6a 	vmov.f32	s31, s21
 800500e:	eddf 6a05 	vldr	s13, [pc, #20]	; 8005024 <forward_dense+0x410>
 8005012:	f63f af03 	bhi.w	8004e1c <forward_dense+0x208>
 8005016:	4643      	mov	r3, r8
 8005018:	4629      	mov	r1, r5
 800501a:	463a      	mov	r2, r7
 800501c:	e770      	b.n	8004f00 <forward_dense+0x2ec>
 800501e:	461c      	mov	r4, r3
 8005020:	e670      	b.n	8004d04 <forward_dense+0xf0>
 8005022:	bf00      	nop
 8005024:	00000000 	.word	0x00000000
 8005028:	4634      	mov	r4, r6
 800502a:	4646      	mov	r6, r8
 800502c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005030:	9400      	str	r4, [sp, #0]
 8005032:	463b      	mov	r3, r7
 8005034:	4629      	mov	r1, r5
 8005036:	4652      	mov	r2, sl
 8005038:	4640      	mov	r0, r8
 800503a:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800503e:	f7ff fc5d 	bl	80048fc <ai_dict8_dot_array_f32>
 8005042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005044:	f84b 3b04 	str.w	r3, [fp], #4
 8005048:	455e      	cmp	r6, fp
 800504a:	444d      	add	r5, r9
 800504c:	d8f0      	bhi.n	8005030 <forward_dense+0x41c>
 800504e:	46a0      	mov	r8, r4
 8005050:	e680      	b.n	8004d54 <forward_dense+0x140>
 8005052:	2300      	movs	r3, #0
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	deff      	udf	#255	; 0xff
 8005058:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800505c:	2f00      	cmp	r7, #0
 800505e:	f43f ae29 	beq.w	8004cb4 <forward_dense+0xa0>
 8005062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005066:	f000 fa19 	bl	800549c <ai_array_get_byte_size>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4602      	mov	r2, r0
 800506e:	4651      	mov	r1, sl
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fa67 	bl	8005544 <memcpy>
 8005076:	4682      	mov	sl, r0
 8005078:	e61c      	b.n	8004cb4 <forward_dense+0xa0>
 800507a:	2300      	movs	r3, #0
 800507c:	9307      	str	r3, [sp, #28]
 800507e:	e5f3      	b.n	8004c68 <forward_dense+0x54>
 8005080:	9306      	str	r3, [sp, #24]
 8005082:	e5e4      	b.n	8004c4e <forward_dense+0x3a>

08005084 <nl_func_relu_generic_array_f32>:
 8005084:	b430      	push	{r4, r5}
 8005086:	6989      	ldr	r1, [r1, #24]
 8005088:	6980      	ldr	r0, [r0, #24]
 800508a:	edd3 6a02 	vldr	s13, [r3, #8]
 800508e:	688c      	ldr	r4, [r1, #8]
 8005090:	6880      	ldr	r0, [r0, #8]
 8005092:	ed93 7a00 	vldr	s14, [r3]
 8005096:	ed93 6a01 	vldr	s12, [r3, #4]
 800509a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800509e:	3a01      	subs	r2, #1
 80050a0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80050a4:	0092      	lsls	r2, r2, #2
 80050a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050aa:	4410      	add	r0, r2
 80050ac:	4422      	add	r2, r4
 80050ae:	d421      	bmi.n	80050f4 <nl_func_relu_generic_array_f32+0x70>
 80050b0:	4294      	cmp	r4, r2
 80050b2:	d83d      	bhi.n	8005130 <nl_func_relu_generic_array_f32+0xac>
 80050b4:	1d13      	adds	r3, r2, #4
 80050b6:	1d02      	adds	r2, r0, #4
 80050b8:	e010      	b.n	80050dc <nl_func_relu_generic_array_f32+0x58>
 80050ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c2:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80050c6:	d501      	bpl.n	80050cc <nl_func_relu_generic_array_f32+0x48>
 80050c8:	ee65 7a86 	vmul.f32	s15, s11, s12
 80050cc:	ed62 7a01 	vstmdb	r2!, {s15}
 80050d0:	6888      	ldr	r0, [r1, #8]
 80050d2:	f1a3 0408 	sub.w	r4, r3, #8
 80050d6:	4284      	cmp	r4, r0
 80050d8:	462b      	mov	r3, r5
 80050da:	d329      	bcc.n	8005130 <nl_func_relu_generic_array_f32+0xac>
 80050dc:	ed53 7a01 	vldr	s15, [r3, #-4]
 80050e0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80050e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e8:	f1a3 0504 	sub.w	r5, r3, #4
 80050ec:	d4e5      	bmi.n	80050ba <nl_func_relu_generic_array_f32+0x36>
 80050ee:	eef0 7a66 	vmov.f32	s15, s13
 80050f2:	e7eb      	b.n	80050cc <nl_func_relu_generic_array_f32+0x48>
 80050f4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80050f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fc:	d01a      	beq.n	8005134 <nl_func_relu_generic_array_f32+0xb0>
 80050fe:	4294      	cmp	r4, r2
 8005100:	d816      	bhi.n	8005130 <nl_func_relu_generic_array_f32+0xac>
 8005102:	1d13      	adds	r3, r2, #4
 8005104:	1d02      	adds	r2, r0, #4
 8005106:	ed53 7a01 	vldr	s15, [r3, #-4]
 800510a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800510e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005112:	f1a3 0408 	sub.w	r4, r3, #8
 8005116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511a:	f1a3 0004 	sub.w	r0, r3, #4
 800511e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005122:	4623      	mov	r3, r4
 8005124:	d51e      	bpl.n	8005164 <nl_func_relu_generic_array_f32+0xe0>
 8005126:	ed62 6a01 	vstmdb	r2!, {s13}
 800512a:	688b      	ldr	r3, [r1, #8]
 800512c:	42a3      	cmp	r3, r4
 800512e:	d91e      	bls.n	800516e <nl_func_relu_generic_array_f32+0xea>
 8005130:	bc30      	pop	{r4, r5}
 8005132:	4770      	bx	lr
 8005134:	4294      	cmp	r4, r2
 8005136:	d8fb      	bhi.n	8005130 <nl_func_relu_generic_array_f32+0xac>
 8005138:	1d13      	adds	r3, r2, #4
 800513a:	2500      	movs	r5, #0
 800513c:	1d02      	adds	r2, r0, #4
 800513e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005146:	f1a3 0408 	sub.w	r4, r3, #8
 800514a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514e:	f1a3 0004 	sub.w	r0, r3, #4
 8005152:	4623      	mov	r3, r4
 8005154:	db0d      	blt.n	8005172 <nl_func_relu_generic_array_f32+0xee>
 8005156:	ed62 7a01 	vstmdb	r2!, {s15}
 800515a:	688b      	ldr	r3, [r1, #8]
 800515c:	42a3      	cmp	r3, r4
 800515e:	d8e7      	bhi.n	8005130 <nl_func_relu_generic_array_f32+0xac>
 8005160:	4603      	mov	r3, r0
 8005162:	e7ec      	b.n	800513e <nl_func_relu_generic_array_f32+0xba>
 8005164:	ed62 7a01 	vstmdb	r2!, {s15}
 8005168:	688c      	ldr	r4, [r1, #8]
 800516a:	429c      	cmp	r4, r3
 800516c:	d8e0      	bhi.n	8005130 <nl_func_relu_generic_array_f32+0xac>
 800516e:	4603      	mov	r3, r0
 8005170:	e7c9      	b.n	8005106 <nl_func_relu_generic_array_f32+0x82>
 8005172:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005176:	688c      	ldr	r4, [r1, #8]
 8005178:	429c      	cmp	r4, r3
 800517a:	d8d9      	bhi.n	8005130 <nl_func_relu_generic_array_f32+0xac>
 800517c:	4603      	mov	r3, r0
 800517e:	e7de      	b.n	800513e <nl_func_relu_generic_array_f32+0xba>

08005180 <forward_relu>:
 8005180:	6982      	ldr	r2, [r0, #24]
 8005182:	8813      	ldrh	r3, [r2, #0]
 8005184:	b333      	cbz	r3, 80051d4 <forward_relu+0x54>
 8005186:	6852      	ldr	r2, [r2, #4]
 8005188:	6851      	ldr	r1, [r2, #4]
 800518a:	b101      	cbz	r1, 800518e <forward_relu+0xe>
 800518c:	6809      	ldr	r1, [r1, #0]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d91d      	bls.n	80051ce <forward_relu+0x4e>
 8005192:	b4f0      	push	{r4, r5, r6, r7}
 8005194:	6917      	ldr	r7, [r2, #16]
 8005196:	b107      	cbz	r7, 800519a <forward_relu+0x1a>
 8005198:	683f      	ldr	r7, [r7, #0]
 800519a:	688c      	ldr	r4, [r1, #8]
 800519c:	69c3      	ldr	r3, [r0, #28]
 800519e:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d044      	beq.n	8005230 <forward_relu+0xb0>
 80051a6:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 80051aa:	2d01      	cmp	r5, #1
 80051ac:	d014      	beq.n	80051d8 <forward_relu+0x58>
 80051ae:	2c00      	cmp	r4, #0
 80051b0:	d074      	beq.n	800529c <forward_relu+0x11c>
 80051b2:	68ce      	ldr	r6, [r1, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80051ba:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80051be:	42a6      	cmp	r6, r4
 80051c0:	fb05 f202 	mul.w	r2, r5, r2
 80051c4:	d1f9      	bne.n	80051ba <forward_relu+0x3a>
 80051c6:	4638      	mov	r0, r7
 80051c8:	bcf0      	pop	{r4, r5, r6, r7}
 80051ca:	f7ff bf5b 	b.w	8005084 <nl_func_relu_generic_array_f32>
 80051ce:	2300      	movs	r3, #0
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	deff      	udf	#255	; 0xff
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	deff      	udf	#255	; 0xff
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	6988      	ldr	r0, [r1, #24]
 80051dc:	6896      	ldr	r6, [r2, #8]
 80051de:	ed93 7a00 	vldr	s14, [r3]
 80051e2:	6882      	ldr	r2, [r0, #8]
 80051e4:	b184      	cbz	r4, 8005208 <forward_relu+0x88>
 80051e6:	68cf      	ldr	r7, [r1, #12]
 80051e8:	462b      	mov	r3, r5
 80051ea:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80051ee:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80051f2:	42a7      	cmp	r7, r4
 80051f4:	fb01 f303 	mul.w	r3, r1, r3
 80051f8:	d1f9      	bne.n	80051ee <forward_relu+0x6e>
 80051fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051fe:	3b01      	subs	r3, #1
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	18d2      	adds	r2, r2, r3
 8005204:	441e      	add	r6, r3
 8005206:	d23f      	bcs.n	8005288 <forward_relu+0x108>
 8005208:	1d13      	adds	r3, r2, #4
 800520a:	2500      	movs	r5, #0
 800520c:	1d32      	adds	r2, r6, #4
 800520e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005212:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521a:	f1a3 0104 	sub.w	r1, r3, #4
 800521e:	d835      	bhi.n	800528c <forward_relu+0x10c>
 8005220:	ed62 7a01 	vstmdb	r2!, {s15}
 8005224:	6884      	ldr	r4, [r0, #8]
 8005226:	3b08      	subs	r3, #8
 8005228:	429c      	cmp	r4, r3
 800522a:	d82d      	bhi.n	8005288 <forward_relu+0x108>
 800522c:	460b      	mov	r3, r1
 800522e:	e7ee      	b.n	800520e <forward_relu+0x8e>
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	698d      	ldr	r5, [r1, #24]
 8005234:	6898      	ldr	r0, [r3, #8]
 8005236:	68ab      	ldr	r3, [r5, #8]
 8005238:	b184      	cbz	r4, 800525c <forward_relu+0xdc>
 800523a:	68ce      	ldr	r6, [r1, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005242:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8005246:	42a6      	cmp	r6, r4
 8005248:	fb01 f202 	mul.w	r2, r1, r2
 800524c:	d1f9      	bne.n	8005242 <forward_relu+0xc2>
 800524e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005252:	3a01      	subs	r2, #1
 8005254:	0092      	lsls	r2, r2, #2
 8005256:	189b      	adds	r3, r3, r2
 8005258:	4410      	add	r0, r2
 800525a:	d215      	bcs.n	8005288 <forward_relu+0x108>
 800525c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80052a0 <forward_relu+0x120>
 8005260:	3304      	adds	r3, #4
 8005262:	1d01      	adds	r1, r0, #4
 8005264:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005268:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800526c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005270:	bfb8      	it	lt
 8005272:	eef0 7a47 	vmovlt.f32	s15, s14
 8005276:	ed61 7a01 	vstmdb	r1!, {s15}
 800527a:	68a8      	ldr	r0, [r5, #8]
 800527c:	f1a3 0208 	sub.w	r2, r3, #8
 8005280:	4290      	cmp	r0, r2
 8005282:	f1a3 0304 	sub.w	r3, r3, #4
 8005286:	d9ed      	bls.n	8005264 <forward_relu+0xe4>
 8005288:	bcf0      	pop	{r4, r5, r6, r7}
 800528a:	4770      	bx	lr
 800528c:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005290:	6884      	ldr	r4, [r0, #8]
 8005292:	3b08      	subs	r3, #8
 8005294:	429c      	cmp	r4, r3
 8005296:	d8f7      	bhi.n	8005288 <forward_relu+0x108>
 8005298:	460b      	mov	r3, r1
 800529a:	e7b8      	b.n	800520e <forward_relu+0x8e>
 800529c:	2201      	movs	r2, #1
 800529e:	e792      	b.n	80051c6 <forward_relu+0x46>
 80052a0:	00000000 	.word	0x00000000

080052a4 <ai_check_custom_types>:
 80052a4:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <ai_check_custom_types+0x50>)
 80052a6:	b082      	sub	sp, #8
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	b118      	cbz	r0, 80052b6 <ai_check_custom_types+0x12>
 80052ae:	7803      	ldrb	r3, [r0, #0]
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d002      	beq.n	80052ba <ai_check_custom_types+0x16>
 80052b4:	2000      	movs	r0, #0
 80052b6:	b002      	add	sp, #8
 80052b8:	4770      	bx	lr
 80052ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <ai_check_custom_types+0x28>
 80052c2:	2001      	movs	r0, #1
 80052c4:	f080 0001 	eor.w	r0, r0, #1
 80052c8:	b002      	add	sp, #8
 80052ca:	4770      	bx	lr
 80052cc:	7842      	ldrb	r2, [r0, #1]
 80052ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	f100 0001 	add.w	r0, r0, #1
 80052d8:	d1f3      	bne.n	80052c2 <ai_check_custom_types+0x1e>
 80052da:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80052de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d1ed      	bne.n	80052c2 <ai_check_custom_types+0x1e>
 80052e6:	7842      	ldrb	r2, [r0, #1]
 80052e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d1e8      	bne.n	80052c2 <ai_check_custom_types+0x1e>
 80052f0:	2000      	movs	r0, #0
 80052f2:	e7e7      	b.n	80052c4 <ai_check_custom_types+0x20>
 80052f4:	080083e4 	.word	0x080083e4

080052f8 <ai_layers_init_all>:
 80052f8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80052fa:	b17a      	cbz	r2, 800531c <ai_layers_init_all+0x24>
 80052fc:	6913      	ldr	r3, [r2, #16]
 80052fe:	60d0      	str	r0, [r2, #12]
 8005300:	429a      	cmp	r2, r3
 8005302:	f04f 0201 	mov.w	r2, #1
 8005306:	d009      	beq.n	800531c <ai_layers_init_all+0x24>
 8005308:	b143      	cbz	r3, 800531c <ai_layers_init_all+0x24>
 800530a:	6919      	ldr	r1, [r3, #16]
 800530c:	60d8      	str	r0, [r3, #12]
 800530e:	4299      	cmp	r1, r3
 8005310:	f102 0201 	add.w	r2, r2, #1
 8005314:	d002      	beq.n	800531c <ai_layers_init_all+0x24>
 8005316:	460b      	mov	r3, r1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1f6      	bne.n	800530a <ai_layers_init_all+0x12>
 800531c:	4610      	mov	r0, r2
 800531e:	4770      	bx	lr

08005320 <ai_layers_post_init_all>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005324:	b18c      	cbz	r4, 800534a <ai_layers_post_init_all+0x2a>
 8005326:	2500      	movs	r5, #0
 8005328:	6863      	ldr	r3, [r4, #4]
 800532a:	f013 0f01 	tst.w	r3, #1
 800532e:	4620      	mov	r0, r4
 8005330:	d003      	beq.n	800533a <ai_layers_post_init_all+0x1a>
 8005332:	6a23      	ldr	r3, [r4, #32]
 8005334:	b10b      	cbz	r3, 800533a <ai_layers_post_init_all+0x1a>
 8005336:	4798      	blx	r3
 8005338:	3501      	adds	r5, #1
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	42a3      	cmp	r3, r4
 800533e:	d002      	beq.n	8005346 <ai_layers_post_init_all+0x26>
 8005340:	461c      	mov	r4, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f0      	bne.n	8005328 <ai_layers_post_init_all+0x8>
 8005346:	4628      	mov	r0, r5
 8005348:	bd38      	pop	{r3, r4, r5, pc}
 800534a:	4625      	mov	r5, r4
 800534c:	e7fb      	b.n	8005346 <ai_layers_post_init_all+0x26>
 800534e:	bf00      	nop

08005350 <ai_layers_forward_all>:
 8005350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005354:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8005356:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005358:	4604      	mov	r4, r0
 800535a:	2f00      	cmp	r7, #0
 800535c:	d02c      	beq.n	80053b8 <ai_layers_forward_all+0x68>
 800535e:	2d00      	cmp	r5, #0
 8005360:	d03f      	beq.n	80053e2 <ai_layers_forward_all+0x92>
 8005362:	6385      	str	r5, [r0, #56]	; 0x38
 8005364:	4629      	mov	r1, r5
 8005366:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005368:	2001      	movs	r0, #1
 800536a:	47b8      	blx	r7
 800536c:	2600      	movs	r6, #0
 800536e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005370:	46b0      	mov	r8, r6
 8005372:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005374:	2002      	movs	r0, #2
 8005376:	47b8      	blx	r7
 8005378:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800537a:	696b      	ldr	r3, [r5, #20]
 800537c:	4628      	mov	r0, r5
 800537e:	4798      	blx	r3
 8005380:	692b      	ldr	r3, [r5, #16]
 8005382:	429d      	cmp	r5, r3
 8005384:	f04f 0003 	mov.w	r0, #3
 8005388:	4619      	mov	r1, r3
 800538a:	d009      	beq.n	80053a0 <ai_layers_forward_all+0x50>
 800538c:	63a3      	str	r3, [r4, #56]	; 0x38
 800538e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005390:	47b8      	blx	r7
 8005392:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005394:	3601      	adds	r6, #1
 8005396:	2900      	cmp	r1, #0
 8005398:	d1eb      	bne.n	8005372 <ai_layers_forward_all+0x22>
 800539a:	4630      	mov	r0, r6
 800539c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a0:	2100      	movs	r1, #0
 80053a2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 80053a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80053a8:	47b8      	blx	r7
 80053aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053ac:	3601      	adds	r6, #1
 80053ae:	2900      	cmp	r1, #0
 80053b0:	d1df      	bne.n	8005372 <ai_layers_forward_all+0x22>
 80053b2:	4630      	mov	r0, r6
 80053b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b8:	b19d      	cbz	r5, 80053e2 <ai_layers_forward_all+0x92>
 80053ba:	6385      	str	r5, [r0, #56]	; 0x38
 80053bc:	463e      	mov	r6, r7
 80053be:	696b      	ldr	r3, [r5, #20]
 80053c0:	4628      	mov	r0, r5
 80053c2:	4798      	blx	r3
 80053c4:	692b      	ldr	r3, [r5, #16]
 80053c6:	42ab      	cmp	r3, r5
 80053c8:	f106 0601 	add.w	r6, r6, #1
 80053cc:	d004      	beq.n	80053d8 <ai_layers_forward_all+0x88>
 80053ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80053d0:	461d      	mov	r5, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f3      	bne.n	80053be <ai_layers_forward_all+0x6e>
 80053d6:	e7e0      	b.n	800539a <ai_layers_forward_all+0x4a>
 80053d8:	2300      	movs	r3, #0
 80053da:	63a3      	str	r3, [r4, #56]	; 0x38
 80053dc:	4630      	mov	r0, r6
 80053de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e2:	462e      	mov	r6, r5
 80053e4:	4630      	mov	r0, r6
 80053e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053ea:	bf00      	nop

080053ec <ai_array_to_buffer_fmt>:
 80053ec:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d029      	beq.n	8005448 <ai_array_to_buffer_fmt+0x5c>
 80053f4:	4a22      	ldr	r2, [pc, #136]	; (8005480 <ai_array_to_buffer_fmt+0x94>)
 80053f6:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d010      	beq.n	8005420 <ai_array_to_buffer_fmt+0x34>
 80053fe:	dd13      	ble.n	8005428 <ai_array_to_buffer_fmt+0x3c>
 8005400:	4a20      	ldr	r2, [pc, #128]	; (8005484 <ai_array_to_buffer_fmt+0x98>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00c      	beq.n	8005420 <ai_array_to_buffer_fmt+0x34>
 8005406:	dc27      	bgt.n	8005458 <ai_array_to_buffer_fmt+0x6c>
 8005408:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <ai_array_to_buffer_fmt+0x34>
 8005410:	3207      	adds	r2, #7
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <ai_array_to_buffer_fmt+0x34>
 8005416:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800541a:	4293      	cmp	r3, r2
 800541c:	d000      	beq.n	8005420 <ai_array_to_buffer_fmt+0x34>
 800541e:	2340      	movs	r3, #64	; 0x40
 8005420:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005424:	4318      	orrs	r0, r3
 8005426:	4770      	bx	lr
 8005428:	4a17      	ldr	r2, [pc, #92]	; (8005488 <ai_array_to_buffer_fmt+0x9c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d0f8      	beq.n	8005420 <ai_array_to_buffer_fmt+0x34>
 800542e:	dd1e      	ble.n	800546e <ai_array_to_buffer_fmt+0x82>
 8005430:	4a16      	ldr	r2, [pc, #88]	; (800548c <ai_array_to_buffer_fmt+0xa0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d0f4      	beq.n	8005420 <ai_array_to_buffer_fmt+0x34>
 8005436:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800543a:	4293      	cmp	r3, r2
 800543c:	d0f0      	beq.n	8005420 <ai_array_to_buffer_fmt+0x34>
 800543e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8005442:	4293      	cmp	r3, r2
 8005444:	d1eb      	bne.n	800541e <ai_array_to_buffer_fmt+0x32>
 8005446:	e7eb      	b.n	8005420 <ai_array_to_buffer_fmt+0x34>
 8005448:	4b11      	ldr	r3, [pc, #68]	; (8005490 <ai_array_to_buffer_fmt+0xa4>)
 800544a:	4003      	ands	r3, r0
 800544c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005450:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005454:	4318      	orrs	r0, r3
 8005456:	4770      	bx	lr
 8005458:	4a0e      	ldr	r2, [pc, #56]	; (8005494 <ai_array_to_buffer_fmt+0xa8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d0e0      	beq.n	8005420 <ai_array_to_buffer_fmt+0x34>
 800545e:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8005462:	4293      	cmp	r3, r2
 8005464:	d0dc      	beq.n	8005420 <ai_array_to_buffer_fmt+0x34>
 8005466:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <ai_array_to_buffer_fmt+0xac>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d1d8      	bne.n	800541e <ai_array_to_buffer_fmt+0x32>
 800546c:	e7d8      	b.n	8005420 <ai_array_to_buffer_fmt+0x34>
 800546e:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8005472:	4293      	cmp	r3, r2
 8005474:	d0d4      	beq.n	8005420 <ai_array_to_buffer_fmt+0x34>
 8005476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800547a:	4293      	cmp	r3, r2
 800547c:	d0d0      	beq.n	8005420 <ai_array_to_buffer_fmt+0x34>
 800547e:	e7ce      	b.n	800541e <ai_array_to_buffer_fmt+0x32>
 8005480:	00060440 	.word	0x00060440
 8005484:	00840840 	.word	0x00840840
 8005488:	00040447 	.word	0x00040447
 800548c:	0004084f 	.word	0x0004084f
 8005490:	00803fff 	.word	0x00803fff
 8005494:	00841040 	.word	0x00841040
 8005498:	0084084f 	.word	0x0084084f

0800549c <ai_array_get_byte_size>:
 800549c:	b1c1      	cbz	r1, 80054d0 <ai_array_get_byte_size+0x34>
 800549e:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80054a2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80054a6:	4413      	add	r3, r2
 80054a8:	fb01 f103 	mul.w	r1, r1, r3
 80054ac:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80054b0:	3107      	adds	r1, #7
 80054b2:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80054b6:	f021 0107 	bic.w	r1, r1, #7
 80054ba:	2804      	cmp	r0, #4
 80054bc:	fa21 f102 	lsr.w	r1, r1, r2
 80054c0:	d008      	beq.n	80054d4 <ai_array_get_byte_size+0x38>
 80054c2:	2808      	cmp	r0, #8
 80054c4:	d101      	bne.n	80054ca <ai_array_get_byte_size+0x2e>
 80054c6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80054ca:	3107      	adds	r1, #7
 80054cc:	08c8      	lsrs	r0, r1, #3
 80054ce:	4770      	bx	lr
 80054d0:	4608      	mov	r0, r1
 80054d2:	4770      	bx	lr
 80054d4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80054d8:	3107      	adds	r1, #7
 80054da:	08c8      	lsrs	r0, r1, #3
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop

080054e0 <__errno>:
 80054e0:	4b01      	ldr	r3, [pc, #4]	; (80054e8 <__errno+0x8>)
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000610 	.word	0x20000610

080054ec <__libc_init_array>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	4d0d      	ldr	r5, [pc, #52]	; (8005524 <__libc_init_array+0x38>)
 80054f0:	4c0d      	ldr	r4, [pc, #52]	; (8005528 <__libc_init_array+0x3c>)
 80054f2:	1b64      	subs	r4, r4, r5
 80054f4:	10a4      	asrs	r4, r4, #2
 80054f6:	2600      	movs	r6, #0
 80054f8:	42a6      	cmp	r6, r4
 80054fa:	d109      	bne.n	8005510 <__libc_init_array+0x24>
 80054fc:	4d0b      	ldr	r5, [pc, #44]	; (800552c <__libc_init_array+0x40>)
 80054fe:	4c0c      	ldr	r4, [pc, #48]	; (8005530 <__libc_init_array+0x44>)
 8005500:	f002 fef4 	bl	80082ec <_init>
 8005504:	1b64      	subs	r4, r4, r5
 8005506:	10a4      	asrs	r4, r4, #2
 8005508:	2600      	movs	r6, #0
 800550a:	42a6      	cmp	r6, r4
 800550c:	d105      	bne.n	800551a <__libc_init_array+0x2e>
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	f855 3b04 	ldr.w	r3, [r5], #4
 8005514:	4798      	blx	r3
 8005516:	3601      	adds	r6, #1
 8005518:	e7ee      	b.n	80054f8 <__libc_init_array+0xc>
 800551a:	f855 3b04 	ldr.w	r3, [r5], #4
 800551e:	4798      	blx	r3
 8005520:	3601      	adds	r6, #1
 8005522:	e7f2      	b.n	800550a <__libc_init_array+0x1e>
 8005524:	08008d5c 	.word	0x08008d5c
 8005528:	08008d5c 	.word	0x08008d5c
 800552c:	08008d5c 	.word	0x08008d5c
 8005530:	08008d60 	.word	0x08008d60

08005534 <malloc>:
 8005534:	4b02      	ldr	r3, [pc, #8]	; (8005540 <malloc+0xc>)
 8005536:	4601      	mov	r1, r0
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	f000 b869 	b.w	8005610 <_malloc_r>
 800553e:	bf00      	nop
 8005540:	20000610 	.word	0x20000610

08005544 <memcpy>:
 8005544:	440a      	add	r2, r1
 8005546:	4291      	cmp	r1, r2
 8005548:	f100 33ff 	add.w	r3, r0, #4294967295
 800554c:	d100      	bne.n	8005550 <memcpy+0xc>
 800554e:	4770      	bx	lr
 8005550:	b510      	push	{r4, lr}
 8005552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800555a:	4291      	cmp	r1, r2
 800555c:	d1f9      	bne.n	8005552 <memcpy+0xe>
 800555e:	bd10      	pop	{r4, pc}

08005560 <memset>:
 8005560:	4402      	add	r2, r0
 8005562:	4603      	mov	r3, r0
 8005564:	4293      	cmp	r3, r2
 8005566:	d100      	bne.n	800556a <memset+0xa>
 8005568:	4770      	bx	lr
 800556a:	f803 1b01 	strb.w	r1, [r3], #1
 800556e:	e7f9      	b.n	8005564 <memset+0x4>

08005570 <_free_r>:
 8005570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005572:	2900      	cmp	r1, #0
 8005574:	d048      	beq.n	8005608 <_free_r+0x98>
 8005576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800557a:	9001      	str	r0, [sp, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f1a1 0404 	sub.w	r4, r1, #4
 8005582:	bfb8      	it	lt
 8005584:	18e4      	addlt	r4, r4, r3
 8005586:	f001 fbb3 	bl	8006cf0 <__malloc_lock>
 800558a:	4a20      	ldr	r2, [pc, #128]	; (800560c <_free_r+0x9c>)
 800558c:	9801      	ldr	r0, [sp, #4]
 800558e:	6813      	ldr	r3, [r2, #0]
 8005590:	4615      	mov	r5, r2
 8005592:	b933      	cbnz	r3, 80055a2 <_free_r+0x32>
 8005594:	6063      	str	r3, [r4, #4]
 8005596:	6014      	str	r4, [r2, #0]
 8005598:	b003      	add	sp, #12
 800559a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800559e:	f001 bbad 	b.w	8006cfc <__malloc_unlock>
 80055a2:	42a3      	cmp	r3, r4
 80055a4:	d90b      	bls.n	80055be <_free_r+0x4e>
 80055a6:	6821      	ldr	r1, [r4, #0]
 80055a8:	1862      	adds	r2, r4, r1
 80055aa:	4293      	cmp	r3, r2
 80055ac:	bf04      	itt	eq
 80055ae:	681a      	ldreq	r2, [r3, #0]
 80055b0:	685b      	ldreq	r3, [r3, #4]
 80055b2:	6063      	str	r3, [r4, #4]
 80055b4:	bf04      	itt	eq
 80055b6:	1852      	addeq	r2, r2, r1
 80055b8:	6022      	streq	r2, [r4, #0]
 80055ba:	602c      	str	r4, [r5, #0]
 80055bc:	e7ec      	b.n	8005598 <_free_r+0x28>
 80055be:	461a      	mov	r2, r3
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	b10b      	cbz	r3, 80055c8 <_free_r+0x58>
 80055c4:	42a3      	cmp	r3, r4
 80055c6:	d9fa      	bls.n	80055be <_free_r+0x4e>
 80055c8:	6811      	ldr	r1, [r2, #0]
 80055ca:	1855      	adds	r5, r2, r1
 80055cc:	42a5      	cmp	r5, r4
 80055ce:	d10b      	bne.n	80055e8 <_free_r+0x78>
 80055d0:	6824      	ldr	r4, [r4, #0]
 80055d2:	4421      	add	r1, r4
 80055d4:	1854      	adds	r4, r2, r1
 80055d6:	42a3      	cmp	r3, r4
 80055d8:	6011      	str	r1, [r2, #0]
 80055da:	d1dd      	bne.n	8005598 <_free_r+0x28>
 80055dc:	681c      	ldr	r4, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	6053      	str	r3, [r2, #4]
 80055e2:	4421      	add	r1, r4
 80055e4:	6011      	str	r1, [r2, #0]
 80055e6:	e7d7      	b.n	8005598 <_free_r+0x28>
 80055e8:	d902      	bls.n	80055f0 <_free_r+0x80>
 80055ea:	230c      	movs	r3, #12
 80055ec:	6003      	str	r3, [r0, #0]
 80055ee:	e7d3      	b.n	8005598 <_free_r+0x28>
 80055f0:	6825      	ldr	r5, [r4, #0]
 80055f2:	1961      	adds	r1, r4, r5
 80055f4:	428b      	cmp	r3, r1
 80055f6:	bf04      	itt	eq
 80055f8:	6819      	ldreq	r1, [r3, #0]
 80055fa:	685b      	ldreq	r3, [r3, #4]
 80055fc:	6063      	str	r3, [r4, #4]
 80055fe:	bf04      	itt	eq
 8005600:	1949      	addeq	r1, r1, r5
 8005602:	6021      	streq	r1, [r4, #0]
 8005604:	6054      	str	r4, [r2, #4]
 8005606:	e7c7      	b.n	8005598 <_free_r+0x28>
 8005608:	b003      	add	sp, #12
 800560a:	bd30      	pop	{r4, r5, pc}
 800560c:	2000087c 	.word	0x2000087c

08005610 <_malloc_r>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	1ccd      	adds	r5, r1, #3
 8005614:	f025 0503 	bic.w	r5, r5, #3
 8005618:	3508      	adds	r5, #8
 800561a:	2d0c      	cmp	r5, #12
 800561c:	bf38      	it	cc
 800561e:	250c      	movcc	r5, #12
 8005620:	2d00      	cmp	r5, #0
 8005622:	4606      	mov	r6, r0
 8005624:	db01      	blt.n	800562a <_malloc_r+0x1a>
 8005626:	42a9      	cmp	r1, r5
 8005628:	d903      	bls.n	8005632 <_malloc_r+0x22>
 800562a:	230c      	movs	r3, #12
 800562c:	6033      	str	r3, [r6, #0]
 800562e:	2000      	movs	r0, #0
 8005630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005632:	f001 fb5d 	bl	8006cf0 <__malloc_lock>
 8005636:	4921      	ldr	r1, [pc, #132]	; (80056bc <_malloc_r+0xac>)
 8005638:	680a      	ldr	r2, [r1, #0]
 800563a:	4614      	mov	r4, r2
 800563c:	b99c      	cbnz	r4, 8005666 <_malloc_r+0x56>
 800563e:	4f20      	ldr	r7, [pc, #128]	; (80056c0 <_malloc_r+0xb0>)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	b923      	cbnz	r3, 800564e <_malloc_r+0x3e>
 8005644:	4621      	mov	r1, r4
 8005646:	4630      	mov	r0, r6
 8005648:	f000 fca6 	bl	8005f98 <_sbrk_r>
 800564c:	6038      	str	r0, [r7, #0]
 800564e:	4629      	mov	r1, r5
 8005650:	4630      	mov	r0, r6
 8005652:	f000 fca1 	bl	8005f98 <_sbrk_r>
 8005656:	1c43      	adds	r3, r0, #1
 8005658:	d123      	bne.n	80056a2 <_malloc_r+0x92>
 800565a:	230c      	movs	r3, #12
 800565c:	6033      	str	r3, [r6, #0]
 800565e:	4630      	mov	r0, r6
 8005660:	f001 fb4c 	bl	8006cfc <__malloc_unlock>
 8005664:	e7e3      	b.n	800562e <_malloc_r+0x1e>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	1b5b      	subs	r3, r3, r5
 800566a:	d417      	bmi.n	800569c <_malloc_r+0x8c>
 800566c:	2b0b      	cmp	r3, #11
 800566e:	d903      	bls.n	8005678 <_malloc_r+0x68>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	441c      	add	r4, r3
 8005674:	6025      	str	r5, [r4, #0]
 8005676:	e004      	b.n	8005682 <_malloc_r+0x72>
 8005678:	6863      	ldr	r3, [r4, #4]
 800567a:	42a2      	cmp	r2, r4
 800567c:	bf0c      	ite	eq
 800567e:	600b      	streq	r3, [r1, #0]
 8005680:	6053      	strne	r3, [r2, #4]
 8005682:	4630      	mov	r0, r6
 8005684:	f001 fb3a 	bl	8006cfc <__malloc_unlock>
 8005688:	f104 000b 	add.w	r0, r4, #11
 800568c:	1d23      	adds	r3, r4, #4
 800568e:	f020 0007 	bic.w	r0, r0, #7
 8005692:	1ac2      	subs	r2, r0, r3
 8005694:	d0cc      	beq.n	8005630 <_malloc_r+0x20>
 8005696:	1a1b      	subs	r3, r3, r0
 8005698:	50a3      	str	r3, [r4, r2]
 800569a:	e7c9      	b.n	8005630 <_malloc_r+0x20>
 800569c:	4622      	mov	r2, r4
 800569e:	6864      	ldr	r4, [r4, #4]
 80056a0:	e7cc      	b.n	800563c <_malloc_r+0x2c>
 80056a2:	1cc4      	adds	r4, r0, #3
 80056a4:	f024 0403 	bic.w	r4, r4, #3
 80056a8:	42a0      	cmp	r0, r4
 80056aa:	d0e3      	beq.n	8005674 <_malloc_r+0x64>
 80056ac:	1a21      	subs	r1, r4, r0
 80056ae:	4630      	mov	r0, r6
 80056b0:	f000 fc72 	bl	8005f98 <_sbrk_r>
 80056b4:	3001      	adds	r0, #1
 80056b6:	d1dd      	bne.n	8005674 <_malloc_r+0x64>
 80056b8:	e7cf      	b.n	800565a <_malloc_r+0x4a>
 80056ba:	bf00      	nop
 80056bc:	2000087c 	.word	0x2000087c
 80056c0:	20000880 	.word	0x20000880

080056c4 <__cvt>:
 80056c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c8:	ec55 4b10 	vmov	r4, r5, d0
 80056cc:	2d00      	cmp	r5, #0
 80056ce:	460e      	mov	r6, r1
 80056d0:	4619      	mov	r1, r3
 80056d2:	462b      	mov	r3, r5
 80056d4:	bfbb      	ittet	lt
 80056d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056da:	461d      	movlt	r5, r3
 80056dc:	2300      	movge	r3, #0
 80056de:	232d      	movlt	r3, #45	; 0x2d
 80056e0:	700b      	strb	r3, [r1, #0]
 80056e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056e8:	4691      	mov	r9, r2
 80056ea:	f023 0820 	bic.w	r8, r3, #32
 80056ee:	bfbc      	itt	lt
 80056f0:	4622      	movlt	r2, r4
 80056f2:	4614      	movlt	r4, r2
 80056f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056f8:	d005      	beq.n	8005706 <__cvt+0x42>
 80056fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056fe:	d100      	bne.n	8005702 <__cvt+0x3e>
 8005700:	3601      	adds	r6, #1
 8005702:	2102      	movs	r1, #2
 8005704:	e000      	b.n	8005708 <__cvt+0x44>
 8005706:	2103      	movs	r1, #3
 8005708:	ab03      	add	r3, sp, #12
 800570a:	9301      	str	r3, [sp, #4]
 800570c:	ab02      	add	r3, sp, #8
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	ec45 4b10 	vmov	d0, r4, r5
 8005714:	4653      	mov	r3, sl
 8005716:	4632      	mov	r2, r6
 8005718:	f000 fcfa 	bl	8006110 <_dtoa_r>
 800571c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005720:	4607      	mov	r7, r0
 8005722:	d102      	bne.n	800572a <__cvt+0x66>
 8005724:	f019 0f01 	tst.w	r9, #1
 8005728:	d022      	beq.n	8005770 <__cvt+0xac>
 800572a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800572e:	eb07 0906 	add.w	r9, r7, r6
 8005732:	d110      	bne.n	8005756 <__cvt+0x92>
 8005734:	783b      	ldrb	r3, [r7, #0]
 8005736:	2b30      	cmp	r3, #48	; 0x30
 8005738:	d10a      	bne.n	8005750 <__cvt+0x8c>
 800573a:	2200      	movs	r2, #0
 800573c:	2300      	movs	r3, #0
 800573e:	4620      	mov	r0, r4
 8005740:	4629      	mov	r1, r5
 8005742:	f7fb f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005746:	b918      	cbnz	r0, 8005750 <__cvt+0x8c>
 8005748:	f1c6 0601 	rsb	r6, r6, #1
 800574c:	f8ca 6000 	str.w	r6, [sl]
 8005750:	f8da 3000 	ldr.w	r3, [sl]
 8005754:	4499      	add	r9, r3
 8005756:	2200      	movs	r2, #0
 8005758:	2300      	movs	r3, #0
 800575a:	4620      	mov	r0, r4
 800575c:	4629      	mov	r1, r5
 800575e:	f7fb f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005762:	b108      	cbz	r0, 8005768 <__cvt+0xa4>
 8005764:	f8cd 900c 	str.w	r9, [sp, #12]
 8005768:	2230      	movs	r2, #48	; 0x30
 800576a:	9b03      	ldr	r3, [sp, #12]
 800576c:	454b      	cmp	r3, r9
 800576e:	d307      	bcc.n	8005780 <__cvt+0xbc>
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005774:	1bdb      	subs	r3, r3, r7
 8005776:	4638      	mov	r0, r7
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	b004      	add	sp, #16
 800577c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	9103      	str	r1, [sp, #12]
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	e7f0      	b.n	800576a <__cvt+0xa6>

08005788 <__exponent>:
 8005788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800578a:	4603      	mov	r3, r0
 800578c:	2900      	cmp	r1, #0
 800578e:	bfb8      	it	lt
 8005790:	4249      	neglt	r1, r1
 8005792:	f803 2b02 	strb.w	r2, [r3], #2
 8005796:	bfb4      	ite	lt
 8005798:	222d      	movlt	r2, #45	; 0x2d
 800579a:	222b      	movge	r2, #43	; 0x2b
 800579c:	2909      	cmp	r1, #9
 800579e:	7042      	strb	r2, [r0, #1]
 80057a0:	dd2a      	ble.n	80057f8 <__exponent+0x70>
 80057a2:	f10d 0407 	add.w	r4, sp, #7
 80057a6:	46a4      	mov	ip, r4
 80057a8:	270a      	movs	r7, #10
 80057aa:	46a6      	mov	lr, r4
 80057ac:	460a      	mov	r2, r1
 80057ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80057b2:	fb07 1516 	mls	r5, r7, r6, r1
 80057b6:	3530      	adds	r5, #48	; 0x30
 80057b8:	2a63      	cmp	r2, #99	; 0x63
 80057ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80057be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80057c2:	4631      	mov	r1, r6
 80057c4:	dcf1      	bgt.n	80057aa <__exponent+0x22>
 80057c6:	3130      	adds	r1, #48	; 0x30
 80057c8:	f1ae 0502 	sub.w	r5, lr, #2
 80057cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057d0:	1c44      	adds	r4, r0, #1
 80057d2:	4629      	mov	r1, r5
 80057d4:	4561      	cmp	r1, ip
 80057d6:	d30a      	bcc.n	80057ee <__exponent+0x66>
 80057d8:	f10d 0209 	add.w	r2, sp, #9
 80057dc:	eba2 020e 	sub.w	r2, r2, lr
 80057e0:	4565      	cmp	r5, ip
 80057e2:	bf88      	it	hi
 80057e4:	2200      	movhi	r2, #0
 80057e6:	4413      	add	r3, r2
 80057e8:	1a18      	subs	r0, r3, r0
 80057ea:	b003      	add	sp, #12
 80057ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057f6:	e7ed      	b.n	80057d4 <__exponent+0x4c>
 80057f8:	2330      	movs	r3, #48	; 0x30
 80057fa:	3130      	adds	r1, #48	; 0x30
 80057fc:	7083      	strb	r3, [r0, #2]
 80057fe:	70c1      	strb	r1, [r0, #3]
 8005800:	1d03      	adds	r3, r0, #4
 8005802:	e7f1      	b.n	80057e8 <__exponent+0x60>

08005804 <_printf_float>:
 8005804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005808:	ed2d 8b02 	vpush	{d8}
 800580c:	b08d      	sub	sp, #52	; 0x34
 800580e:	460c      	mov	r4, r1
 8005810:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005814:	4616      	mov	r6, r2
 8005816:	461f      	mov	r7, r3
 8005818:	4605      	mov	r5, r0
 800581a:	f001 fa65 	bl	8006ce8 <_localeconv_r>
 800581e:	f8d0 a000 	ldr.w	sl, [r0]
 8005822:	4650      	mov	r0, sl
 8005824:	f7fa fcd4 	bl	80001d0 <strlen>
 8005828:	2300      	movs	r3, #0
 800582a:	930a      	str	r3, [sp, #40]	; 0x28
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	9305      	str	r3, [sp, #20]
 8005830:	f8d8 3000 	ldr.w	r3, [r8]
 8005834:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005838:	3307      	adds	r3, #7
 800583a:	f023 0307 	bic.w	r3, r3, #7
 800583e:	f103 0208 	add.w	r2, r3, #8
 8005842:	f8c8 2000 	str.w	r2, [r8]
 8005846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800584e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005852:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005856:	9307      	str	r3, [sp, #28]
 8005858:	f8cd 8018 	str.w	r8, [sp, #24]
 800585c:	ee08 0a10 	vmov	s16, r0
 8005860:	4b9f      	ldr	r3, [pc, #636]	; (8005ae0 <_printf_float+0x2dc>)
 8005862:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005866:	f04f 32ff 	mov.w	r2, #4294967295
 800586a:	f7fb f95f 	bl	8000b2c <__aeabi_dcmpun>
 800586e:	bb88      	cbnz	r0, 80058d4 <_printf_float+0xd0>
 8005870:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005874:	4b9a      	ldr	r3, [pc, #616]	; (8005ae0 <_printf_float+0x2dc>)
 8005876:	f04f 32ff 	mov.w	r2, #4294967295
 800587a:	f7fb f939 	bl	8000af0 <__aeabi_dcmple>
 800587e:	bb48      	cbnz	r0, 80058d4 <_printf_float+0xd0>
 8005880:	2200      	movs	r2, #0
 8005882:	2300      	movs	r3, #0
 8005884:	4640      	mov	r0, r8
 8005886:	4649      	mov	r1, r9
 8005888:	f7fb f928 	bl	8000adc <__aeabi_dcmplt>
 800588c:	b110      	cbz	r0, 8005894 <_printf_float+0x90>
 800588e:	232d      	movs	r3, #45	; 0x2d
 8005890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005894:	4b93      	ldr	r3, [pc, #588]	; (8005ae4 <_printf_float+0x2e0>)
 8005896:	4894      	ldr	r0, [pc, #592]	; (8005ae8 <_printf_float+0x2e4>)
 8005898:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800589c:	bf94      	ite	ls
 800589e:	4698      	movls	r8, r3
 80058a0:	4680      	movhi	r8, r0
 80058a2:	2303      	movs	r3, #3
 80058a4:	6123      	str	r3, [r4, #16]
 80058a6:	9b05      	ldr	r3, [sp, #20]
 80058a8:	f023 0204 	bic.w	r2, r3, #4
 80058ac:	6022      	str	r2, [r4, #0]
 80058ae:	f04f 0900 	mov.w	r9, #0
 80058b2:	9700      	str	r7, [sp, #0]
 80058b4:	4633      	mov	r3, r6
 80058b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80058b8:	4621      	mov	r1, r4
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 f9d8 	bl	8005c70 <_printf_common>
 80058c0:	3001      	adds	r0, #1
 80058c2:	f040 8090 	bne.w	80059e6 <_printf_float+0x1e2>
 80058c6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ca:	b00d      	add	sp, #52	; 0x34
 80058cc:	ecbd 8b02 	vpop	{d8}
 80058d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d4:	4642      	mov	r2, r8
 80058d6:	464b      	mov	r3, r9
 80058d8:	4640      	mov	r0, r8
 80058da:	4649      	mov	r1, r9
 80058dc:	f7fb f926 	bl	8000b2c <__aeabi_dcmpun>
 80058e0:	b140      	cbz	r0, 80058f4 <_printf_float+0xf0>
 80058e2:	464b      	mov	r3, r9
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bfbc      	itt	lt
 80058e8:	232d      	movlt	r3, #45	; 0x2d
 80058ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058ee:	487f      	ldr	r0, [pc, #508]	; (8005aec <_printf_float+0x2e8>)
 80058f0:	4b7f      	ldr	r3, [pc, #508]	; (8005af0 <_printf_float+0x2ec>)
 80058f2:	e7d1      	b.n	8005898 <_printf_float+0x94>
 80058f4:	6863      	ldr	r3, [r4, #4]
 80058f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80058fa:	9206      	str	r2, [sp, #24]
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	d13f      	bne.n	8005980 <_printf_float+0x17c>
 8005900:	2306      	movs	r3, #6
 8005902:	6063      	str	r3, [r4, #4]
 8005904:	9b05      	ldr	r3, [sp, #20]
 8005906:	6861      	ldr	r1, [r4, #4]
 8005908:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800590c:	2300      	movs	r3, #0
 800590e:	9303      	str	r3, [sp, #12]
 8005910:	ab0a      	add	r3, sp, #40	; 0x28
 8005912:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005916:	ab09      	add	r3, sp, #36	; 0x24
 8005918:	ec49 8b10 	vmov	d0, r8, r9
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	6022      	str	r2, [r4, #0]
 8005920:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005924:	4628      	mov	r0, r5
 8005926:	f7ff fecd 	bl	80056c4 <__cvt>
 800592a:	9b06      	ldr	r3, [sp, #24]
 800592c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800592e:	2b47      	cmp	r3, #71	; 0x47
 8005930:	4680      	mov	r8, r0
 8005932:	d108      	bne.n	8005946 <_printf_float+0x142>
 8005934:	1cc8      	adds	r0, r1, #3
 8005936:	db02      	blt.n	800593e <_printf_float+0x13a>
 8005938:	6863      	ldr	r3, [r4, #4]
 800593a:	4299      	cmp	r1, r3
 800593c:	dd41      	ble.n	80059c2 <_printf_float+0x1be>
 800593e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005942:	fa5f fb8b 	uxtb.w	fp, fp
 8005946:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800594a:	d820      	bhi.n	800598e <_printf_float+0x18a>
 800594c:	3901      	subs	r1, #1
 800594e:	465a      	mov	r2, fp
 8005950:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005954:	9109      	str	r1, [sp, #36]	; 0x24
 8005956:	f7ff ff17 	bl	8005788 <__exponent>
 800595a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800595c:	1813      	adds	r3, r2, r0
 800595e:	2a01      	cmp	r2, #1
 8005960:	4681      	mov	r9, r0
 8005962:	6123      	str	r3, [r4, #16]
 8005964:	dc02      	bgt.n	800596c <_printf_float+0x168>
 8005966:	6822      	ldr	r2, [r4, #0]
 8005968:	07d2      	lsls	r2, r2, #31
 800596a:	d501      	bpl.n	8005970 <_printf_float+0x16c>
 800596c:	3301      	adds	r3, #1
 800596e:	6123      	str	r3, [r4, #16]
 8005970:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005974:	2b00      	cmp	r3, #0
 8005976:	d09c      	beq.n	80058b2 <_printf_float+0xae>
 8005978:	232d      	movs	r3, #45	; 0x2d
 800597a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800597e:	e798      	b.n	80058b2 <_printf_float+0xae>
 8005980:	9a06      	ldr	r2, [sp, #24]
 8005982:	2a47      	cmp	r2, #71	; 0x47
 8005984:	d1be      	bne.n	8005904 <_printf_float+0x100>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1bc      	bne.n	8005904 <_printf_float+0x100>
 800598a:	2301      	movs	r3, #1
 800598c:	e7b9      	b.n	8005902 <_printf_float+0xfe>
 800598e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005992:	d118      	bne.n	80059c6 <_printf_float+0x1c2>
 8005994:	2900      	cmp	r1, #0
 8005996:	6863      	ldr	r3, [r4, #4]
 8005998:	dd0b      	ble.n	80059b2 <_printf_float+0x1ae>
 800599a:	6121      	str	r1, [r4, #16]
 800599c:	b913      	cbnz	r3, 80059a4 <_printf_float+0x1a0>
 800599e:	6822      	ldr	r2, [r4, #0]
 80059a0:	07d0      	lsls	r0, r2, #31
 80059a2:	d502      	bpl.n	80059aa <_printf_float+0x1a6>
 80059a4:	3301      	adds	r3, #1
 80059a6:	440b      	add	r3, r1
 80059a8:	6123      	str	r3, [r4, #16]
 80059aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80059ac:	f04f 0900 	mov.w	r9, #0
 80059b0:	e7de      	b.n	8005970 <_printf_float+0x16c>
 80059b2:	b913      	cbnz	r3, 80059ba <_printf_float+0x1b6>
 80059b4:	6822      	ldr	r2, [r4, #0]
 80059b6:	07d2      	lsls	r2, r2, #31
 80059b8:	d501      	bpl.n	80059be <_printf_float+0x1ba>
 80059ba:	3302      	adds	r3, #2
 80059bc:	e7f4      	b.n	80059a8 <_printf_float+0x1a4>
 80059be:	2301      	movs	r3, #1
 80059c0:	e7f2      	b.n	80059a8 <_printf_float+0x1a4>
 80059c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80059c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c8:	4299      	cmp	r1, r3
 80059ca:	db05      	blt.n	80059d8 <_printf_float+0x1d4>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	6121      	str	r1, [r4, #16]
 80059d0:	07d8      	lsls	r0, r3, #31
 80059d2:	d5ea      	bpl.n	80059aa <_printf_float+0x1a6>
 80059d4:	1c4b      	adds	r3, r1, #1
 80059d6:	e7e7      	b.n	80059a8 <_printf_float+0x1a4>
 80059d8:	2900      	cmp	r1, #0
 80059da:	bfd4      	ite	le
 80059dc:	f1c1 0202 	rsble	r2, r1, #2
 80059e0:	2201      	movgt	r2, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	e7e0      	b.n	80059a8 <_printf_float+0x1a4>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	055a      	lsls	r2, r3, #21
 80059ea:	d407      	bmi.n	80059fc <_printf_float+0x1f8>
 80059ec:	6923      	ldr	r3, [r4, #16]
 80059ee:	4642      	mov	r2, r8
 80059f0:	4631      	mov	r1, r6
 80059f2:	4628      	mov	r0, r5
 80059f4:	47b8      	blx	r7
 80059f6:	3001      	adds	r0, #1
 80059f8:	d12c      	bne.n	8005a54 <_printf_float+0x250>
 80059fa:	e764      	b.n	80058c6 <_printf_float+0xc2>
 80059fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a00:	f240 80e0 	bls.w	8005bc4 <_printf_float+0x3c0>
 8005a04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f7fb f85c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	d034      	beq.n	8005a7e <_printf_float+0x27a>
 8005a14:	4a37      	ldr	r2, [pc, #220]	; (8005af4 <_printf_float+0x2f0>)
 8005a16:	2301      	movs	r3, #1
 8005a18:	4631      	mov	r1, r6
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	47b8      	blx	r7
 8005a1e:	3001      	adds	r0, #1
 8005a20:	f43f af51 	beq.w	80058c6 <_printf_float+0xc2>
 8005a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	db02      	blt.n	8005a32 <_printf_float+0x22e>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	07d8      	lsls	r0, r3, #31
 8005a30:	d510      	bpl.n	8005a54 <_printf_float+0x250>
 8005a32:	ee18 3a10 	vmov	r3, s16
 8005a36:	4652      	mov	r2, sl
 8005a38:	4631      	mov	r1, r6
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	47b8      	blx	r7
 8005a3e:	3001      	adds	r0, #1
 8005a40:	f43f af41 	beq.w	80058c6 <_printf_float+0xc2>
 8005a44:	f04f 0800 	mov.w	r8, #0
 8005a48:	f104 091a 	add.w	r9, r4, #26
 8005a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	4543      	cmp	r3, r8
 8005a52:	dc09      	bgt.n	8005a68 <_printf_float+0x264>
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	079b      	lsls	r3, r3, #30
 8005a58:	f100 8105 	bmi.w	8005c66 <_printf_float+0x462>
 8005a5c:	68e0      	ldr	r0, [r4, #12]
 8005a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a60:	4298      	cmp	r0, r3
 8005a62:	bfb8      	it	lt
 8005a64:	4618      	movlt	r0, r3
 8005a66:	e730      	b.n	80058ca <_printf_float+0xc6>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	464a      	mov	r2, r9
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4628      	mov	r0, r5
 8005a70:	47b8      	blx	r7
 8005a72:	3001      	adds	r0, #1
 8005a74:	f43f af27 	beq.w	80058c6 <_printf_float+0xc2>
 8005a78:	f108 0801 	add.w	r8, r8, #1
 8005a7c:	e7e6      	b.n	8005a4c <_printf_float+0x248>
 8005a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	dc39      	bgt.n	8005af8 <_printf_float+0x2f4>
 8005a84:	4a1b      	ldr	r2, [pc, #108]	; (8005af4 <_printf_float+0x2f0>)
 8005a86:	2301      	movs	r3, #1
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	47b8      	blx	r7
 8005a8e:	3001      	adds	r0, #1
 8005a90:	f43f af19 	beq.w	80058c6 <_printf_float+0xc2>
 8005a94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	d102      	bne.n	8005aa2 <_printf_float+0x29e>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	07d9      	lsls	r1, r3, #31
 8005aa0:	d5d8      	bpl.n	8005a54 <_printf_float+0x250>
 8005aa2:	ee18 3a10 	vmov	r3, s16
 8005aa6:	4652      	mov	r2, sl
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4628      	mov	r0, r5
 8005aac:	47b8      	blx	r7
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f43f af09 	beq.w	80058c6 <_printf_float+0xc2>
 8005ab4:	f04f 0900 	mov.w	r9, #0
 8005ab8:	f104 0a1a 	add.w	sl, r4, #26
 8005abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005abe:	425b      	negs	r3, r3
 8005ac0:	454b      	cmp	r3, r9
 8005ac2:	dc01      	bgt.n	8005ac8 <_printf_float+0x2c4>
 8005ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac6:	e792      	b.n	80059ee <_printf_float+0x1ea>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	4652      	mov	r2, sl
 8005acc:	4631      	mov	r1, r6
 8005ace:	4628      	mov	r0, r5
 8005ad0:	47b8      	blx	r7
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	f43f aef7 	beq.w	80058c6 <_printf_float+0xc2>
 8005ad8:	f109 0901 	add.w	r9, r9, #1
 8005adc:	e7ee      	b.n	8005abc <_printf_float+0x2b8>
 8005ade:	bf00      	nop
 8005ae0:	7fefffff 	.word	0x7fefffff
 8005ae4:	08008978 	.word	0x08008978
 8005ae8:	0800897c 	.word	0x0800897c
 8005aec:	08008984 	.word	0x08008984
 8005af0:	08008980 	.word	0x08008980
 8005af4:	08008988 	.word	0x08008988
 8005af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005afa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005afc:	429a      	cmp	r2, r3
 8005afe:	bfa8      	it	ge
 8005b00:	461a      	movge	r2, r3
 8005b02:	2a00      	cmp	r2, #0
 8005b04:	4691      	mov	r9, r2
 8005b06:	dc37      	bgt.n	8005b78 <_printf_float+0x374>
 8005b08:	f04f 0b00 	mov.w	fp, #0
 8005b0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b10:	f104 021a 	add.w	r2, r4, #26
 8005b14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b16:	9305      	str	r3, [sp, #20]
 8005b18:	eba3 0309 	sub.w	r3, r3, r9
 8005b1c:	455b      	cmp	r3, fp
 8005b1e:	dc33      	bgt.n	8005b88 <_printf_float+0x384>
 8005b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b24:	429a      	cmp	r2, r3
 8005b26:	db3b      	blt.n	8005ba0 <_printf_float+0x39c>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	07da      	lsls	r2, r3, #31
 8005b2c:	d438      	bmi.n	8005ba0 <_printf_float+0x39c>
 8005b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b30:	9b05      	ldr	r3, [sp, #20]
 8005b32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	eba2 0901 	sub.w	r9, r2, r1
 8005b3a:	4599      	cmp	r9, r3
 8005b3c:	bfa8      	it	ge
 8005b3e:	4699      	movge	r9, r3
 8005b40:	f1b9 0f00 	cmp.w	r9, #0
 8005b44:	dc35      	bgt.n	8005bb2 <_printf_float+0x3ae>
 8005b46:	f04f 0800 	mov.w	r8, #0
 8005b4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b4e:	f104 0a1a 	add.w	sl, r4, #26
 8005b52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b56:	1a9b      	subs	r3, r3, r2
 8005b58:	eba3 0309 	sub.w	r3, r3, r9
 8005b5c:	4543      	cmp	r3, r8
 8005b5e:	f77f af79 	ble.w	8005a54 <_printf_float+0x250>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4652      	mov	r2, sl
 8005b66:	4631      	mov	r1, r6
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	f43f aeaa 	beq.w	80058c6 <_printf_float+0xc2>
 8005b72:	f108 0801 	add.w	r8, r8, #1
 8005b76:	e7ec      	b.n	8005b52 <_printf_float+0x34e>
 8005b78:	4613      	mov	r3, r2
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	3001      	adds	r0, #1
 8005b84:	d1c0      	bne.n	8005b08 <_printf_float+0x304>
 8005b86:	e69e      	b.n	80058c6 <_printf_float+0xc2>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	9205      	str	r2, [sp, #20]
 8005b90:	47b8      	blx	r7
 8005b92:	3001      	adds	r0, #1
 8005b94:	f43f ae97 	beq.w	80058c6 <_printf_float+0xc2>
 8005b98:	9a05      	ldr	r2, [sp, #20]
 8005b9a:	f10b 0b01 	add.w	fp, fp, #1
 8005b9e:	e7b9      	b.n	8005b14 <_printf_float+0x310>
 8005ba0:	ee18 3a10 	vmov	r3, s16
 8005ba4:	4652      	mov	r2, sl
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4628      	mov	r0, r5
 8005baa:	47b8      	blx	r7
 8005bac:	3001      	adds	r0, #1
 8005bae:	d1be      	bne.n	8005b2e <_printf_float+0x32a>
 8005bb0:	e689      	b.n	80058c6 <_printf_float+0xc2>
 8005bb2:	9a05      	ldr	r2, [sp, #20]
 8005bb4:	464b      	mov	r3, r9
 8005bb6:	4442      	add	r2, r8
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	d1c1      	bne.n	8005b46 <_printf_float+0x342>
 8005bc2:	e680      	b.n	80058c6 <_printf_float+0xc2>
 8005bc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bc6:	2a01      	cmp	r2, #1
 8005bc8:	dc01      	bgt.n	8005bce <_printf_float+0x3ca>
 8005bca:	07db      	lsls	r3, r3, #31
 8005bcc:	d538      	bpl.n	8005c40 <_printf_float+0x43c>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	47b8      	blx	r7
 8005bd8:	3001      	adds	r0, #1
 8005bda:	f43f ae74 	beq.w	80058c6 <_printf_float+0xc2>
 8005bde:	ee18 3a10 	vmov	r3, s16
 8005be2:	4652      	mov	r2, sl
 8005be4:	4631      	mov	r1, r6
 8005be6:	4628      	mov	r0, r5
 8005be8:	47b8      	blx	r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	f43f ae6b 	beq.w	80058c6 <_printf_float+0xc2>
 8005bf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f7fa ff66 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bfc:	b9d8      	cbnz	r0, 8005c36 <_printf_float+0x432>
 8005bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c00:	f108 0201 	add.w	r2, r8, #1
 8005c04:	3b01      	subs	r3, #1
 8005c06:	4631      	mov	r1, r6
 8005c08:	4628      	mov	r0, r5
 8005c0a:	47b8      	blx	r7
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d10e      	bne.n	8005c2e <_printf_float+0x42a>
 8005c10:	e659      	b.n	80058c6 <_printf_float+0xc2>
 8005c12:	2301      	movs	r3, #1
 8005c14:	4652      	mov	r2, sl
 8005c16:	4631      	mov	r1, r6
 8005c18:	4628      	mov	r0, r5
 8005c1a:	47b8      	blx	r7
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	f43f ae52 	beq.w	80058c6 <_printf_float+0xc2>
 8005c22:	f108 0801 	add.w	r8, r8, #1
 8005c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	4543      	cmp	r3, r8
 8005c2c:	dcf1      	bgt.n	8005c12 <_printf_float+0x40e>
 8005c2e:	464b      	mov	r3, r9
 8005c30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c34:	e6dc      	b.n	80059f0 <_printf_float+0x1ec>
 8005c36:	f04f 0800 	mov.w	r8, #0
 8005c3a:	f104 0a1a 	add.w	sl, r4, #26
 8005c3e:	e7f2      	b.n	8005c26 <_printf_float+0x422>
 8005c40:	2301      	movs	r3, #1
 8005c42:	4642      	mov	r2, r8
 8005c44:	e7df      	b.n	8005c06 <_printf_float+0x402>
 8005c46:	2301      	movs	r3, #1
 8005c48:	464a      	mov	r2, r9
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	47b8      	blx	r7
 8005c50:	3001      	adds	r0, #1
 8005c52:	f43f ae38 	beq.w	80058c6 <_printf_float+0xc2>
 8005c56:	f108 0801 	add.w	r8, r8, #1
 8005c5a:	68e3      	ldr	r3, [r4, #12]
 8005c5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c5e:	1a5b      	subs	r3, r3, r1
 8005c60:	4543      	cmp	r3, r8
 8005c62:	dcf0      	bgt.n	8005c46 <_printf_float+0x442>
 8005c64:	e6fa      	b.n	8005a5c <_printf_float+0x258>
 8005c66:	f04f 0800 	mov.w	r8, #0
 8005c6a:	f104 0919 	add.w	r9, r4, #25
 8005c6e:	e7f4      	b.n	8005c5a <_printf_float+0x456>

08005c70 <_printf_common>:
 8005c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	4616      	mov	r6, r2
 8005c76:	4699      	mov	r9, r3
 8005c78:	688a      	ldr	r2, [r1, #8]
 8005c7a:	690b      	ldr	r3, [r1, #16]
 8005c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c80:	4293      	cmp	r3, r2
 8005c82:	bfb8      	it	lt
 8005c84:	4613      	movlt	r3, r2
 8005c86:	6033      	str	r3, [r6, #0]
 8005c88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c8c:	4607      	mov	r7, r0
 8005c8e:	460c      	mov	r4, r1
 8005c90:	b10a      	cbz	r2, 8005c96 <_printf_common+0x26>
 8005c92:	3301      	adds	r3, #1
 8005c94:	6033      	str	r3, [r6, #0]
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	0699      	lsls	r1, r3, #26
 8005c9a:	bf42      	ittt	mi
 8005c9c:	6833      	ldrmi	r3, [r6, #0]
 8005c9e:	3302      	addmi	r3, #2
 8005ca0:	6033      	strmi	r3, [r6, #0]
 8005ca2:	6825      	ldr	r5, [r4, #0]
 8005ca4:	f015 0506 	ands.w	r5, r5, #6
 8005ca8:	d106      	bne.n	8005cb8 <_printf_common+0x48>
 8005caa:	f104 0a19 	add.w	sl, r4, #25
 8005cae:	68e3      	ldr	r3, [r4, #12]
 8005cb0:	6832      	ldr	r2, [r6, #0]
 8005cb2:	1a9b      	subs	r3, r3, r2
 8005cb4:	42ab      	cmp	r3, r5
 8005cb6:	dc26      	bgt.n	8005d06 <_printf_common+0x96>
 8005cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cbc:	1e13      	subs	r3, r2, #0
 8005cbe:	6822      	ldr	r2, [r4, #0]
 8005cc0:	bf18      	it	ne
 8005cc2:	2301      	movne	r3, #1
 8005cc4:	0692      	lsls	r2, r2, #26
 8005cc6:	d42b      	bmi.n	8005d20 <_printf_common+0xb0>
 8005cc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ccc:	4649      	mov	r1, r9
 8005cce:	4638      	mov	r0, r7
 8005cd0:	47c0      	blx	r8
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	d01e      	beq.n	8005d14 <_printf_common+0xa4>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	68e5      	ldr	r5, [r4, #12]
 8005cda:	6832      	ldr	r2, [r6, #0]
 8005cdc:	f003 0306 	and.w	r3, r3, #6
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	bf08      	it	eq
 8005ce4:	1aad      	subeq	r5, r5, r2
 8005ce6:	68a3      	ldr	r3, [r4, #8]
 8005ce8:	6922      	ldr	r2, [r4, #16]
 8005cea:	bf0c      	ite	eq
 8005cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cf0:	2500      	movne	r5, #0
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	bfc4      	itt	gt
 8005cf6:	1a9b      	subgt	r3, r3, r2
 8005cf8:	18ed      	addgt	r5, r5, r3
 8005cfa:	2600      	movs	r6, #0
 8005cfc:	341a      	adds	r4, #26
 8005cfe:	42b5      	cmp	r5, r6
 8005d00:	d11a      	bne.n	8005d38 <_printf_common+0xc8>
 8005d02:	2000      	movs	r0, #0
 8005d04:	e008      	b.n	8005d18 <_printf_common+0xa8>
 8005d06:	2301      	movs	r3, #1
 8005d08:	4652      	mov	r2, sl
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	47c0      	blx	r8
 8005d10:	3001      	adds	r0, #1
 8005d12:	d103      	bne.n	8005d1c <_printf_common+0xac>
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1c:	3501      	adds	r5, #1
 8005d1e:	e7c6      	b.n	8005cae <_printf_common+0x3e>
 8005d20:	18e1      	adds	r1, r4, r3
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	2030      	movs	r0, #48	; 0x30
 8005d26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d2a:	4422      	add	r2, r4
 8005d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d34:	3302      	adds	r3, #2
 8005d36:	e7c7      	b.n	8005cc8 <_printf_common+0x58>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4622      	mov	r2, r4
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	4638      	mov	r0, r7
 8005d40:	47c0      	blx	r8
 8005d42:	3001      	adds	r0, #1
 8005d44:	d0e6      	beq.n	8005d14 <_printf_common+0xa4>
 8005d46:	3601      	adds	r6, #1
 8005d48:	e7d9      	b.n	8005cfe <_printf_common+0x8e>
	...

08005d4c <_printf_i>:
 8005d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d50:	460c      	mov	r4, r1
 8005d52:	4691      	mov	r9, r2
 8005d54:	7e27      	ldrb	r7, [r4, #24]
 8005d56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d58:	2f78      	cmp	r7, #120	; 0x78
 8005d5a:	4680      	mov	r8, r0
 8005d5c:	469a      	mov	sl, r3
 8005d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d62:	d807      	bhi.n	8005d74 <_printf_i+0x28>
 8005d64:	2f62      	cmp	r7, #98	; 0x62
 8005d66:	d80a      	bhi.n	8005d7e <_printf_i+0x32>
 8005d68:	2f00      	cmp	r7, #0
 8005d6a:	f000 80d8 	beq.w	8005f1e <_printf_i+0x1d2>
 8005d6e:	2f58      	cmp	r7, #88	; 0x58
 8005d70:	f000 80a3 	beq.w	8005eba <_printf_i+0x16e>
 8005d74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d7c:	e03a      	b.n	8005df4 <_printf_i+0xa8>
 8005d7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d82:	2b15      	cmp	r3, #21
 8005d84:	d8f6      	bhi.n	8005d74 <_printf_i+0x28>
 8005d86:	a001      	add	r0, pc, #4	; (adr r0, 8005d8c <_printf_i+0x40>)
 8005d88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d8c:	08005de5 	.word	0x08005de5
 8005d90:	08005df9 	.word	0x08005df9
 8005d94:	08005d75 	.word	0x08005d75
 8005d98:	08005d75 	.word	0x08005d75
 8005d9c:	08005d75 	.word	0x08005d75
 8005da0:	08005d75 	.word	0x08005d75
 8005da4:	08005df9 	.word	0x08005df9
 8005da8:	08005d75 	.word	0x08005d75
 8005dac:	08005d75 	.word	0x08005d75
 8005db0:	08005d75 	.word	0x08005d75
 8005db4:	08005d75 	.word	0x08005d75
 8005db8:	08005f05 	.word	0x08005f05
 8005dbc:	08005e29 	.word	0x08005e29
 8005dc0:	08005ee7 	.word	0x08005ee7
 8005dc4:	08005d75 	.word	0x08005d75
 8005dc8:	08005d75 	.word	0x08005d75
 8005dcc:	08005f27 	.word	0x08005f27
 8005dd0:	08005d75 	.word	0x08005d75
 8005dd4:	08005e29 	.word	0x08005e29
 8005dd8:	08005d75 	.word	0x08005d75
 8005ddc:	08005d75 	.word	0x08005d75
 8005de0:	08005eef 	.word	0x08005eef
 8005de4:	680b      	ldr	r3, [r1, #0]
 8005de6:	1d1a      	adds	r2, r3, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	600a      	str	r2, [r1, #0]
 8005dec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005df0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0a3      	b.n	8005f40 <_printf_i+0x1f4>
 8005df8:	6825      	ldr	r5, [r4, #0]
 8005dfa:	6808      	ldr	r0, [r1, #0]
 8005dfc:	062e      	lsls	r6, r5, #24
 8005dfe:	f100 0304 	add.w	r3, r0, #4
 8005e02:	d50a      	bpl.n	8005e1a <_printf_i+0xce>
 8005e04:	6805      	ldr	r5, [r0, #0]
 8005e06:	600b      	str	r3, [r1, #0]
 8005e08:	2d00      	cmp	r5, #0
 8005e0a:	da03      	bge.n	8005e14 <_printf_i+0xc8>
 8005e0c:	232d      	movs	r3, #45	; 0x2d
 8005e0e:	426d      	negs	r5, r5
 8005e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e14:	485e      	ldr	r0, [pc, #376]	; (8005f90 <_printf_i+0x244>)
 8005e16:	230a      	movs	r3, #10
 8005e18:	e019      	b.n	8005e4e <_printf_i+0x102>
 8005e1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e1e:	6805      	ldr	r5, [r0, #0]
 8005e20:	600b      	str	r3, [r1, #0]
 8005e22:	bf18      	it	ne
 8005e24:	b22d      	sxthne	r5, r5
 8005e26:	e7ef      	b.n	8005e08 <_printf_i+0xbc>
 8005e28:	680b      	ldr	r3, [r1, #0]
 8005e2a:	6825      	ldr	r5, [r4, #0]
 8005e2c:	1d18      	adds	r0, r3, #4
 8005e2e:	6008      	str	r0, [r1, #0]
 8005e30:	0628      	lsls	r0, r5, #24
 8005e32:	d501      	bpl.n	8005e38 <_printf_i+0xec>
 8005e34:	681d      	ldr	r5, [r3, #0]
 8005e36:	e002      	b.n	8005e3e <_printf_i+0xf2>
 8005e38:	0669      	lsls	r1, r5, #25
 8005e3a:	d5fb      	bpl.n	8005e34 <_printf_i+0xe8>
 8005e3c:	881d      	ldrh	r5, [r3, #0]
 8005e3e:	4854      	ldr	r0, [pc, #336]	; (8005f90 <_printf_i+0x244>)
 8005e40:	2f6f      	cmp	r7, #111	; 0x6f
 8005e42:	bf0c      	ite	eq
 8005e44:	2308      	moveq	r3, #8
 8005e46:	230a      	movne	r3, #10
 8005e48:	2100      	movs	r1, #0
 8005e4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e4e:	6866      	ldr	r6, [r4, #4]
 8005e50:	60a6      	str	r6, [r4, #8]
 8005e52:	2e00      	cmp	r6, #0
 8005e54:	bfa2      	ittt	ge
 8005e56:	6821      	ldrge	r1, [r4, #0]
 8005e58:	f021 0104 	bicge.w	r1, r1, #4
 8005e5c:	6021      	strge	r1, [r4, #0]
 8005e5e:	b90d      	cbnz	r5, 8005e64 <_printf_i+0x118>
 8005e60:	2e00      	cmp	r6, #0
 8005e62:	d04d      	beq.n	8005f00 <_printf_i+0x1b4>
 8005e64:	4616      	mov	r6, r2
 8005e66:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e6a:	fb03 5711 	mls	r7, r3, r1, r5
 8005e6e:	5dc7      	ldrb	r7, [r0, r7]
 8005e70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e74:	462f      	mov	r7, r5
 8005e76:	42bb      	cmp	r3, r7
 8005e78:	460d      	mov	r5, r1
 8005e7a:	d9f4      	bls.n	8005e66 <_printf_i+0x11a>
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d10b      	bne.n	8005e98 <_printf_i+0x14c>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	07df      	lsls	r7, r3, #31
 8005e84:	d508      	bpl.n	8005e98 <_printf_i+0x14c>
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	6861      	ldr	r1, [r4, #4]
 8005e8a:	4299      	cmp	r1, r3
 8005e8c:	bfde      	ittt	le
 8005e8e:	2330      	movle	r3, #48	; 0x30
 8005e90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e98:	1b92      	subs	r2, r2, r6
 8005e9a:	6122      	str	r2, [r4, #16]
 8005e9c:	f8cd a000 	str.w	sl, [sp]
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	aa03      	add	r2, sp, #12
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	f7ff fee2 	bl	8005c70 <_printf_common>
 8005eac:	3001      	adds	r0, #1
 8005eae:	d14c      	bne.n	8005f4a <_printf_i+0x1fe>
 8005eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb4:	b004      	add	sp, #16
 8005eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eba:	4835      	ldr	r0, [pc, #212]	; (8005f90 <_printf_i+0x244>)
 8005ebc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	680e      	ldr	r6, [r1, #0]
 8005ec4:	061f      	lsls	r7, r3, #24
 8005ec6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005eca:	600e      	str	r6, [r1, #0]
 8005ecc:	d514      	bpl.n	8005ef8 <_printf_i+0x1ac>
 8005ece:	07d9      	lsls	r1, r3, #31
 8005ed0:	bf44      	itt	mi
 8005ed2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ed6:	6023      	strmi	r3, [r4, #0]
 8005ed8:	b91d      	cbnz	r5, 8005ee2 <_printf_i+0x196>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	f023 0320 	bic.w	r3, r3, #32
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	2310      	movs	r3, #16
 8005ee4:	e7b0      	b.n	8005e48 <_printf_i+0xfc>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	f043 0320 	orr.w	r3, r3, #32
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	2378      	movs	r3, #120	; 0x78
 8005ef0:	4828      	ldr	r0, [pc, #160]	; (8005f94 <_printf_i+0x248>)
 8005ef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ef6:	e7e3      	b.n	8005ec0 <_printf_i+0x174>
 8005ef8:	065e      	lsls	r6, r3, #25
 8005efa:	bf48      	it	mi
 8005efc:	b2ad      	uxthmi	r5, r5
 8005efe:	e7e6      	b.n	8005ece <_printf_i+0x182>
 8005f00:	4616      	mov	r6, r2
 8005f02:	e7bb      	b.n	8005e7c <_printf_i+0x130>
 8005f04:	680b      	ldr	r3, [r1, #0]
 8005f06:	6826      	ldr	r6, [r4, #0]
 8005f08:	6960      	ldr	r0, [r4, #20]
 8005f0a:	1d1d      	adds	r5, r3, #4
 8005f0c:	600d      	str	r5, [r1, #0]
 8005f0e:	0635      	lsls	r5, r6, #24
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	d501      	bpl.n	8005f18 <_printf_i+0x1cc>
 8005f14:	6018      	str	r0, [r3, #0]
 8005f16:	e002      	b.n	8005f1e <_printf_i+0x1d2>
 8005f18:	0671      	lsls	r1, r6, #25
 8005f1a:	d5fb      	bpl.n	8005f14 <_printf_i+0x1c8>
 8005f1c:	8018      	strh	r0, [r3, #0]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	4616      	mov	r6, r2
 8005f24:	e7ba      	b.n	8005e9c <_printf_i+0x150>
 8005f26:	680b      	ldr	r3, [r1, #0]
 8005f28:	1d1a      	adds	r2, r3, #4
 8005f2a:	600a      	str	r2, [r1, #0]
 8005f2c:	681e      	ldr	r6, [r3, #0]
 8005f2e:	6862      	ldr	r2, [r4, #4]
 8005f30:	2100      	movs	r1, #0
 8005f32:	4630      	mov	r0, r6
 8005f34:	f7fa f954 	bl	80001e0 <memchr>
 8005f38:	b108      	cbz	r0, 8005f3e <_printf_i+0x1f2>
 8005f3a:	1b80      	subs	r0, r0, r6
 8005f3c:	6060      	str	r0, [r4, #4]
 8005f3e:	6863      	ldr	r3, [r4, #4]
 8005f40:	6123      	str	r3, [r4, #16]
 8005f42:	2300      	movs	r3, #0
 8005f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f48:	e7a8      	b.n	8005e9c <_printf_i+0x150>
 8005f4a:	6923      	ldr	r3, [r4, #16]
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4640      	mov	r0, r8
 8005f52:	47d0      	blx	sl
 8005f54:	3001      	adds	r0, #1
 8005f56:	d0ab      	beq.n	8005eb0 <_printf_i+0x164>
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	079b      	lsls	r3, r3, #30
 8005f5c:	d413      	bmi.n	8005f86 <_printf_i+0x23a>
 8005f5e:	68e0      	ldr	r0, [r4, #12]
 8005f60:	9b03      	ldr	r3, [sp, #12]
 8005f62:	4298      	cmp	r0, r3
 8005f64:	bfb8      	it	lt
 8005f66:	4618      	movlt	r0, r3
 8005f68:	e7a4      	b.n	8005eb4 <_printf_i+0x168>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4632      	mov	r2, r6
 8005f6e:	4649      	mov	r1, r9
 8005f70:	4640      	mov	r0, r8
 8005f72:	47d0      	blx	sl
 8005f74:	3001      	adds	r0, #1
 8005f76:	d09b      	beq.n	8005eb0 <_printf_i+0x164>
 8005f78:	3501      	adds	r5, #1
 8005f7a:	68e3      	ldr	r3, [r4, #12]
 8005f7c:	9903      	ldr	r1, [sp, #12]
 8005f7e:	1a5b      	subs	r3, r3, r1
 8005f80:	42ab      	cmp	r3, r5
 8005f82:	dcf2      	bgt.n	8005f6a <_printf_i+0x21e>
 8005f84:	e7eb      	b.n	8005f5e <_printf_i+0x212>
 8005f86:	2500      	movs	r5, #0
 8005f88:	f104 0619 	add.w	r6, r4, #25
 8005f8c:	e7f5      	b.n	8005f7a <_printf_i+0x22e>
 8005f8e:	bf00      	nop
 8005f90:	0800898a 	.word	0x0800898a
 8005f94:	0800899b 	.word	0x0800899b

08005f98 <_sbrk_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d06      	ldr	r5, [pc, #24]	; (8005fb4 <_sbrk_r+0x1c>)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	602b      	str	r3, [r5, #0]
 8005fa4:	f7fb faba 	bl	800151c <_sbrk>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_sbrk_r+0x1a>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_sbrk_r+0x1a>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	2000097c 	.word	0x2000097c

08005fb8 <siprintf>:
 8005fb8:	b40e      	push	{r1, r2, r3}
 8005fba:	b500      	push	{lr}
 8005fbc:	b09c      	sub	sp, #112	; 0x70
 8005fbe:	ab1d      	add	r3, sp, #116	; 0x74
 8005fc0:	9002      	str	r0, [sp, #8]
 8005fc2:	9006      	str	r0, [sp, #24]
 8005fc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fc8:	4809      	ldr	r0, [pc, #36]	; (8005ff0 <siprintf+0x38>)
 8005fca:	9107      	str	r1, [sp, #28]
 8005fcc:	9104      	str	r1, [sp, #16]
 8005fce:	4909      	ldr	r1, [pc, #36]	; (8005ff4 <siprintf+0x3c>)
 8005fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fd4:	9105      	str	r1, [sp, #20]
 8005fd6:	6800      	ldr	r0, [r0, #0]
 8005fd8:	9301      	str	r3, [sp, #4]
 8005fda:	a902      	add	r1, sp, #8
 8005fdc:	f001 faa2 	bl	8007524 <_svfiprintf_r>
 8005fe0:	9b02      	ldr	r3, [sp, #8]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	b01c      	add	sp, #112	; 0x70
 8005fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fec:	b003      	add	sp, #12
 8005fee:	4770      	bx	lr
 8005ff0:	20000610 	.word	0x20000610
 8005ff4:	ffff0208 	.word	0xffff0208

08005ff8 <quorem>:
 8005ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffc:	6903      	ldr	r3, [r0, #16]
 8005ffe:	690c      	ldr	r4, [r1, #16]
 8006000:	42a3      	cmp	r3, r4
 8006002:	4607      	mov	r7, r0
 8006004:	f2c0 8081 	blt.w	800610a <quorem+0x112>
 8006008:	3c01      	subs	r4, #1
 800600a:	f101 0814 	add.w	r8, r1, #20
 800600e:	f100 0514 	add.w	r5, r0, #20
 8006012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800601c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006020:	3301      	adds	r3, #1
 8006022:	429a      	cmp	r2, r3
 8006024:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006028:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800602c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006030:	d331      	bcc.n	8006096 <quorem+0x9e>
 8006032:	f04f 0e00 	mov.w	lr, #0
 8006036:	4640      	mov	r0, r8
 8006038:	46ac      	mov	ip, r5
 800603a:	46f2      	mov	sl, lr
 800603c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006040:	b293      	uxth	r3, r2
 8006042:	fb06 e303 	mla	r3, r6, r3, lr
 8006046:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800604a:	b29b      	uxth	r3, r3
 800604c:	ebaa 0303 	sub.w	r3, sl, r3
 8006050:	0c12      	lsrs	r2, r2, #16
 8006052:	f8dc a000 	ldr.w	sl, [ip]
 8006056:	fb06 e202 	mla	r2, r6, r2, lr
 800605a:	fa13 f38a 	uxtah	r3, r3, sl
 800605e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006062:	fa1f fa82 	uxth.w	sl, r2
 8006066:	f8dc 2000 	ldr.w	r2, [ip]
 800606a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800606e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006072:	b29b      	uxth	r3, r3
 8006074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006078:	4581      	cmp	r9, r0
 800607a:	f84c 3b04 	str.w	r3, [ip], #4
 800607e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006082:	d2db      	bcs.n	800603c <quorem+0x44>
 8006084:	f855 300b 	ldr.w	r3, [r5, fp]
 8006088:	b92b      	cbnz	r3, 8006096 <quorem+0x9e>
 800608a:	9b01      	ldr	r3, [sp, #4]
 800608c:	3b04      	subs	r3, #4
 800608e:	429d      	cmp	r5, r3
 8006090:	461a      	mov	r2, r3
 8006092:	d32e      	bcc.n	80060f2 <quorem+0xfa>
 8006094:	613c      	str	r4, [r7, #16]
 8006096:	4638      	mov	r0, r7
 8006098:	f001 f8b4 	bl	8007204 <__mcmp>
 800609c:	2800      	cmp	r0, #0
 800609e:	db24      	blt.n	80060ea <quorem+0xf2>
 80060a0:	3601      	adds	r6, #1
 80060a2:	4628      	mov	r0, r5
 80060a4:	f04f 0c00 	mov.w	ip, #0
 80060a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80060ac:	f8d0 e000 	ldr.w	lr, [r0]
 80060b0:	b293      	uxth	r3, r2
 80060b2:	ebac 0303 	sub.w	r3, ip, r3
 80060b6:	0c12      	lsrs	r2, r2, #16
 80060b8:	fa13 f38e 	uxtah	r3, r3, lr
 80060bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060ca:	45c1      	cmp	r9, r8
 80060cc:	f840 3b04 	str.w	r3, [r0], #4
 80060d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060d4:	d2e8      	bcs.n	80060a8 <quorem+0xb0>
 80060d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060de:	b922      	cbnz	r2, 80060ea <quorem+0xf2>
 80060e0:	3b04      	subs	r3, #4
 80060e2:	429d      	cmp	r5, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	d30a      	bcc.n	80060fe <quorem+0x106>
 80060e8:	613c      	str	r4, [r7, #16]
 80060ea:	4630      	mov	r0, r6
 80060ec:	b003      	add	sp, #12
 80060ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	3b04      	subs	r3, #4
 80060f6:	2a00      	cmp	r2, #0
 80060f8:	d1cc      	bne.n	8006094 <quorem+0x9c>
 80060fa:	3c01      	subs	r4, #1
 80060fc:	e7c7      	b.n	800608e <quorem+0x96>
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	3b04      	subs	r3, #4
 8006102:	2a00      	cmp	r2, #0
 8006104:	d1f0      	bne.n	80060e8 <quorem+0xf0>
 8006106:	3c01      	subs	r4, #1
 8006108:	e7eb      	b.n	80060e2 <quorem+0xea>
 800610a:	2000      	movs	r0, #0
 800610c:	e7ee      	b.n	80060ec <quorem+0xf4>
	...

08006110 <_dtoa_r>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	ed2d 8b02 	vpush	{d8}
 8006118:	ec57 6b10 	vmov	r6, r7, d0
 800611c:	b095      	sub	sp, #84	; 0x54
 800611e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006120:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006124:	9105      	str	r1, [sp, #20]
 8006126:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800612a:	4604      	mov	r4, r0
 800612c:	9209      	str	r2, [sp, #36]	; 0x24
 800612e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006130:	b975      	cbnz	r5, 8006150 <_dtoa_r+0x40>
 8006132:	2010      	movs	r0, #16
 8006134:	f7ff f9fe 	bl	8005534 <malloc>
 8006138:	4602      	mov	r2, r0
 800613a:	6260      	str	r0, [r4, #36]	; 0x24
 800613c:	b920      	cbnz	r0, 8006148 <_dtoa_r+0x38>
 800613e:	4bb2      	ldr	r3, [pc, #712]	; (8006408 <_dtoa_r+0x2f8>)
 8006140:	21ea      	movs	r1, #234	; 0xea
 8006142:	48b2      	ldr	r0, [pc, #712]	; (800640c <_dtoa_r+0x2fc>)
 8006144:	f001 faee 	bl	8007724 <__assert_func>
 8006148:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800614c:	6005      	str	r5, [r0, #0]
 800614e:	60c5      	str	r5, [r0, #12]
 8006150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006152:	6819      	ldr	r1, [r3, #0]
 8006154:	b151      	cbz	r1, 800616c <_dtoa_r+0x5c>
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	604a      	str	r2, [r1, #4]
 800615a:	2301      	movs	r3, #1
 800615c:	4093      	lsls	r3, r2
 800615e:	608b      	str	r3, [r1, #8]
 8006160:	4620      	mov	r0, r4
 8006162:	f000 fe11 	bl	8006d88 <_Bfree>
 8006166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	1e3b      	subs	r3, r7, #0
 800616e:	bfb9      	ittee	lt
 8006170:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006174:	9303      	strlt	r3, [sp, #12]
 8006176:	2300      	movge	r3, #0
 8006178:	f8c8 3000 	strge.w	r3, [r8]
 800617c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006180:	4ba3      	ldr	r3, [pc, #652]	; (8006410 <_dtoa_r+0x300>)
 8006182:	bfbc      	itt	lt
 8006184:	2201      	movlt	r2, #1
 8006186:	f8c8 2000 	strlt.w	r2, [r8]
 800618a:	ea33 0309 	bics.w	r3, r3, r9
 800618e:	d11b      	bne.n	80061c8 <_dtoa_r+0xb8>
 8006190:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006192:	f242 730f 	movw	r3, #9999	; 0x270f
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800619c:	4333      	orrs	r3, r6
 800619e:	f000 857a 	beq.w	8006c96 <_dtoa_r+0xb86>
 80061a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061a4:	b963      	cbnz	r3, 80061c0 <_dtoa_r+0xb0>
 80061a6:	4b9b      	ldr	r3, [pc, #620]	; (8006414 <_dtoa_r+0x304>)
 80061a8:	e024      	b.n	80061f4 <_dtoa_r+0xe4>
 80061aa:	4b9b      	ldr	r3, [pc, #620]	; (8006418 <_dtoa_r+0x308>)
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	3308      	adds	r3, #8
 80061b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	9800      	ldr	r0, [sp, #0]
 80061b6:	b015      	add	sp, #84	; 0x54
 80061b8:	ecbd 8b02 	vpop	{d8}
 80061bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c0:	4b94      	ldr	r3, [pc, #592]	; (8006414 <_dtoa_r+0x304>)
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	3303      	adds	r3, #3
 80061c6:	e7f3      	b.n	80061b0 <_dtoa_r+0xa0>
 80061c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061cc:	2200      	movs	r2, #0
 80061ce:	ec51 0b17 	vmov	r0, r1, d7
 80061d2:	2300      	movs	r3, #0
 80061d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80061d8:	f7fa fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 80061dc:	4680      	mov	r8, r0
 80061de:	b158      	cbz	r0, 80061f8 <_dtoa_r+0xe8>
 80061e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061e2:	2301      	movs	r3, #1
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 8551 	beq.w	8006c90 <_dtoa_r+0xb80>
 80061ee:	488b      	ldr	r0, [pc, #556]	; (800641c <_dtoa_r+0x30c>)
 80061f0:	6018      	str	r0, [r3, #0]
 80061f2:	1e43      	subs	r3, r0, #1
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	e7dd      	b.n	80061b4 <_dtoa_r+0xa4>
 80061f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80061fc:	aa12      	add	r2, sp, #72	; 0x48
 80061fe:	a913      	add	r1, sp, #76	; 0x4c
 8006200:	4620      	mov	r0, r4
 8006202:	f001 f8a3 	bl	800734c <__d2b>
 8006206:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800620a:	4683      	mov	fp, r0
 800620c:	2d00      	cmp	r5, #0
 800620e:	d07c      	beq.n	800630a <_dtoa_r+0x1fa>
 8006210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006212:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800621a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800621e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006222:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800622a:	4b7d      	ldr	r3, [pc, #500]	; (8006420 <_dtoa_r+0x310>)
 800622c:	2200      	movs	r2, #0
 800622e:	4630      	mov	r0, r6
 8006230:	4639      	mov	r1, r7
 8006232:	f7fa f829 	bl	8000288 <__aeabi_dsub>
 8006236:	a36e      	add	r3, pc, #440	; (adr r3, 80063f0 <_dtoa_r+0x2e0>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f7fa f9dc 	bl	80005f8 <__aeabi_dmul>
 8006240:	a36d      	add	r3, pc, #436	; (adr r3, 80063f8 <_dtoa_r+0x2e8>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7fa f821 	bl	800028c <__adddf3>
 800624a:	4606      	mov	r6, r0
 800624c:	4628      	mov	r0, r5
 800624e:	460f      	mov	r7, r1
 8006250:	f7fa f968 	bl	8000524 <__aeabi_i2d>
 8006254:	a36a      	add	r3, pc, #424	; (adr r3, 8006400 <_dtoa_r+0x2f0>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f7fa f9cd 	bl	80005f8 <__aeabi_dmul>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4630      	mov	r0, r6
 8006264:	4639      	mov	r1, r7
 8006266:	f7fa f811 	bl	800028c <__adddf3>
 800626a:	4606      	mov	r6, r0
 800626c:	460f      	mov	r7, r1
 800626e:	f7fa fc73 	bl	8000b58 <__aeabi_d2iz>
 8006272:	2200      	movs	r2, #0
 8006274:	4682      	mov	sl, r0
 8006276:	2300      	movs	r3, #0
 8006278:	4630      	mov	r0, r6
 800627a:	4639      	mov	r1, r7
 800627c:	f7fa fc2e 	bl	8000adc <__aeabi_dcmplt>
 8006280:	b148      	cbz	r0, 8006296 <_dtoa_r+0x186>
 8006282:	4650      	mov	r0, sl
 8006284:	f7fa f94e 	bl	8000524 <__aeabi_i2d>
 8006288:	4632      	mov	r2, r6
 800628a:	463b      	mov	r3, r7
 800628c:	f7fa fc1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006290:	b908      	cbnz	r0, 8006296 <_dtoa_r+0x186>
 8006292:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006296:	f1ba 0f16 	cmp.w	sl, #22
 800629a:	d854      	bhi.n	8006346 <_dtoa_r+0x236>
 800629c:	4b61      	ldr	r3, [pc, #388]	; (8006424 <_dtoa_r+0x314>)
 800629e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062aa:	f7fa fc17 	bl	8000adc <__aeabi_dcmplt>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d04b      	beq.n	800634a <_dtoa_r+0x23a>
 80062b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062b6:	2300      	movs	r3, #0
 80062b8:	930e      	str	r3, [sp, #56]	; 0x38
 80062ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062bc:	1b5d      	subs	r5, r3, r5
 80062be:	1e6b      	subs	r3, r5, #1
 80062c0:	9304      	str	r3, [sp, #16]
 80062c2:	bf43      	ittte	mi
 80062c4:	2300      	movmi	r3, #0
 80062c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80062ca:	9304      	strmi	r3, [sp, #16]
 80062cc:	f04f 0800 	movpl.w	r8, #0
 80062d0:	f1ba 0f00 	cmp.w	sl, #0
 80062d4:	db3b      	blt.n	800634e <_dtoa_r+0x23e>
 80062d6:	9b04      	ldr	r3, [sp, #16]
 80062d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80062dc:	4453      	add	r3, sl
 80062de:	9304      	str	r3, [sp, #16]
 80062e0:	2300      	movs	r3, #0
 80062e2:	9306      	str	r3, [sp, #24]
 80062e4:	9b05      	ldr	r3, [sp, #20]
 80062e6:	2b09      	cmp	r3, #9
 80062e8:	d869      	bhi.n	80063be <_dtoa_r+0x2ae>
 80062ea:	2b05      	cmp	r3, #5
 80062ec:	bfc4      	itt	gt
 80062ee:	3b04      	subgt	r3, #4
 80062f0:	9305      	strgt	r3, [sp, #20]
 80062f2:	9b05      	ldr	r3, [sp, #20]
 80062f4:	f1a3 0302 	sub.w	r3, r3, #2
 80062f8:	bfcc      	ite	gt
 80062fa:	2500      	movgt	r5, #0
 80062fc:	2501      	movle	r5, #1
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d869      	bhi.n	80063d6 <_dtoa_r+0x2c6>
 8006302:	e8df f003 	tbb	[pc, r3]
 8006306:	4e2c      	.short	0x4e2c
 8006308:	5a4c      	.short	0x5a4c
 800630a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800630e:	441d      	add	r5, r3
 8006310:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006314:	2b20      	cmp	r3, #32
 8006316:	bfc1      	itttt	gt
 8006318:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800631c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006320:	fa09 f303 	lslgt.w	r3, r9, r3
 8006324:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006328:	bfda      	itte	le
 800632a:	f1c3 0320 	rsble	r3, r3, #32
 800632e:	fa06 f003 	lslle.w	r0, r6, r3
 8006332:	4318      	orrgt	r0, r3
 8006334:	f7fa f8e6 	bl	8000504 <__aeabi_ui2d>
 8006338:	2301      	movs	r3, #1
 800633a:	4606      	mov	r6, r0
 800633c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006340:	3d01      	subs	r5, #1
 8006342:	9310      	str	r3, [sp, #64]	; 0x40
 8006344:	e771      	b.n	800622a <_dtoa_r+0x11a>
 8006346:	2301      	movs	r3, #1
 8006348:	e7b6      	b.n	80062b8 <_dtoa_r+0x1a8>
 800634a:	900e      	str	r0, [sp, #56]	; 0x38
 800634c:	e7b5      	b.n	80062ba <_dtoa_r+0x1aa>
 800634e:	f1ca 0300 	rsb	r3, sl, #0
 8006352:	9306      	str	r3, [sp, #24]
 8006354:	2300      	movs	r3, #0
 8006356:	eba8 080a 	sub.w	r8, r8, sl
 800635a:	930d      	str	r3, [sp, #52]	; 0x34
 800635c:	e7c2      	b.n	80062e4 <_dtoa_r+0x1d4>
 800635e:	2300      	movs	r3, #0
 8006360:	9308      	str	r3, [sp, #32]
 8006362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	dc39      	bgt.n	80063dc <_dtoa_r+0x2cc>
 8006368:	f04f 0901 	mov.w	r9, #1
 800636c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006370:	464b      	mov	r3, r9
 8006372:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006376:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006378:	2200      	movs	r2, #0
 800637a:	6042      	str	r2, [r0, #4]
 800637c:	2204      	movs	r2, #4
 800637e:	f102 0614 	add.w	r6, r2, #20
 8006382:	429e      	cmp	r6, r3
 8006384:	6841      	ldr	r1, [r0, #4]
 8006386:	d92f      	bls.n	80063e8 <_dtoa_r+0x2d8>
 8006388:	4620      	mov	r0, r4
 800638a:	f000 fcbd 	bl	8006d08 <_Balloc>
 800638e:	9000      	str	r0, [sp, #0]
 8006390:	2800      	cmp	r0, #0
 8006392:	d14b      	bne.n	800642c <_dtoa_r+0x31c>
 8006394:	4b24      	ldr	r3, [pc, #144]	; (8006428 <_dtoa_r+0x318>)
 8006396:	4602      	mov	r2, r0
 8006398:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800639c:	e6d1      	b.n	8006142 <_dtoa_r+0x32>
 800639e:	2301      	movs	r3, #1
 80063a0:	e7de      	b.n	8006360 <_dtoa_r+0x250>
 80063a2:	2300      	movs	r3, #0
 80063a4:	9308      	str	r3, [sp, #32]
 80063a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a8:	eb0a 0903 	add.w	r9, sl, r3
 80063ac:	f109 0301 	add.w	r3, r9, #1
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	bfb8      	it	lt
 80063b6:	2301      	movlt	r3, #1
 80063b8:	e7dd      	b.n	8006376 <_dtoa_r+0x266>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e7f2      	b.n	80063a4 <_dtoa_r+0x294>
 80063be:	2501      	movs	r5, #1
 80063c0:	2300      	movs	r3, #0
 80063c2:	9305      	str	r3, [sp, #20]
 80063c4:	9508      	str	r5, [sp, #32]
 80063c6:	f04f 39ff 	mov.w	r9, #4294967295
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80063d0:	2312      	movs	r3, #18
 80063d2:	9209      	str	r2, [sp, #36]	; 0x24
 80063d4:	e7cf      	b.n	8006376 <_dtoa_r+0x266>
 80063d6:	2301      	movs	r3, #1
 80063d8:	9308      	str	r3, [sp, #32]
 80063da:	e7f4      	b.n	80063c6 <_dtoa_r+0x2b6>
 80063dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80063e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80063e4:	464b      	mov	r3, r9
 80063e6:	e7c6      	b.n	8006376 <_dtoa_r+0x266>
 80063e8:	3101      	adds	r1, #1
 80063ea:	6041      	str	r1, [r0, #4]
 80063ec:	0052      	lsls	r2, r2, #1
 80063ee:	e7c6      	b.n	800637e <_dtoa_r+0x26e>
 80063f0:	636f4361 	.word	0x636f4361
 80063f4:	3fd287a7 	.word	0x3fd287a7
 80063f8:	8b60c8b3 	.word	0x8b60c8b3
 80063fc:	3fc68a28 	.word	0x3fc68a28
 8006400:	509f79fb 	.word	0x509f79fb
 8006404:	3fd34413 	.word	0x3fd34413
 8006408:	080089b9 	.word	0x080089b9
 800640c:	080089d0 	.word	0x080089d0
 8006410:	7ff00000 	.word	0x7ff00000
 8006414:	080089b5 	.word	0x080089b5
 8006418:	080089ac 	.word	0x080089ac
 800641c:	08008989 	.word	0x08008989
 8006420:	3ff80000 	.word	0x3ff80000
 8006424:	08008ac8 	.word	0x08008ac8
 8006428:	08008a2f 	.word	0x08008a2f
 800642c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800642e:	9a00      	ldr	r2, [sp, #0]
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	9b01      	ldr	r3, [sp, #4]
 8006434:	2b0e      	cmp	r3, #14
 8006436:	f200 80ad 	bhi.w	8006594 <_dtoa_r+0x484>
 800643a:	2d00      	cmp	r5, #0
 800643c:	f000 80aa 	beq.w	8006594 <_dtoa_r+0x484>
 8006440:	f1ba 0f00 	cmp.w	sl, #0
 8006444:	dd36      	ble.n	80064b4 <_dtoa_r+0x3a4>
 8006446:	4ac3      	ldr	r2, [pc, #780]	; (8006754 <_dtoa_r+0x644>)
 8006448:	f00a 030f 	and.w	r3, sl, #15
 800644c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006450:	ed93 7b00 	vldr	d7, [r3]
 8006454:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006458:	ea4f 172a 	mov.w	r7, sl, asr #4
 800645c:	eeb0 8a47 	vmov.f32	s16, s14
 8006460:	eef0 8a67 	vmov.f32	s17, s15
 8006464:	d016      	beq.n	8006494 <_dtoa_r+0x384>
 8006466:	4bbc      	ldr	r3, [pc, #752]	; (8006758 <_dtoa_r+0x648>)
 8006468:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800646c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006470:	f7fa f9ec 	bl	800084c <__aeabi_ddiv>
 8006474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006478:	f007 070f 	and.w	r7, r7, #15
 800647c:	2503      	movs	r5, #3
 800647e:	4eb6      	ldr	r6, [pc, #728]	; (8006758 <_dtoa_r+0x648>)
 8006480:	b957      	cbnz	r7, 8006498 <_dtoa_r+0x388>
 8006482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006486:	ec53 2b18 	vmov	r2, r3, d8
 800648a:	f7fa f9df 	bl	800084c <__aeabi_ddiv>
 800648e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006492:	e029      	b.n	80064e8 <_dtoa_r+0x3d8>
 8006494:	2502      	movs	r5, #2
 8006496:	e7f2      	b.n	800647e <_dtoa_r+0x36e>
 8006498:	07f9      	lsls	r1, r7, #31
 800649a:	d508      	bpl.n	80064ae <_dtoa_r+0x39e>
 800649c:	ec51 0b18 	vmov	r0, r1, d8
 80064a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064a4:	f7fa f8a8 	bl	80005f8 <__aeabi_dmul>
 80064a8:	ec41 0b18 	vmov	d8, r0, r1
 80064ac:	3501      	adds	r5, #1
 80064ae:	107f      	asrs	r7, r7, #1
 80064b0:	3608      	adds	r6, #8
 80064b2:	e7e5      	b.n	8006480 <_dtoa_r+0x370>
 80064b4:	f000 80a6 	beq.w	8006604 <_dtoa_r+0x4f4>
 80064b8:	f1ca 0600 	rsb	r6, sl, #0
 80064bc:	4ba5      	ldr	r3, [pc, #660]	; (8006754 <_dtoa_r+0x644>)
 80064be:	4fa6      	ldr	r7, [pc, #664]	; (8006758 <_dtoa_r+0x648>)
 80064c0:	f006 020f 	and.w	r2, r6, #15
 80064c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064d0:	f7fa f892 	bl	80005f8 <__aeabi_dmul>
 80064d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d8:	1136      	asrs	r6, r6, #4
 80064da:	2300      	movs	r3, #0
 80064dc:	2502      	movs	r5, #2
 80064de:	2e00      	cmp	r6, #0
 80064e0:	f040 8085 	bne.w	80065ee <_dtoa_r+0x4de>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1d2      	bne.n	800648e <_dtoa_r+0x37e>
 80064e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 808c 	beq.w	8006608 <_dtoa_r+0x4f8>
 80064f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064f4:	4b99      	ldr	r3, [pc, #612]	; (800675c <_dtoa_r+0x64c>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	4630      	mov	r0, r6
 80064fa:	4639      	mov	r1, r7
 80064fc:	f7fa faee 	bl	8000adc <__aeabi_dcmplt>
 8006500:	2800      	cmp	r0, #0
 8006502:	f000 8081 	beq.w	8006608 <_dtoa_r+0x4f8>
 8006506:	9b01      	ldr	r3, [sp, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d07d      	beq.n	8006608 <_dtoa_r+0x4f8>
 800650c:	f1b9 0f00 	cmp.w	r9, #0
 8006510:	dd3c      	ble.n	800658c <_dtoa_r+0x47c>
 8006512:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006516:	9307      	str	r3, [sp, #28]
 8006518:	2200      	movs	r2, #0
 800651a:	4b91      	ldr	r3, [pc, #580]	; (8006760 <_dtoa_r+0x650>)
 800651c:	4630      	mov	r0, r6
 800651e:	4639      	mov	r1, r7
 8006520:	f7fa f86a 	bl	80005f8 <__aeabi_dmul>
 8006524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006528:	3501      	adds	r5, #1
 800652a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800652e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006532:	4628      	mov	r0, r5
 8006534:	f7f9 fff6 	bl	8000524 <__aeabi_i2d>
 8006538:	4632      	mov	r2, r6
 800653a:	463b      	mov	r3, r7
 800653c:	f7fa f85c 	bl	80005f8 <__aeabi_dmul>
 8006540:	4b88      	ldr	r3, [pc, #544]	; (8006764 <_dtoa_r+0x654>)
 8006542:	2200      	movs	r2, #0
 8006544:	f7f9 fea2 	bl	800028c <__adddf3>
 8006548:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800654c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006550:	9303      	str	r3, [sp, #12]
 8006552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006554:	2b00      	cmp	r3, #0
 8006556:	d15c      	bne.n	8006612 <_dtoa_r+0x502>
 8006558:	4b83      	ldr	r3, [pc, #524]	; (8006768 <_dtoa_r+0x658>)
 800655a:	2200      	movs	r2, #0
 800655c:	4630      	mov	r0, r6
 800655e:	4639      	mov	r1, r7
 8006560:	f7f9 fe92 	bl	8000288 <__aeabi_dsub>
 8006564:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006568:	4606      	mov	r6, r0
 800656a:	460f      	mov	r7, r1
 800656c:	f7fa fad4 	bl	8000b18 <__aeabi_dcmpgt>
 8006570:	2800      	cmp	r0, #0
 8006572:	f040 8296 	bne.w	8006aa2 <_dtoa_r+0x992>
 8006576:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800657a:	4630      	mov	r0, r6
 800657c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006580:	4639      	mov	r1, r7
 8006582:	f7fa faab 	bl	8000adc <__aeabi_dcmplt>
 8006586:	2800      	cmp	r0, #0
 8006588:	f040 8288 	bne.w	8006a9c <_dtoa_r+0x98c>
 800658c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006590:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006594:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006596:	2b00      	cmp	r3, #0
 8006598:	f2c0 8158 	blt.w	800684c <_dtoa_r+0x73c>
 800659c:	f1ba 0f0e 	cmp.w	sl, #14
 80065a0:	f300 8154 	bgt.w	800684c <_dtoa_r+0x73c>
 80065a4:	4b6b      	ldr	r3, [pc, #428]	; (8006754 <_dtoa_r+0x644>)
 80065a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f280 80e3 	bge.w	800677c <_dtoa_r+0x66c>
 80065b6:	9b01      	ldr	r3, [sp, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f300 80df 	bgt.w	800677c <_dtoa_r+0x66c>
 80065be:	f040 826d 	bne.w	8006a9c <_dtoa_r+0x98c>
 80065c2:	4b69      	ldr	r3, [pc, #420]	; (8006768 <_dtoa_r+0x658>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	4640      	mov	r0, r8
 80065c8:	4649      	mov	r1, r9
 80065ca:	f7fa f815 	bl	80005f8 <__aeabi_dmul>
 80065ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065d2:	f7fa fa97 	bl	8000b04 <__aeabi_dcmpge>
 80065d6:	9e01      	ldr	r6, [sp, #4]
 80065d8:	4637      	mov	r7, r6
 80065da:	2800      	cmp	r0, #0
 80065dc:	f040 8243 	bne.w	8006a66 <_dtoa_r+0x956>
 80065e0:	9d00      	ldr	r5, [sp, #0]
 80065e2:	2331      	movs	r3, #49	; 0x31
 80065e4:	f805 3b01 	strb.w	r3, [r5], #1
 80065e8:	f10a 0a01 	add.w	sl, sl, #1
 80065ec:	e23f      	b.n	8006a6e <_dtoa_r+0x95e>
 80065ee:	07f2      	lsls	r2, r6, #31
 80065f0:	d505      	bpl.n	80065fe <_dtoa_r+0x4ee>
 80065f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065f6:	f7f9 ffff 	bl	80005f8 <__aeabi_dmul>
 80065fa:	3501      	adds	r5, #1
 80065fc:	2301      	movs	r3, #1
 80065fe:	1076      	asrs	r6, r6, #1
 8006600:	3708      	adds	r7, #8
 8006602:	e76c      	b.n	80064de <_dtoa_r+0x3ce>
 8006604:	2502      	movs	r5, #2
 8006606:	e76f      	b.n	80064e8 <_dtoa_r+0x3d8>
 8006608:	9b01      	ldr	r3, [sp, #4]
 800660a:	f8cd a01c 	str.w	sl, [sp, #28]
 800660e:	930c      	str	r3, [sp, #48]	; 0x30
 8006610:	e78d      	b.n	800652e <_dtoa_r+0x41e>
 8006612:	9900      	ldr	r1, [sp, #0]
 8006614:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006618:	4b4e      	ldr	r3, [pc, #312]	; (8006754 <_dtoa_r+0x644>)
 800661a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800661e:	4401      	add	r1, r0
 8006620:	9102      	str	r1, [sp, #8]
 8006622:	9908      	ldr	r1, [sp, #32]
 8006624:	eeb0 8a47 	vmov.f32	s16, s14
 8006628:	eef0 8a67 	vmov.f32	s17, s15
 800662c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006630:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006634:	2900      	cmp	r1, #0
 8006636:	d045      	beq.n	80066c4 <_dtoa_r+0x5b4>
 8006638:	494c      	ldr	r1, [pc, #304]	; (800676c <_dtoa_r+0x65c>)
 800663a:	2000      	movs	r0, #0
 800663c:	f7fa f906 	bl	800084c <__aeabi_ddiv>
 8006640:	ec53 2b18 	vmov	r2, r3, d8
 8006644:	f7f9 fe20 	bl	8000288 <__aeabi_dsub>
 8006648:	9d00      	ldr	r5, [sp, #0]
 800664a:	ec41 0b18 	vmov	d8, r0, r1
 800664e:	4639      	mov	r1, r7
 8006650:	4630      	mov	r0, r6
 8006652:	f7fa fa81 	bl	8000b58 <__aeabi_d2iz>
 8006656:	900c      	str	r0, [sp, #48]	; 0x30
 8006658:	f7f9 ff64 	bl	8000524 <__aeabi_i2d>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4630      	mov	r0, r6
 8006662:	4639      	mov	r1, r7
 8006664:	f7f9 fe10 	bl	8000288 <__aeabi_dsub>
 8006668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800666a:	3330      	adds	r3, #48	; 0x30
 800666c:	f805 3b01 	strb.w	r3, [r5], #1
 8006670:	ec53 2b18 	vmov	r2, r3, d8
 8006674:	4606      	mov	r6, r0
 8006676:	460f      	mov	r7, r1
 8006678:	f7fa fa30 	bl	8000adc <__aeabi_dcmplt>
 800667c:	2800      	cmp	r0, #0
 800667e:	d165      	bne.n	800674c <_dtoa_r+0x63c>
 8006680:	4632      	mov	r2, r6
 8006682:	463b      	mov	r3, r7
 8006684:	4935      	ldr	r1, [pc, #212]	; (800675c <_dtoa_r+0x64c>)
 8006686:	2000      	movs	r0, #0
 8006688:	f7f9 fdfe 	bl	8000288 <__aeabi_dsub>
 800668c:	ec53 2b18 	vmov	r2, r3, d8
 8006690:	f7fa fa24 	bl	8000adc <__aeabi_dcmplt>
 8006694:	2800      	cmp	r0, #0
 8006696:	f040 80b9 	bne.w	800680c <_dtoa_r+0x6fc>
 800669a:	9b02      	ldr	r3, [sp, #8]
 800669c:	429d      	cmp	r5, r3
 800669e:	f43f af75 	beq.w	800658c <_dtoa_r+0x47c>
 80066a2:	4b2f      	ldr	r3, [pc, #188]	; (8006760 <_dtoa_r+0x650>)
 80066a4:	ec51 0b18 	vmov	r0, r1, d8
 80066a8:	2200      	movs	r2, #0
 80066aa:	f7f9 ffa5 	bl	80005f8 <__aeabi_dmul>
 80066ae:	4b2c      	ldr	r3, [pc, #176]	; (8006760 <_dtoa_r+0x650>)
 80066b0:	ec41 0b18 	vmov	d8, r0, r1
 80066b4:	2200      	movs	r2, #0
 80066b6:	4630      	mov	r0, r6
 80066b8:	4639      	mov	r1, r7
 80066ba:	f7f9 ff9d 	bl	80005f8 <__aeabi_dmul>
 80066be:	4606      	mov	r6, r0
 80066c0:	460f      	mov	r7, r1
 80066c2:	e7c4      	b.n	800664e <_dtoa_r+0x53e>
 80066c4:	ec51 0b17 	vmov	r0, r1, d7
 80066c8:	f7f9 ff96 	bl	80005f8 <__aeabi_dmul>
 80066cc:	9b02      	ldr	r3, [sp, #8]
 80066ce:	9d00      	ldr	r5, [sp, #0]
 80066d0:	930c      	str	r3, [sp, #48]	; 0x30
 80066d2:	ec41 0b18 	vmov	d8, r0, r1
 80066d6:	4639      	mov	r1, r7
 80066d8:	4630      	mov	r0, r6
 80066da:	f7fa fa3d 	bl	8000b58 <__aeabi_d2iz>
 80066de:	9011      	str	r0, [sp, #68]	; 0x44
 80066e0:	f7f9 ff20 	bl	8000524 <__aeabi_i2d>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4630      	mov	r0, r6
 80066ea:	4639      	mov	r1, r7
 80066ec:	f7f9 fdcc 	bl	8000288 <__aeabi_dsub>
 80066f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066f2:	3330      	adds	r3, #48	; 0x30
 80066f4:	f805 3b01 	strb.w	r3, [r5], #1
 80066f8:	9b02      	ldr	r3, [sp, #8]
 80066fa:	429d      	cmp	r5, r3
 80066fc:	4606      	mov	r6, r0
 80066fe:	460f      	mov	r7, r1
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	d134      	bne.n	8006770 <_dtoa_r+0x660>
 8006706:	4b19      	ldr	r3, [pc, #100]	; (800676c <_dtoa_r+0x65c>)
 8006708:	ec51 0b18 	vmov	r0, r1, d8
 800670c:	f7f9 fdbe 	bl	800028c <__adddf3>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4630      	mov	r0, r6
 8006716:	4639      	mov	r1, r7
 8006718:	f7fa f9fe 	bl	8000b18 <__aeabi_dcmpgt>
 800671c:	2800      	cmp	r0, #0
 800671e:	d175      	bne.n	800680c <_dtoa_r+0x6fc>
 8006720:	ec53 2b18 	vmov	r2, r3, d8
 8006724:	4911      	ldr	r1, [pc, #68]	; (800676c <_dtoa_r+0x65c>)
 8006726:	2000      	movs	r0, #0
 8006728:	f7f9 fdae 	bl	8000288 <__aeabi_dsub>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4630      	mov	r0, r6
 8006732:	4639      	mov	r1, r7
 8006734:	f7fa f9d2 	bl	8000adc <__aeabi_dcmplt>
 8006738:	2800      	cmp	r0, #0
 800673a:	f43f af27 	beq.w	800658c <_dtoa_r+0x47c>
 800673e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006740:	1e6b      	subs	r3, r5, #1
 8006742:	930c      	str	r3, [sp, #48]	; 0x30
 8006744:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006748:	2b30      	cmp	r3, #48	; 0x30
 800674a:	d0f8      	beq.n	800673e <_dtoa_r+0x62e>
 800674c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006750:	e04a      	b.n	80067e8 <_dtoa_r+0x6d8>
 8006752:	bf00      	nop
 8006754:	08008ac8 	.word	0x08008ac8
 8006758:	08008aa0 	.word	0x08008aa0
 800675c:	3ff00000 	.word	0x3ff00000
 8006760:	40240000 	.word	0x40240000
 8006764:	401c0000 	.word	0x401c0000
 8006768:	40140000 	.word	0x40140000
 800676c:	3fe00000 	.word	0x3fe00000
 8006770:	4baf      	ldr	r3, [pc, #700]	; (8006a30 <_dtoa_r+0x920>)
 8006772:	f7f9 ff41 	bl	80005f8 <__aeabi_dmul>
 8006776:	4606      	mov	r6, r0
 8006778:	460f      	mov	r7, r1
 800677a:	e7ac      	b.n	80066d6 <_dtoa_r+0x5c6>
 800677c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006780:	9d00      	ldr	r5, [sp, #0]
 8006782:	4642      	mov	r2, r8
 8006784:	464b      	mov	r3, r9
 8006786:	4630      	mov	r0, r6
 8006788:	4639      	mov	r1, r7
 800678a:	f7fa f85f 	bl	800084c <__aeabi_ddiv>
 800678e:	f7fa f9e3 	bl	8000b58 <__aeabi_d2iz>
 8006792:	9002      	str	r0, [sp, #8]
 8006794:	f7f9 fec6 	bl	8000524 <__aeabi_i2d>
 8006798:	4642      	mov	r2, r8
 800679a:	464b      	mov	r3, r9
 800679c:	f7f9 ff2c 	bl	80005f8 <__aeabi_dmul>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	4630      	mov	r0, r6
 80067a6:	4639      	mov	r1, r7
 80067a8:	f7f9 fd6e 	bl	8000288 <__aeabi_dsub>
 80067ac:	9e02      	ldr	r6, [sp, #8]
 80067ae:	9f01      	ldr	r7, [sp, #4]
 80067b0:	3630      	adds	r6, #48	; 0x30
 80067b2:	f805 6b01 	strb.w	r6, [r5], #1
 80067b6:	9e00      	ldr	r6, [sp, #0]
 80067b8:	1bae      	subs	r6, r5, r6
 80067ba:	42b7      	cmp	r7, r6
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	d137      	bne.n	8006832 <_dtoa_r+0x722>
 80067c2:	f7f9 fd63 	bl	800028c <__adddf3>
 80067c6:	4642      	mov	r2, r8
 80067c8:	464b      	mov	r3, r9
 80067ca:	4606      	mov	r6, r0
 80067cc:	460f      	mov	r7, r1
 80067ce:	f7fa f9a3 	bl	8000b18 <__aeabi_dcmpgt>
 80067d2:	b9c8      	cbnz	r0, 8006808 <_dtoa_r+0x6f8>
 80067d4:	4642      	mov	r2, r8
 80067d6:	464b      	mov	r3, r9
 80067d8:	4630      	mov	r0, r6
 80067da:	4639      	mov	r1, r7
 80067dc:	f7fa f974 	bl	8000ac8 <__aeabi_dcmpeq>
 80067e0:	b110      	cbz	r0, 80067e8 <_dtoa_r+0x6d8>
 80067e2:	9b02      	ldr	r3, [sp, #8]
 80067e4:	07d9      	lsls	r1, r3, #31
 80067e6:	d40f      	bmi.n	8006808 <_dtoa_r+0x6f8>
 80067e8:	4620      	mov	r0, r4
 80067ea:	4659      	mov	r1, fp
 80067ec:	f000 facc 	bl	8006d88 <_Bfree>
 80067f0:	2300      	movs	r3, #0
 80067f2:	702b      	strb	r3, [r5, #0]
 80067f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067f6:	f10a 0001 	add.w	r0, sl, #1
 80067fa:	6018      	str	r0, [r3, #0]
 80067fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f43f acd8 	beq.w	80061b4 <_dtoa_r+0xa4>
 8006804:	601d      	str	r5, [r3, #0]
 8006806:	e4d5      	b.n	80061b4 <_dtoa_r+0xa4>
 8006808:	f8cd a01c 	str.w	sl, [sp, #28]
 800680c:	462b      	mov	r3, r5
 800680e:	461d      	mov	r5, r3
 8006810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006814:	2a39      	cmp	r2, #57	; 0x39
 8006816:	d108      	bne.n	800682a <_dtoa_r+0x71a>
 8006818:	9a00      	ldr	r2, [sp, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d1f7      	bne.n	800680e <_dtoa_r+0x6fe>
 800681e:	9a07      	ldr	r2, [sp, #28]
 8006820:	9900      	ldr	r1, [sp, #0]
 8006822:	3201      	adds	r2, #1
 8006824:	9207      	str	r2, [sp, #28]
 8006826:	2230      	movs	r2, #48	; 0x30
 8006828:	700a      	strb	r2, [r1, #0]
 800682a:	781a      	ldrb	r2, [r3, #0]
 800682c:	3201      	adds	r2, #1
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	e78c      	b.n	800674c <_dtoa_r+0x63c>
 8006832:	4b7f      	ldr	r3, [pc, #508]	; (8006a30 <_dtoa_r+0x920>)
 8006834:	2200      	movs	r2, #0
 8006836:	f7f9 fedf 	bl	80005f8 <__aeabi_dmul>
 800683a:	2200      	movs	r2, #0
 800683c:	2300      	movs	r3, #0
 800683e:	4606      	mov	r6, r0
 8006840:	460f      	mov	r7, r1
 8006842:	f7fa f941 	bl	8000ac8 <__aeabi_dcmpeq>
 8006846:	2800      	cmp	r0, #0
 8006848:	d09b      	beq.n	8006782 <_dtoa_r+0x672>
 800684a:	e7cd      	b.n	80067e8 <_dtoa_r+0x6d8>
 800684c:	9a08      	ldr	r2, [sp, #32]
 800684e:	2a00      	cmp	r2, #0
 8006850:	f000 80c4 	beq.w	80069dc <_dtoa_r+0x8cc>
 8006854:	9a05      	ldr	r2, [sp, #20]
 8006856:	2a01      	cmp	r2, #1
 8006858:	f300 80a8 	bgt.w	80069ac <_dtoa_r+0x89c>
 800685c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800685e:	2a00      	cmp	r2, #0
 8006860:	f000 80a0 	beq.w	80069a4 <_dtoa_r+0x894>
 8006864:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006868:	9e06      	ldr	r6, [sp, #24]
 800686a:	4645      	mov	r5, r8
 800686c:	9a04      	ldr	r2, [sp, #16]
 800686e:	2101      	movs	r1, #1
 8006870:	441a      	add	r2, r3
 8006872:	4620      	mov	r0, r4
 8006874:	4498      	add	r8, r3
 8006876:	9204      	str	r2, [sp, #16]
 8006878:	f000 fb42 	bl	8006f00 <__i2b>
 800687c:	4607      	mov	r7, r0
 800687e:	2d00      	cmp	r5, #0
 8006880:	dd0b      	ble.n	800689a <_dtoa_r+0x78a>
 8006882:	9b04      	ldr	r3, [sp, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	dd08      	ble.n	800689a <_dtoa_r+0x78a>
 8006888:	42ab      	cmp	r3, r5
 800688a:	9a04      	ldr	r2, [sp, #16]
 800688c:	bfa8      	it	ge
 800688e:	462b      	movge	r3, r5
 8006890:	eba8 0803 	sub.w	r8, r8, r3
 8006894:	1aed      	subs	r5, r5, r3
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	9304      	str	r3, [sp, #16]
 800689a:	9b06      	ldr	r3, [sp, #24]
 800689c:	b1fb      	cbz	r3, 80068de <_dtoa_r+0x7ce>
 800689e:	9b08      	ldr	r3, [sp, #32]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 809f 	beq.w	80069e4 <_dtoa_r+0x8d4>
 80068a6:	2e00      	cmp	r6, #0
 80068a8:	dd11      	ble.n	80068ce <_dtoa_r+0x7be>
 80068aa:	4639      	mov	r1, r7
 80068ac:	4632      	mov	r2, r6
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 fbe2 	bl	8007078 <__pow5mult>
 80068b4:	465a      	mov	r2, fp
 80068b6:	4601      	mov	r1, r0
 80068b8:	4607      	mov	r7, r0
 80068ba:	4620      	mov	r0, r4
 80068bc:	f000 fb36 	bl	8006f2c <__multiply>
 80068c0:	4659      	mov	r1, fp
 80068c2:	9007      	str	r0, [sp, #28]
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 fa5f 	bl	8006d88 <_Bfree>
 80068ca:	9b07      	ldr	r3, [sp, #28]
 80068cc:	469b      	mov	fp, r3
 80068ce:	9b06      	ldr	r3, [sp, #24]
 80068d0:	1b9a      	subs	r2, r3, r6
 80068d2:	d004      	beq.n	80068de <_dtoa_r+0x7ce>
 80068d4:	4659      	mov	r1, fp
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 fbce 	bl	8007078 <__pow5mult>
 80068dc:	4683      	mov	fp, r0
 80068de:	2101      	movs	r1, #1
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 fb0d 	bl	8006f00 <__i2b>
 80068e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	4606      	mov	r6, r0
 80068ec:	dd7c      	ble.n	80069e8 <_dtoa_r+0x8d8>
 80068ee:	461a      	mov	r2, r3
 80068f0:	4601      	mov	r1, r0
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 fbc0 	bl	8007078 <__pow5mult>
 80068f8:	9b05      	ldr	r3, [sp, #20]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	4606      	mov	r6, r0
 80068fe:	dd76      	ble.n	80069ee <_dtoa_r+0x8de>
 8006900:	2300      	movs	r3, #0
 8006902:	9306      	str	r3, [sp, #24]
 8006904:	6933      	ldr	r3, [r6, #16]
 8006906:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800690a:	6918      	ldr	r0, [r3, #16]
 800690c:	f000 faa8 	bl	8006e60 <__hi0bits>
 8006910:	f1c0 0020 	rsb	r0, r0, #32
 8006914:	9b04      	ldr	r3, [sp, #16]
 8006916:	4418      	add	r0, r3
 8006918:	f010 001f 	ands.w	r0, r0, #31
 800691c:	f000 8086 	beq.w	8006a2c <_dtoa_r+0x91c>
 8006920:	f1c0 0320 	rsb	r3, r0, #32
 8006924:	2b04      	cmp	r3, #4
 8006926:	dd7f      	ble.n	8006a28 <_dtoa_r+0x918>
 8006928:	f1c0 001c 	rsb	r0, r0, #28
 800692c:	9b04      	ldr	r3, [sp, #16]
 800692e:	4403      	add	r3, r0
 8006930:	4480      	add	r8, r0
 8006932:	4405      	add	r5, r0
 8006934:	9304      	str	r3, [sp, #16]
 8006936:	f1b8 0f00 	cmp.w	r8, #0
 800693a:	dd05      	ble.n	8006948 <_dtoa_r+0x838>
 800693c:	4659      	mov	r1, fp
 800693e:	4642      	mov	r2, r8
 8006940:	4620      	mov	r0, r4
 8006942:	f000 fbf3 	bl	800712c <__lshift>
 8006946:	4683      	mov	fp, r0
 8006948:	9b04      	ldr	r3, [sp, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	dd05      	ble.n	800695a <_dtoa_r+0x84a>
 800694e:	4631      	mov	r1, r6
 8006950:	461a      	mov	r2, r3
 8006952:	4620      	mov	r0, r4
 8006954:	f000 fbea 	bl	800712c <__lshift>
 8006958:	4606      	mov	r6, r0
 800695a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800695c:	2b00      	cmp	r3, #0
 800695e:	d069      	beq.n	8006a34 <_dtoa_r+0x924>
 8006960:	4631      	mov	r1, r6
 8006962:	4658      	mov	r0, fp
 8006964:	f000 fc4e 	bl	8007204 <__mcmp>
 8006968:	2800      	cmp	r0, #0
 800696a:	da63      	bge.n	8006a34 <_dtoa_r+0x924>
 800696c:	2300      	movs	r3, #0
 800696e:	4659      	mov	r1, fp
 8006970:	220a      	movs	r2, #10
 8006972:	4620      	mov	r0, r4
 8006974:	f000 fa2a 	bl	8006dcc <__multadd>
 8006978:	9b08      	ldr	r3, [sp, #32]
 800697a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800697e:	4683      	mov	fp, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 818f 	beq.w	8006ca4 <_dtoa_r+0xb94>
 8006986:	4639      	mov	r1, r7
 8006988:	2300      	movs	r3, #0
 800698a:	220a      	movs	r2, #10
 800698c:	4620      	mov	r0, r4
 800698e:	f000 fa1d 	bl	8006dcc <__multadd>
 8006992:	f1b9 0f00 	cmp.w	r9, #0
 8006996:	4607      	mov	r7, r0
 8006998:	f300 808e 	bgt.w	8006ab8 <_dtoa_r+0x9a8>
 800699c:	9b05      	ldr	r3, [sp, #20]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	dc50      	bgt.n	8006a44 <_dtoa_r+0x934>
 80069a2:	e089      	b.n	8006ab8 <_dtoa_r+0x9a8>
 80069a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069aa:	e75d      	b.n	8006868 <_dtoa_r+0x758>
 80069ac:	9b01      	ldr	r3, [sp, #4]
 80069ae:	1e5e      	subs	r6, r3, #1
 80069b0:	9b06      	ldr	r3, [sp, #24]
 80069b2:	42b3      	cmp	r3, r6
 80069b4:	bfbf      	itttt	lt
 80069b6:	9b06      	ldrlt	r3, [sp, #24]
 80069b8:	9606      	strlt	r6, [sp, #24]
 80069ba:	1af2      	sublt	r2, r6, r3
 80069bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80069be:	bfb6      	itet	lt
 80069c0:	189b      	addlt	r3, r3, r2
 80069c2:	1b9e      	subge	r6, r3, r6
 80069c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80069c6:	9b01      	ldr	r3, [sp, #4]
 80069c8:	bfb8      	it	lt
 80069ca:	2600      	movlt	r6, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bfb5      	itete	lt
 80069d0:	eba8 0503 	sublt.w	r5, r8, r3
 80069d4:	9b01      	ldrge	r3, [sp, #4]
 80069d6:	2300      	movlt	r3, #0
 80069d8:	4645      	movge	r5, r8
 80069da:	e747      	b.n	800686c <_dtoa_r+0x75c>
 80069dc:	9e06      	ldr	r6, [sp, #24]
 80069de:	9f08      	ldr	r7, [sp, #32]
 80069e0:	4645      	mov	r5, r8
 80069e2:	e74c      	b.n	800687e <_dtoa_r+0x76e>
 80069e4:	9a06      	ldr	r2, [sp, #24]
 80069e6:	e775      	b.n	80068d4 <_dtoa_r+0x7c4>
 80069e8:	9b05      	ldr	r3, [sp, #20]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	dc18      	bgt.n	8006a20 <_dtoa_r+0x910>
 80069ee:	9b02      	ldr	r3, [sp, #8]
 80069f0:	b9b3      	cbnz	r3, 8006a20 <_dtoa_r+0x910>
 80069f2:	9b03      	ldr	r3, [sp, #12]
 80069f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069f8:	b9a3      	cbnz	r3, 8006a24 <_dtoa_r+0x914>
 80069fa:	9b03      	ldr	r3, [sp, #12]
 80069fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a00:	0d1b      	lsrs	r3, r3, #20
 8006a02:	051b      	lsls	r3, r3, #20
 8006a04:	b12b      	cbz	r3, 8006a12 <_dtoa_r+0x902>
 8006a06:	9b04      	ldr	r3, [sp, #16]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	9304      	str	r3, [sp, #16]
 8006a0c:	f108 0801 	add.w	r8, r8, #1
 8006a10:	2301      	movs	r3, #1
 8006a12:	9306      	str	r3, [sp, #24]
 8006a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f47f af74 	bne.w	8006904 <_dtoa_r+0x7f4>
 8006a1c:	2001      	movs	r0, #1
 8006a1e:	e779      	b.n	8006914 <_dtoa_r+0x804>
 8006a20:	2300      	movs	r3, #0
 8006a22:	e7f6      	b.n	8006a12 <_dtoa_r+0x902>
 8006a24:	9b02      	ldr	r3, [sp, #8]
 8006a26:	e7f4      	b.n	8006a12 <_dtoa_r+0x902>
 8006a28:	d085      	beq.n	8006936 <_dtoa_r+0x826>
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	301c      	adds	r0, #28
 8006a2e:	e77d      	b.n	800692c <_dtoa_r+0x81c>
 8006a30:	40240000 	.word	0x40240000
 8006a34:	9b01      	ldr	r3, [sp, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	dc38      	bgt.n	8006aac <_dtoa_r+0x99c>
 8006a3a:	9b05      	ldr	r3, [sp, #20]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	dd35      	ble.n	8006aac <_dtoa_r+0x99c>
 8006a40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006a44:	f1b9 0f00 	cmp.w	r9, #0
 8006a48:	d10d      	bne.n	8006a66 <_dtoa_r+0x956>
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	464b      	mov	r3, r9
 8006a4e:	2205      	movs	r2, #5
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 f9bb 	bl	8006dcc <__multadd>
 8006a56:	4601      	mov	r1, r0
 8006a58:	4606      	mov	r6, r0
 8006a5a:	4658      	mov	r0, fp
 8006a5c:	f000 fbd2 	bl	8007204 <__mcmp>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	f73f adbd 	bgt.w	80065e0 <_dtoa_r+0x4d0>
 8006a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a68:	9d00      	ldr	r5, [sp, #0]
 8006a6a:	ea6f 0a03 	mvn.w	sl, r3
 8006a6e:	f04f 0800 	mov.w	r8, #0
 8006a72:	4631      	mov	r1, r6
 8006a74:	4620      	mov	r0, r4
 8006a76:	f000 f987 	bl	8006d88 <_Bfree>
 8006a7a:	2f00      	cmp	r7, #0
 8006a7c:	f43f aeb4 	beq.w	80067e8 <_dtoa_r+0x6d8>
 8006a80:	f1b8 0f00 	cmp.w	r8, #0
 8006a84:	d005      	beq.n	8006a92 <_dtoa_r+0x982>
 8006a86:	45b8      	cmp	r8, r7
 8006a88:	d003      	beq.n	8006a92 <_dtoa_r+0x982>
 8006a8a:	4641      	mov	r1, r8
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f000 f97b 	bl	8006d88 <_Bfree>
 8006a92:	4639      	mov	r1, r7
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 f977 	bl	8006d88 <_Bfree>
 8006a9a:	e6a5      	b.n	80067e8 <_dtoa_r+0x6d8>
 8006a9c:	2600      	movs	r6, #0
 8006a9e:	4637      	mov	r7, r6
 8006aa0:	e7e1      	b.n	8006a66 <_dtoa_r+0x956>
 8006aa2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006aa4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006aa8:	4637      	mov	r7, r6
 8006aaa:	e599      	b.n	80065e0 <_dtoa_r+0x4d0>
 8006aac:	9b08      	ldr	r3, [sp, #32]
 8006aae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 80fd 	beq.w	8006cb2 <_dtoa_r+0xba2>
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	dd05      	ble.n	8006ac8 <_dtoa_r+0x9b8>
 8006abc:	4639      	mov	r1, r7
 8006abe:	462a      	mov	r2, r5
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 fb33 	bl	800712c <__lshift>
 8006ac6:	4607      	mov	r7, r0
 8006ac8:	9b06      	ldr	r3, [sp, #24]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d05c      	beq.n	8006b88 <_dtoa_r+0xa78>
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 f919 	bl	8006d08 <_Balloc>
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	b928      	cbnz	r0, 8006ae6 <_dtoa_r+0x9d6>
 8006ada:	4b80      	ldr	r3, [pc, #512]	; (8006cdc <_dtoa_r+0xbcc>)
 8006adc:	4602      	mov	r2, r0
 8006ade:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ae2:	f7ff bb2e 	b.w	8006142 <_dtoa_r+0x32>
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	3202      	adds	r2, #2
 8006aea:	0092      	lsls	r2, r2, #2
 8006aec:	f107 010c 	add.w	r1, r7, #12
 8006af0:	300c      	adds	r0, #12
 8006af2:	f7fe fd27 	bl	8005544 <memcpy>
 8006af6:	2201      	movs	r2, #1
 8006af8:	4629      	mov	r1, r5
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 fb16 	bl	800712c <__lshift>
 8006b00:	9b00      	ldr	r3, [sp, #0]
 8006b02:	3301      	adds	r3, #1
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	9b00      	ldr	r3, [sp, #0]
 8006b08:	444b      	add	r3, r9
 8006b0a:	9307      	str	r3, [sp, #28]
 8006b0c:	9b02      	ldr	r3, [sp, #8]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	46b8      	mov	r8, r7
 8006b14:	9306      	str	r3, [sp, #24]
 8006b16:	4607      	mov	r7, r0
 8006b18:	9b01      	ldr	r3, [sp, #4]
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	4658      	mov	r0, fp
 8006b20:	9302      	str	r3, [sp, #8]
 8006b22:	f7ff fa69 	bl	8005ff8 <quorem>
 8006b26:	4603      	mov	r3, r0
 8006b28:	3330      	adds	r3, #48	; 0x30
 8006b2a:	9004      	str	r0, [sp, #16]
 8006b2c:	4641      	mov	r1, r8
 8006b2e:	4658      	mov	r0, fp
 8006b30:	9308      	str	r3, [sp, #32]
 8006b32:	f000 fb67 	bl	8007204 <__mcmp>
 8006b36:	463a      	mov	r2, r7
 8006b38:	4681      	mov	r9, r0
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 fb7d 	bl	800723c <__mdiff>
 8006b42:	68c2      	ldr	r2, [r0, #12]
 8006b44:	9b08      	ldr	r3, [sp, #32]
 8006b46:	4605      	mov	r5, r0
 8006b48:	bb02      	cbnz	r2, 8006b8c <_dtoa_r+0xa7c>
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	4658      	mov	r0, fp
 8006b4e:	f000 fb59 	bl	8007204 <__mcmp>
 8006b52:	9b08      	ldr	r3, [sp, #32]
 8006b54:	4602      	mov	r2, r0
 8006b56:	4629      	mov	r1, r5
 8006b58:	4620      	mov	r0, r4
 8006b5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006b5e:	f000 f913 	bl	8006d88 <_Bfree>
 8006b62:	9b05      	ldr	r3, [sp, #20]
 8006b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b66:	9d01      	ldr	r5, [sp, #4]
 8006b68:	ea43 0102 	orr.w	r1, r3, r2
 8006b6c:	9b06      	ldr	r3, [sp, #24]
 8006b6e:	430b      	orrs	r3, r1
 8006b70:	9b08      	ldr	r3, [sp, #32]
 8006b72:	d10d      	bne.n	8006b90 <_dtoa_r+0xa80>
 8006b74:	2b39      	cmp	r3, #57	; 0x39
 8006b76:	d029      	beq.n	8006bcc <_dtoa_r+0xabc>
 8006b78:	f1b9 0f00 	cmp.w	r9, #0
 8006b7c:	dd01      	ble.n	8006b82 <_dtoa_r+0xa72>
 8006b7e:	9b04      	ldr	r3, [sp, #16]
 8006b80:	3331      	adds	r3, #49	; 0x31
 8006b82:	9a02      	ldr	r2, [sp, #8]
 8006b84:	7013      	strb	r3, [r2, #0]
 8006b86:	e774      	b.n	8006a72 <_dtoa_r+0x962>
 8006b88:	4638      	mov	r0, r7
 8006b8a:	e7b9      	b.n	8006b00 <_dtoa_r+0x9f0>
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	e7e2      	b.n	8006b56 <_dtoa_r+0xa46>
 8006b90:	f1b9 0f00 	cmp.w	r9, #0
 8006b94:	db06      	blt.n	8006ba4 <_dtoa_r+0xa94>
 8006b96:	9905      	ldr	r1, [sp, #20]
 8006b98:	ea41 0909 	orr.w	r9, r1, r9
 8006b9c:	9906      	ldr	r1, [sp, #24]
 8006b9e:	ea59 0101 	orrs.w	r1, r9, r1
 8006ba2:	d120      	bne.n	8006be6 <_dtoa_r+0xad6>
 8006ba4:	2a00      	cmp	r2, #0
 8006ba6:	ddec      	ble.n	8006b82 <_dtoa_r+0xa72>
 8006ba8:	4659      	mov	r1, fp
 8006baa:	2201      	movs	r2, #1
 8006bac:	4620      	mov	r0, r4
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	f000 fabc 	bl	800712c <__lshift>
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	4683      	mov	fp, r0
 8006bb8:	f000 fb24 	bl	8007204 <__mcmp>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	9b01      	ldr	r3, [sp, #4]
 8006bc0:	dc02      	bgt.n	8006bc8 <_dtoa_r+0xab8>
 8006bc2:	d1de      	bne.n	8006b82 <_dtoa_r+0xa72>
 8006bc4:	07da      	lsls	r2, r3, #31
 8006bc6:	d5dc      	bpl.n	8006b82 <_dtoa_r+0xa72>
 8006bc8:	2b39      	cmp	r3, #57	; 0x39
 8006bca:	d1d8      	bne.n	8006b7e <_dtoa_r+0xa6e>
 8006bcc:	9a02      	ldr	r2, [sp, #8]
 8006bce:	2339      	movs	r3, #57	; 0x39
 8006bd0:	7013      	strb	r3, [r2, #0]
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	461d      	mov	r5, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006bdc:	2a39      	cmp	r2, #57	; 0x39
 8006bde:	d050      	beq.n	8006c82 <_dtoa_r+0xb72>
 8006be0:	3201      	adds	r2, #1
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	e745      	b.n	8006a72 <_dtoa_r+0x962>
 8006be6:	2a00      	cmp	r2, #0
 8006be8:	dd03      	ble.n	8006bf2 <_dtoa_r+0xae2>
 8006bea:	2b39      	cmp	r3, #57	; 0x39
 8006bec:	d0ee      	beq.n	8006bcc <_dtoa_r+0xabc>
 8006bee:	3301      	adds	r3, #1
 8006bf0:	e7c7      	b.n	8006b82 <_dtoa_r+0xa72>
 8006bf2:	9a01      	ldr	r2, [sp, #4]
 8006bf4:	9907      	ldr	r1, [sp, #28]
 8006bf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006bfa:	428a      	cmp	r2, r1
 8006bfc:	d02a      	beq.n	8006c54 <_dtoa_r+0xb44>
 8006bfe:	4659      	mov	r1, fp
 8006c00:	2300      	movs	r3, #0
 8006c02:	220a      	movs	r2, #10
 8006c04:	4620      	mov	r0, r4
 8006c06:	f000 f8e1 	bl	8006dcc <__multadd>
 8006c0a:	45b8      	cmp	r8, r7
 8006c0c:	4683      	mov	fp, r0
 8006c0e:	f04f 0300 	mov.w	r3, #0
 8006c12:	f04f 020a 	mov.w	r2, #10
 8006c16:	4641      	mov	r1, r8
 8006c18:	4620      	mov	r0, r4
 8006c1a:	d107      	bne.n	8006c2c <_dtoa_r+0xb1c>
 8006c1c:	f000 f8d6 	bl	8006dcc <__multadd>
 8006c20:	4680      	mov	r8, r0
 8006c22:	4607      	mov	r7, r0
 8006c24:	9b01      	ldr	r3, [sp, #4]
 8006c26:	3301      	adds	r3, #1
 8006c28:	9301      	str	r3, [sp, #4]
 8006c2a:	e775      	b.n	8006b18 <_dtoa_r+0xa08>
 8006c2c:	f000 f8ce 	bl	8006dcc <__multadd>
 8006c30:	4639      	mov	r1, r7
 8006c32:	4680      	mov	r8, r0
 8006c34:	2300      	movs	r3, #0
 8006c36:	220a      	movs	r2, #10
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 f8c7 	bl	8006dcc <__multadd>
 8006c3e:	4607      	mov	r7, r0
 8006c40:	e7f0      	b.n	8006c24 <_dtoa_r+0xb14>
 8006c42:	f1b9 0f00 	cmp.w	r9, #0
 8006c46:	9a00      	ldr	r2, [sp, #0]
 8006c48:	bfcc      	ite	gt
 8006c4a:	464d      	movgt	r5, r9
 8006c4c:	2501      	movle	r5, #1
 8006c4e:	4415      	add	r5, r2
 8006c50:	f04f 0800 	mov.w	r8, #0
 8006c54:	4659      	mov	r1, fp
 8006c56:	2201      	movs	r2, #1
 8006c58:	4620      	mov	r0, r4
 8006c5a:	9301      	str	r3, [sp, #4]
 8006c5c:	f000 fa66 	bl	800712c <__lshift>
 8006c60:	4631      	mov	r1, r6
 8006c62:	4683      	mov	fp, r0
 8006c64:	f000 face 	bl	8007204 <__mcmp>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	dcb2      	bgt.n	8006bd2 <_dtoa_r+0xac2>
 8006c6c:	d102      	bne.n	8006c74 <_dtoa_r+0xb64>
 8006c6e:	9b01      	ldr	r3, [sp, #4]
 8006c70:	07db      	lsls	r3, r3, #31
 8006c72:	d4ae      	bmi.n	8006bd2 <_dtoa_r+0xac2>
 8006c74:	462b      	mov	r3, r5
 8006c76:	461d      	mov	r5, r3
 8006c78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c7c:	2a30      	cmp	r2, #48	; 0x30
 8006c7e:	d0fa      	beq.n	8006c76 <_dtoa_r+0xb66>
 8006c80:	e6f7      	b.n	8006a72 <_dtoa_r+0x962>
 8006c82:	9a00      	ldr	r2, [sp, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d1a5      	bne.n	8006bd4 <_dtoa_r+0xac4>
 8006c88:	f10a 0a01 	add.w	sl, sl, #1
 8006c8c:	2331      	movs	r3, #49	; 0x31
 8006c8e:	e779      	b.n	8006b84 <_dtoa_r+0xa74>
 8006c90:	4b13      	ldr	r3, [pc, #76]	; (8006ce0 <_dtoa_r+0xbd0>)
 8006c92:	f7ff baaf 	b.w	80061f4 <_dtoa_r+0xe4>
 8006c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f47f aa86 	bne.w	80061aa <_dtoa_r+0x9a>
 8006c9e:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <_dtoa_r+0xbd4>)
 8006ca0:	f7ff baa8 	b.w	80061f4 <_dtoa_r+0xe4>
 8006ca4:	f1b9 0f00 	cmp.w	r9, #0
 8006ca8:	dc03      	bgt.n	8006cb2 <_dtoa_r+0xba2>
 8006caa:	9b05      	ldr	r3, [sp, #20]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	f73f aec9 	bgt.w	8006a44 <_dtoa_r+0x934>
 8006cb2:	9d00      	ldr	r5, [sp, #0]
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	4658      	mov	r0, fp
 8006cb8:	f7ff f99e 	bl	8005ff8 <quorem>
 8006cbc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006cc0:	f805 3b01 	strb.w	r3, [r5], #1
 8006cc4:	9a00      	ldr	r2, [sp, #0]
 8006cc6:	1aaa      	subs	r2, r5, r2
 8006cc8:	4591      	cmp	r9, r2
 8006cca:	ddba      	ble.n	8006c42 <_dtoa_r+0xb32>
 8006ccc:	4659      	mov	r1, fp
 8006cce:	2300      	movs	r3, #0
 8006cd0:	220a      	movs	r2, #10
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 f87a 	bl	8006dcc <__multadd>
 8006cd8:	4683      	mov	fp, r0
 8006cda:	e7eb      	b.n	8006cb4 <_dtoa_r+0xba4>
 8006cdc:	08008a2f 	.word	0x08008a2f
 8006ce0:	08008988 	.word	0x08008988
 8006ce4:	080089ac 	.word	0x080089ac

08006ce8 <_localeconv_r>:
 8006ce8:	4800      	ldr	r0, [pc, #0]	; (8006cec <_localeconv_r+0x4>)
 8006cea:	4770      	bx	lr
 8006cec:	20000764 	.word	0x20000764

08006cf0 <__malloc_lock>:
 8006cf0:	4801      	ldr	r0, [pc, #4]	; (8006cf8 <__malloc_lock+0x8>)
 8006cf2:	f000 bd48 	b.w	8007786 <__retarget_lock_acquire_recursive>
 8006cf6:	bf00      	nop
 8006cf8:	20000984 	.word	0x20000984

08006cfc <__malloc_unlock>:
 8006cfc:	4801      	ldr	r0, [pc, #4]	; (8006d04 <__malloc_unlock+0x8>)
 8006cfe:	f000 bd43 	b.w	8007788 <__retarget_lock_release_recursive>
 8006d02:	bf00      	nop
 8006d04:	20000984 	.word	0x20000984

08006d08 <_Balloc>:
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	460d      	mov	r5, r1
 8006d10:	b976      	cbnz	r6, 8006d30 <_Balloc+0x28>
 8006d12:	2010      	movs	r0, #16
 8006d14:	f7fe fc0e 	bl	8005534 <malloc>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	6260      	str	r0, [r4, #36]	; 0x24
 8006d1c:	b920      	cbnz	r0, 8006d28 <_Balloc+0x20>
 8006d1e:	4b18      	ldr	r3, [pc, #96]	; (8006d80 <_Balloc+0x78>)
 8006d20:	4818      	ldr	r0, [pc, #96]	; (8006d84 <_Balloc+0x7c>)
 8006d22:	2166      	movs	r1, #102	; 0x66
 8006d24:	f000 fcfe 	bl	8007724 <__assert_func>
 8006d28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d2c:	6006      	str	r6, [r0, #0]
 8006d2e:	60c6      	str	r6, [r0, #12]
 8006d30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d32:	68f3      	ldr	r3, [r6, #12]
 8006d34:	b183      	cbz	r3, 8006d58 <_Balloc+0x50>
 8006d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d3e:	b9b8      	cbnz	r0, 8006d70 <_Balloc+0x68>
 8006d40:	2101      	movs	r1, #1
 8006d42:	fa01 f605 	lsl.w	r6, r1, r5
 8006d46:	1d72      	adds	r2, r6, #5
 8006d48:	0092      	lsls	r2, r2, #2
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f000 fb5a 	bl	8007404 <_calloc_r>
 8006d50:	b160      	cbz	r0, 8006d6c <_Balloc+0x64>
 8006d52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d56:	e00e      	b.n	8006d76 <_Balloc+0x6e>
 8006d58:	2221      	movs	r2, #33	; 0x21
 8006d5a:	2104      	movs	r1, #4
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 fb51 	bl	8007404 <_calloc_r>
 8006d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d64:	60f0      	str	r0, [r6, #12]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e4      	bne.n	8006d36 <_Balloc+0x2e>
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
 8006d70:	6802      	ldr	r2, [r0, #0]
 8006d72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d76:	2300      	movs	r3, #0
 8006d78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d7c:	e7f7      	b.n	8006d6e <_Balloc+0x66>
 8006d7e:	bf00      	nop
 8006d80:	080089b9 	.word	0x080089b9
 8006d84:	08008a40 	.word	0x08008a40

08006d88 <_Bfree>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	b976      	cbnz	r6, 8006db0 <_Bfree+0x28>
 8006d92:	2010      	movs	r0, #16
 8006d94:	f7fe fbce 	bl	8005534 <malloc>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6268      	str	r0, [r5, #36]	; 0x24
 8006d9c:	b920      	cbnz	r0, 8006da8 <_Bfree+0x20>
 8006d9e:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <_Bfree+0x3c>)
 8006da0:	4809      	ldr	r0, [pc, #36]	; (8006dc8 <_Bfree+0x40>)
 8006da2:	218a      	movs	r1, #138	; 0x8a
 8006da4:	f000 fcbe 	bl	8007724 <__assert_func>
 8006da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dac:	6006      	str	r6, [r0, #0]
 8006dae:	60c6      	str	r6, [r0, #12]
 8006db0:	b13c      	cbz	r4, 8006dc2 <_Bfree+0x3a>
 8006db2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006db4:	6862      	ldr	r2, [r4, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dbc:	6021      	str	r1, [r4, #0]
 8006dbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006dc2:	bd70      	pop	{r4, r5, r6, pc}
 8006dc4:	080089b9 	.word	0x080089b9
 8006dc8:	08008a40 	.word	0x08008a40

08006dcc <__multadd>:
 8006dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd0:	690e      	ldr	r6, [r1, #16]
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	4698      	mov	r8, r3
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	f101 0014 	add.w	r0, r1, #20
 8006ddc:	2300      	movs	r3, #0
 8006dde:	6805      	ldr	r5, [r0, #0]
 8006de0:	b2a9      	uxth	r1, r5
 8006de2:	fb02 8101 	mla	r1, r2, r1, r8
 8006de6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006dea:	0c2d      	lsrs	r5, r5, #16
 8006dec:	fb02 c505 	mla	r5, r2, r5, ip
 8006df0:	b289      	uxth	r1, r1
 8006df2:	3301      	adds	r3, #1
 8006df4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006df8:	429e      	cmp	r6, r3
 8006dfa:	f840 1b04 	str.w	r1, [r0], #4
 8006dfe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006e02:	dcec      	bgt.n	8006dde <__multadd+0x12>
 8006e04:	f1b8 0f00 	cmp.w	r8, #0
 8006e08:	d022      	beq.n	8006e50 <__multadd+0x84>
 8006e0a:	68a3      	ldr	r3, [r4, #8]
 8006e0c:	42b3      	cmp	r3, r6
 8006e0e:	dc19      	bgt.n	8006e44 <__multadd+0x78>
 8006e10:	6861      	ldr	r1, [r4, #4]
 8006e12:	4638      	mov	r0, r7
 8006e14:	3101      	adds	r1, #1
 8006e16:	f7ff ff77 	bl	8006d08 <_Balloc>
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	b928      	cbnz	r0, 8006e2a <__multadd+0x5e>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	4b0d      	ldr	r3, [pc, #52]	; (8006e58 <__multadd+0x8c>)
 8006e22:	480e      	ldr	r0, [pc, #56]	; (8006e5c <__multadd+0x90>)
 8006e24:	21b5      	movs	r1, #181	; 0xb5
 8006e26:	f000 fc7d 	bl	8007724 <__assert_func>
 8006e2a:	6922      	ldr	r2, [r4, #16]
 8006e2c:	3202      	adds	r2, #2
 8006e2e:	f104 010c 	add.w	r1, r4, #12
 8006e32:	0092      	lsls	r2, r2, #2
 8006e34:	300c      	adds	r0, #12
 8006e36:	f7fe fb85 	bl	8005544 <memcpy>
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	f7ff ffa3 	bl	8006d88 <_Bfree>
 8006e42:	462c      	mov	r4, r5
 8006e44:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006e48:	3601      	adds	r6, #1
 8006e4a:	f8c3 8014 	str.w	r8, [r3, #20]
 8006e4e:	6126      	str	r6, [r4, #16]
 8006e50:	4620      	mov	r0, r4
 8006e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e56:	bf00      	nop
 8006e58:	08008a2f 	.word	0x08008a2f
 8006e5c:	08008a40 	.word	0x08008a40

08006e60 <__hi0bits>:
 8006e60:	0c03      	lsrs	r3, r0, #16
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	b9d3      	cbnz	r3, 8006e9c <__hi0bits+0x3c>
 8006e66:	0400      	lsls	r0, r0, #16
 8006e68:	2310      	movs	r3, #16
 8006e6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e6e:	bf04      	itt	eq
 8006e70:	0200      	lsleq	r0, r0, #8
 8006e72:	3308      	addeq	r3, #8
 8006e74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e78:	bf04      	itt	eq
 8006e7a:	0100      	lsleq	r0, r0, #4
 8006e7c:	3304      	addeq	r3, #4
 8006e7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e82:	bf04      	itt	eq
 8006e84:	0080      	lsleq	r0, r0, #2
 8006e86:	3302      	addeq	r3, #2
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	db05      	blt.n	8006e98 <__hi0bits+0x38>
 8006e8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e90:	f103 0301 	add.w	r3, r3, #1
 8006e94:	bf08      	it	eq
 8006e96:	2320      	moveq	r3, #32
 8006e98:	4618      	mov	r0, r3
 8006e9a:	4770      	bx	lr
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	e7e4      	b.n	8006e6a <__hi0bits+0xa>

08006ea0 <__lo0bits>:
 8006ea0:	6803      	ldr	r3, [r0, #0]
 8006ea2:	f013 0207 	ands.w	r2, r3, #7
 8006ea6:	4601      	mov	r1, r0
 8006ea8:	d00b      	beq.n	8006ec2 <__lo0bits+0x22>
 8006eaa:	07da      	lsls	r2, r3, #31
 8006eac:	d424      	bmi.n	8006ef8 <__lo0bits+0x58>
 8006eae:	0798      	lsls	r0, r3, #30
 8006eb0:	bf49      	itett	mi
 8006eb2:	085b      	lsrmi	r3, r3, #1
 8006eb4:	089b      	lsrpl	r3, r3, #2
 8006eb6:	2001      	movmi	r0, #1
 8006eb8:	600b      	strmi	r3, [r1, #0]
 8006eba:	bf5c      	itt	pl
 8006ebc:	600b      	strpl	r3, [r1, #0]
 8006ebe:	2002      	movpl	r0, #2
 8006ec0:	4770      	bx	lr
 8006ec2:	b298      	uxth	r0, r3
 8006ec4:	b9b0      	cbnz	r0, 8006ef4 <__lo0bits+0x54>
 8006ec6:	0c1b      	lsrs	r3, r3, #16
 8006ec8:	2010      	movs	r0, #16
 8006eca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ece:	bf04      	itt	eq
 8006ed0:	0a1b      	lsreq	r3, r3, #8
 8006ed2:	3008      	addeq	r0, #8
 8006ed4:	071a      	lsls	r2, r3, #28
 8006ed6:	bf04      	itt	eq
 8006ed8:	091b      	lsreq	r3, r3, #4
 8006eda:	3004      	addeq	r0, #4
 8006edc:	079a      	lsls	r2, r3, #30
 8006ede:	bf04      	itt	eq
 8006ee0:	089b      	lsreq	r3, r3, #2
 8006ee2:	3002      	addeq	r0, #2
 8006ee4:	07da      	lsls	r2, r3, #31
 8006ee6:	d403      	bmi.n	8006ef0 <__lo0bits+0x50>
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	f100 0001 	add.w	r0, r0, #1
 8006eee:	d005      	beq.n	8006efc <__lo0bits+0x5c>
 8006ef0:	600b      	str	r3, [r1, #0]
 8006ef2:	4770      	bx	lr
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	e7e8      	b.n	8006eca <__lo0bits+0x2a>
 8006ef8:	2000      	movs	r0, #0
 8006efa:	4770      	bx	lr
 8006efc:	2020      	movs	r0, #32
 8006efe:	4770      	bx	lr

08006f00 <__i2b>:
 8006f00:	b510      	push	{r4, lr}
 8006f02:	460c      	mov	r4, r1
 8006f04:	2101      	movs	r1, #1
 8006f06:	f7ff feff 	bl	8006d08 <_Balloc>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	b928      	cbnz	r0, 8006f1a <__i2b+0x1a>
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <__i2b+0x24>)
 8006f10:	4805      	ldr	r0, [pc, #20]	; (8006f28 <__i2b+0x28>)
 8006f12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f16:	f000 fc05 	bl	8007724 <__assert_func>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	6144      	str	r4, [r0, #20]
 8006f1e:	6103      	str	r3, [r0, #16]
 8006f20:	bd10      	pop	{r4, pc}
 8006f22:	bf00      	nop
 8006f24:	08008a2f 	.word	0x08008a2f
 8006f28:	08008a40 	.word	0x08008a40

08006f2c <__multiply>:
 8006f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f30:	4614      	mov	r4, r2
 8006f32:	690a      	ldr	r2, [r1, #16]
 8006f34:	6923      	ldr	r3, [r4, #16]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	bfb8      	it	lt
 8006f3a:	460b      	movlt	r3, r1
 8006f3c:	460d      	mov	r5, r1
 8006f3e:	bfbc      	itt	lt
 8006f40:	4625      	movlt	r5, r4
 8006f42:	461c      	movlt	r4, r3
 8006f44:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006f48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006f4c:	68ab      	ldr	r3, [r5, #8]
 8006f4e:	6869      	ldr	r1, [r5, #4]
 8006f50:	eb0a 0709 	add.w	r7, sl, r9
 8006f54:	42bb      	cmp	r3, r7
 8006f56:	b085      	sub	sp, #20
 8006f58:	bfb8      	it	lt
 8006f5a:	3101      	addlt	r1, #1
 8006f5c:	f7ff fed4 	bl	8006d08 <_Balloc>
 8006f60:	b930      	cbnz	r0, 8006f70 <__multiply+0x44>
 8006f62:	4602      	mov	r2, r0
 8006f64:	4b42      	ldr	r3, [pc, #264]	; (8007070 <__multiply+0x144>)
 8006f66:	4843      	ldr	r0, [pc, #268]	; (8007074 <__multiply+0x148>)
 8006f68:	f240 115d 	movw	r1, #349	; 0x15d
 8006f6c:	f000 fbda 	bl	8007724 <__assert_func>
 8006f70:	f100 0614 	add.w	r6, r0, #20
 8006f74:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006f78:	4633      	mov	r3, r6
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	4543      	cmp	r3, r8
 8006f7e:	d31e      	bcc.n	8006fbe <__multiply+0x92>
 8006f80:	f105 0c14 	add.w	ip, r5, #20
 8006f84:	f104 0314 	add.w	r3, r4, #20
 8006f88:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006f8c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006f90:	9202      	str	r2, [sp, #8]
 8006f92:	ebac 0205 	sub.w	r2, ip, r5
 8006f96:	3a15      	subs	r2, #21
 8006f98:	f022 0203 	bic.w	r2, r2, #3
 8006f9c:	3204      	adds	r2, #4
 8006f9e:	f105 0115 	add.w	r1, r5, #21
 8006fa2:	458c      	cmp	ip, r1
 8006fa4:	bf38      	it	cc
 8006fa6:	2204      	movcc	r2, #4
 8006fa8:	9201      	str	r2, [sp, #4]
 8006faa:	9a02      	ldr	r2, [sp, #8]
 8006fac:	9303      	str	r3, [sp, #12]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d808      	bhi.n	8006fc4 <__multiply+0x98>
 8006fb2:	2f00      	cmp	r7, #0
 8006fb4:	dc55      	bgt.n	8007062 <__multiply+0x136>
 8006fb6:	6107      	str	r7, [r0, #16]
 8006fb8:	b005      	add	sp, #20
 8006fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fbe:	f843 2b04 	str.w	r2, [r3], #4
 8006fc2:	e7db      	b.n	8006f7c <__multiply+0x50>
 8006fc4:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fc8:	f1ba 0f00 	cmp.w	sl, #0
 8006fcc:	d020      	beq.n	8007010 <__multiply+0xe4>
 8006fce:	f105 0e14 	add.w	lr, r5, #20
 8006fd2:	46b1      	mov	r9, r6
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006fda:	f8d9 b000 	ldr.w	fp, [r9]
 8006fde:	b2a1      	uxth	r1, r4
 8006fe0:	fa1f fb8b 	uxth.w	fp, fp
 8006fe4:	fb0a b101 	mla	r1, sl, r1, fp
 8006fe8:	4411      	add	r1, r2
 8006fea:	f8d9 2000 	ldr.w	r2, [r9]
 8006fee:	0c24      	lsrs	r4, r4, #16
 8006ff0:	0c12      	lsrs	r2, r2, #16
 8006ff2:	fb0a 2404 	mla	r4, sl, r4, r2
 8006ff6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006ffa:	b289      	uxth	r1, r1
 8006ffc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007000:	45f4      	cmp	ip, lr
 8007002:	f849 1b04 	str.w	r1, [r9], #4
 8007006:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800700a:	d8e4      	bhi.n	8006fd6 <__multiply+0xaa>
 800700c:	9901      	ldr	r1, [sp, #4]
 800700e:	5072      	str	r2, [r6, r1]
 8007010:	9a03      	ldr	r2, [sp, #12]
 8007012:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007016:	3304      	adds	r3, #4
 8007018:	f1b9 0f00 	cmp.w	r9, #0
 800701c:	d01f      	beq.n	800705e <__multiply+0x132>
 800701e:	6834      	ldr	r4, [r6, #0]
 8007020:	f105 0114 	add.w	r1, r5, #20
 8007024:	46b6      	mov	lr, r6
 8007026:	f04f 0a00 	mov.w	sl, #0
 800702a:	880a      	ldrh	r2, [r1, #0]
 800702c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007030:	fb09 b202 	mla	r2, r9, r2, fp
 8007034:	4492      	add	sl, r2
 8007036:	b2a4      	uxth	r4, r4
 8007038:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800703c:	f84e 4b04 	str.w	r4, [lr], #4
 8007040:	f851 4b04 	ldr.w	r4, [r1], #4
 8007044:	f8be 2000 	ldrh.w	r2, [lr]
 8007048:	0c24      	lsrs	r4, r4, #16
 800704a:	fb09 2404 	mla	r4, r9, r4, r2
 800704e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007052:	458c      	cmp	ip, r1
 8007054:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007058:	d8e7      	bhi.n	800702a <__multiply+0xfe>
 800705a:	9a01      	ldr	r2, [sp, #4]
 800705c:	50b4      	str	r4, [r6, r2]
 800705e:	3604      	adds	r6, #4
 8007060:	e7a3      	b.n	8006faa <__multiply+0x7e>
 8007062:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1a5      	bne.n	8006fb6 <__multiply+0x8a>
 800706a:	3f01      	subs	r7, #1
 800706c:	e7a1      	b.n	8006fb2 <__multiply+0x86>
 800706e:	bf00      	nop
 8007070:	08008a2f 	.word	0x08008a2f
 8007074:	08008a40 	.word	0x08008a40

08007078 <__pow5mult>:
 8007078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800707c:	4615      	mov	r5, r2
 800707e:	f012 0203 	ands.w	r2, r2, #3
 8007082:	4606      	mov	r6, r0
 8007084:	460f      	mov	r7, r1
 8007086:	d007      	beq.n	8007098 <__pow5mult+0x20>
 8007088:	4c25      	ldr	r4, [pc, #148]	; (8007120 <__pow5mult+0xa8>)
 800708a:	3a01      	subs	r2, #1
 800708c:	2300      	movs	r3, #0
 800708e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007092:	f7ff fe9b 	bl	8006dcc <__multadd>
 8007096:	4607      	mov	r7, r0
 8007098:	10ad      	asrs	r5, r5, #2
 800709a:	d03d      	beq.n	8007118 <__pow5mult+0xa0>
 800709c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800709e:	b97c      	cbnz	r4, 80070c0 <__pow5mult+0x48>
 80070a0:	2010      	movs	r0, #16
 80070a2:	f7fe fa47 	bl	8005534 <malloc>
 80070a6:	4602      	mov	r2, r0
 80070a8:	6270      	str	r0, [r6, #36]	; 0x24
 80070aa:	b928      	cbnz	r0, 80070b8 <__pow5mult+0x40>
 80070ac:	4b1d      	ldr	r3, [pc, #116]	; (8007124 <__pow5mult+0xac>)
 80070ae:	481e      	ldr	r0, [pc, #120]	; (8007128 <__pow5mult+0xb0>)
 80070b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80070b4:	f000 fb36 	bl	8007724 <__assert_func>
 80070b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070bc:	6004      	str	r4, [r0, #0]
 80070be:	60c4      	str	r4, [r0, #12]
 80070c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070c8:	b94c      	cbnz	r4, 80070de <__pow5mult+0x66>
 80070ca:	f240 2171 	movw	r1, #625	; 0x271
 80070ce:	4630      	mov	r0, r6
 80070d0:	f7ff ff16 	bl	8006f00 <__i2b>
 80070d4:	2300      	movs	r3, #0
 80070d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80070da:	4604      	mov	r4, r0
 80070dc:	6003      	str	r3, [r0, #0]
 80070de:	f04f 0900 	mov.w	r9, #0
 80070e2:	07eb      	lsls	r3, r5, #31
 80070e4:	d50a      	bpl.n	80070fc <__pow5mult+0x84>
 80070e6:	4639      	mov	r1, r7
 80070e8:	4622      	mov	r2, r4
 80070ea:	4630      	mov	r0, r6
 80070ec:	f7ff ff1e 	bl	8006f2c <__multiply>
 80070f0:	4639      	mov	r1, r7
 80070f2:	4680      	mov	r8, r0
 80070f4:	4630      	mov	r0, r6
 80070f6:	f7ff fe47 	bl	8006d88 <_Bfree>
 80070fa:	4647      	mov	r7, r8
 80070fc:	106d      	asrs	r5, r5, #1
 80070fe:	d00b      	beq.n	8007118 <__pow5mult+0xa0>
 8007100:	6820      	ldr	r0, [r4, #0]
 8007102:	b938      	cbnz	r0, 8007114 <__pow5mult+0x9c>
 8007104:	4622      	mov	r2, r4
 8007106:	4621      	mov	r1, r4
 8007108:	4630      	mov	r0, r6
 800710a:	f7ff ff0f 	bl	8006f2c <__multiply>
 800710e:	6020      	str	r0, [r4, #0]
 8007110:	f8c0 9000 	str.w	r9, [r0]
 8007114:	4604      	mov	r4, r0
 8007116:	e7e4      	b.n	80070e2 <__pow5mult+0x6a>
 8007118:	4638      	mov	r0, r7
 800711a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800711e:	bf00      	nop
 8007120:	08008b90 	.word	0x08008b90
 8007124:	080089b9 	.word	0x080089b9
 8007128:	08008a40 	.word	0x08008a40

0800712c <__lshift>:
 800712c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007130:	460c      	mov	r4, r1
 8007132:	6849      	ldr	r1, [r1, #4]
 8007134:	6923      	ldr	r3, [r4, #16]
 8007136:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800713a:	68a3      	ldr	r3, [r4, #8]
 800713c:	4607      	mov	r7, r0
 800713e:	4691      	mov	r9, r2
 8007140:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007144:	f108 0601 	add.w	r6, r8, #1
 8007148:	42b3      	cmp	r3, r6
 800714a:	db0b      	blt.n	8007164 <__lshift+0x38>
 800714c:	4638      	mov	r0, r7
 800714e:	f7ff fddb 	bl	8006d08 <_Balloc>
 8007152:	4605      	mov	r5, r0
 8007154:	b948      	cbnz	r0, 800716a <__lshift+0x3e>
 8007156:	4602      	mov	r2, r0
 8007158:	4b28      	ldr	r3, [pc, #160]	; (80071fc <__lshift+0xd0>)
 800715a:	4829      	ldr	r0, [pc, #164]	; (8007200 <__lshift+0xd4>)
 800715c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007160:	f000 fae0 	bl	8007724 <__assert_func>
 8007164:	3101      	adds	r1, #1
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	e7ee      	b.n	8007148 <__lshift+0x1c>
 800716a:	2300      	movs	r3, #0
 800716c:	f100 0114 	add.w	r1, r0, #20
 8007170:	f100 0210 	add.w	r2, r0, #16
 8007174:	4618      	mov	r0, r3
 8007176:	4553      	cmp	r3, sl
 8007178:	db33      	blt.n	80071e2 <__lshift+0xb6>
 800717a:	6920      	ldr	r0, [r4, #16]
 800717c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007180:	f104 0314 	add.w	r3, r4, #20
 8007184:	f019 091f 	ands.w	r9, r9, #31
 8007188:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800718c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007190:	d02b      	beq.n	80071ea <__lshift+0xbe>
 8007192:	f1c9 0e20 	rsb	lr, r9, #32
 8007196:	468a      	mov	sl, r1
 8007198:	2200      	movs	r2, #0
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	fa00 f009 	lsl.w	r0, r0, r9
 80071a0:	4302      	orrs	r2, r0
 80071a2:	f84a 2b04 	str.w	r2, [sl], #4
 80071a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071aa:	459c      	cmp	ip, r3
 80071ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80071b0:	d8f3      	bhi.n	800719a <__lshift+0x6e>
 80071b2:	ebac 0304 	sub.w	r3, ip, r4
 80071b6:	3b15      	subs	r3, #21
 80071b8:	f023 0303 	bic.w	r3, r3, #3
 80071bc:	3304      	adds	r3, #4
 80071be:	f104 0015 	add.w	r0, r4, #21
 80071c2:	4584      	cmp	ip, r0
 80071c4:	bf38      	it	cc
 80071c6:	2304      	movcc	r3, #4
 80071c8:	50ca      	str	r2, [r1, r3]
 80071ca:	b10a      	cbz	r2, 80071d0 <__lshift+0xa4>
 80071cc:	f108 0602 	add.w	r6, r8, #2
 80071d0:	3e01      	subs	r6, #1
 80071d2:	4638      	mov	r0, r7
 80071d4:	612e      	str	r6, [r5, #16]
 80071d6:	4621      	mov	r1, r4
 80071d8:	f7ff fdd6 	bl	8006d88 <_Bfree>
 80071dc:	4628      	mov	r0, r5
 80071de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80071e6:	3301      	adds	r3, #1
 80071e8:	e7c5      	b.n	8007176 <__lshift+0x4a>
 80071ea:	3904      	subs	r1, #4
 80071ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80071f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80071f4:	459c      	cmp	ip, r3
 80071f6:	d8f9      	bhi.n	80071ec <__lshift+0xc0>
 80071f8:	e7ea      	b.n	80071d0 <__lshift+0xa4>
 80071fa:	bf00      	nop
 80071fc:	08008a2f 	.word	0x08008a2f
 8007200:	08008a40 	.word	0x08008a40

08007204 <__mcmp>:
 8007204:	b530      	push	{r4, r5, lr}
 8007206:	6902      	ldr	r2, [r0, #16]
 8007208:	690c      	ldr	r4, [r1, #16]
 800720a:	1b12      	subs	r2, r2, r4
 800720c:	d10e      	bne.n	800722c <__mcmp+0x28>
 800720e:	f100 0314 	add.w	r3, r0, #20
 8007212:	3114      	adds	r1, #20
 8007214:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007218:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800721c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007220:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007224:	42a5      	cmp	r5, r4
 8007226:	d003      	beq.n	8007230 <__mcmp+0x2c>
 8007228:	d305      	bcc.n	8007236 <__mcmp+0x32>
 800722a:	2201      	movs	r2, #1
 800722c:	4610      	mov	r0, r2
 800722e:	bd30      	pop	{r4, r5, pc}
 8007230:	4283      	cmp	r3, r0
 8007232:	d3f3      	bcc.n	800721c <__mcmp+0x18>
 8007234:	e7fa      	b.n	800722c <__mcmp+0x28>
 8007236:	f04f 32ff 	mov.w	r2, #4294967295
 800723a:	e7f7      	b.n	800722c <__mcmp+0x28>

0800723c <__mdiff>:
 800723c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	460c      	mov	r4, r1
 8007242:	4606      	mov	r6, r0
 8007244:	4611      	mov	r1, r2
 8007246:	4620      	mov	r0, r4
 8007248:	4617      	mov	r7, r2
 800724a:	f7ff ffdb 	bl	8007204 <__mcmp>
 800724e:	1e05      	subs	r5, r0, #0
 8007250:	d110      	bne.n	8007274 <__mdiff+0x38>
 8007252:	4629      	mov	r1, r5
 8007254:	4630      	mov	r0, r6
 8007256:	f7ff fd57 	bl	8006d08 <_Balloc>
 800725a:	b930      	cbnz	r0, 800726a <__mdiff+0x2e>
 800725c:	4b39      	ldr	r3, [pc, #228]	; (8007344 <__mdiff+0x108>)
 800725e:	4602      	mov	r2, r0
 8007260:	f240 2132 	movw	r1, #562	; 0x232
 8007264:	4838      	ldr	r0, [pc, #224]	; (8007348 <__mdiff+0x10c>)
 8007266:	f000 fa5d 	bl	8007724 <__assert_func>
 800726a:	2301      	movs	r3, #1
 800726c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007274:	bfa4      	itt	ge
 8007276:	463b      	movge	r3, r7
 8007278:	4627      	movge	r7, r4
 800727a:	4630      	mov	r0, r6
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	bfa6      	itte	ge
 8007280:	461c      	movge	r4, r3
 8007282:	2500      	movge	r5, #0
 8007284:	2501      	movlt	r5, #1
 8007286:	f7ff fd3f 	bl	8006d08 <_Balloc>
 800728a:	b920      	cbnz	r0, 8007296 <__mdiff+0x5a>
 800728c:	4b2d      	ldr	r3, [pc, #180]	; (8007344 <__mdiff+0x108>)
 800728e:	4602      	mov	r2, r0
 8007290:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007294:	e7e6      	b.n	8007264 <__mdiff+0x28>
 8007296:	693e      	ldr	r6, [r7, #16]
 8007298:	60c5      	str	r5, [r0, #12]
 800729a:	6925      	ldr	r5, [r4, #16]
 800729c:	f107 0114 	add.w	r1, r7, #20
 80072a0:	f104 0914 	add.w	r9, r4, #20
 80072a4:	f100 0e14 	add.w	lr, r0, #20
 80072a8:	f107 0210 	add.w	r2, r7, #16
 80072ac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80072b0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80072b4:	46f2      	mov	sl, lr
 80072b6:	2700      	movs	r7, #0
 80072b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80072bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80072c0:	fa1f f883 	uxth.w	r8, r3
 80072c4:	fa17 f78b 	uxtah	r7, r7, fp
 80072c8:	0c1b      	lsrs	r3, r3, #16
 80072ca:	eba7 0808 	sub.w	r8, r7, r8
 80072ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072d6:	fa1f f888 	uxth.w	r8, r8
 80072da:	141f      	asrs	r7, r3, #16
 80072dc:	454d      	cmp	r5, r9
 80072de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80072e2:	f84a 3b04 	str.w	r3, [sl], #4
 80072e6:	d8e7      	bhi.n	80072b8 <__mdiff+0x7c>
 80072e8:	1b2b      	subs	r3, r5, r4
 80072ea:	3b15      	subs	r3, #21
 80072ec:	f023 0303 	bic.w	r3, r3, #3
 80072f0:	3304      	adds	r3, #4
 80072f2:	3415      	adds	r4, #21
 80072f4:	42a5      	cmp	r5, r4
 80072f6:	bf38      	it	cc
 80072f8:	2304      	movcc	r3, #4
 80072fa:	4419      	add	r1, r3
 80072fc:	4473      	add	r3, lr
 80072fe:	469e      	mov	lr, r3
 8007300:	460d      	mov	r5, r1
 8007302:	4565      	cmp	r5, ip
 8007304:	d30e      	bcc.n	8007324 <__mdiff+0xe8>
 8007306:	f10c 0203 	add.w	r2, ip, #3
 800730a:	1a52      	subs	r2, r2, r1
 800730c:	f022 0203 	bic.w	r2, r2, #3
 8007310:	3903      	subs	r1, #3
 8007312:	458c      	cmp	ip, r1
 8007314:	bf38      	it	cc
 8007316:	2200      	movcc	r2, #0
 8007318:	441a      	add	r2, r3
 800731a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800731e:	b17b      	cbz	r3, 8007340 <__mdiff+0x104>
 8007320:	6106      	str	r6, [r0, #16]
 8007322:	e7a5      	b.n	8007270 <__mdiff+0x34>
 8007324:	f855 8b04 	ldr.w	r8, [r5], #4
 8007328:	fa17 f488 	uxtah	r4, r7, r8
 800732c:	1422      	asrs	r2, r4, #16
 800732e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007332:	b2a4      	uxth	r4, r4
 8007334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007338:	f84e 4b04 	str.w	r4, [lr], #4
 800733c:	1417      	asrs	r7, r2, #16
 800733e:	e7e0      	b.n	8007302 <__mdiff+0xc6>
 8007340:	3e01      	subs	r6, #1
 8007342:	e7ea      	b.n	800731a <__mdiff+0xde>
 8007344:	08008a2f 	.word	0x08008a2f
 8007348:	08008a40 	.word	0x08008a40

0800734c <__d2b>:
 800734c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007350:	4689      	mov	r9, r1
 8007352:	2101      	movs	r1, #1
 8007354:	ec57 6b10 	vmov	r6, r7, d0
 8007358:	4690      	mov	r8, r2
 800735a:	f7ff fcd5 	bl	8006d08 <_Balloc>
 800735e:	4604      	mov	r4, r0
 8007360:	b930      	cbnz	r0, 8007370 <__d2b+0x24>
 8007362:	4602      	mov	r2, r0
 8007364:	4b25      	ldr	r3, [pc, #148]	; (80073fc <__d2b+0xb0>)
 8007366:	4826      	ldr	r0, [pc, #152]	; (8007400 <__d2b+0xb4>)
 8007368:	f240 310a 	movw	r1, #778	; 0x30a
 800736c:	f000 f9da 	bl	8007724 <__assert_func>
 8007370:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007374:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007378:	bb35      	cbnz	r5, 80073c8 <__d2b+0x7c>
 800737a:	2e00      	cmp	r6, #0
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	d028      	beq.n	80073d2 <__d2b+0x86>
 8007380:	4668      	mov	r0, sp
 8007382:	9600      	str	r6, [sp, #0]
 8007384:	f7ff fd8c 	bl	8006ea0 <__lo0bits>
 8007388:	9900      	ldr	r1, [sp, #0]
 800738a:	b300      	cbz	r0, 80073ce <__d2b+0x82>
 800738c:	9a01      	ldr	r2, [sp, #4]
 800738e:	f1c0 0320 	rsb	r3, r0, #32
 8007392:	fa02 f303 	lsl.w	r3, r2, r3
 8007396:	430b      	orrs	r3, r1
 8007398:	40c2      	lsrs	r2, r0
 800739a:	6163      	str	r3, [r4, #20]
 800739c:	9201      	str	r2, [sp, #4]
 800739e:	9b01      	ldr	r3, [sp, #4]
 80073a0:	61a3      	str	r3, [r4, #24]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	bf14      	ite	ne
 80073a6:	2202      	movne	r2, #2
 80073a8:	2201      	moveq	r2, #1
 80073aa:	6122      	str	r2, [r4, #16]
 80073ac:	b1d5      	cbz	r5, 80073e4 <__d2b+0x98>
 80073ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073b2:	4405      	add	r5, r0
 80073b4:	f8c9 5000 	str.w	r5, [r9]
 80073b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073bc:	f8c8 0000 	str.w	r0, [r8]
 80073c0:	4620      	mov	r0, r4
 80073c2:	b003      	add	sp, #12
 80073c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073cc:	e7d5      	b.n	800737a <__d2b+0x2e>
 80073ce:	6161      	str	r1, [r4, #20]
 80073d0:	e7e5      	b.n	800739e <__d2b+0x52>
 80073d2:	a801      	add	r0, sp, #4
 80073d4:	f7ff fd64 	bl	8006ea0 <__lo0bits>
 80073d8:	9b01      	ldr	r3, [sp, #4]
 80073da:	6163      	str	r3, [r4, #20]
 80073dc:	2201      	movs	r2, #1
 80073de:	6122      	str	r2, [r4, #16]
 80073e0:	3020      	adds	r0, #32
 80073e2:	e7e3      	b.n	80073ac <__d2b+0x60>
 80073e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073ec:	f8c9 0000 	str.w	r0, [r9]
 80073f0:	6918      	ldr	r0, [r3, #16]
 80073f2:	f7ff fd35 	bl	8006e60 <__hi0bits>
 80073f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073fa:	e7df      	b.n	80073bc <__d2b+0x70>
 80073fc:	08008a2f 	.word	0x08008a2f
 8007400:	08008a40 	.word	0x08008a40

08007404 <_calloc_r>:
 8007404:	b513      	push	{r0, r1, r4, lr}
 8007406:	434a      	muls	r2, r1
 8007408:	4611      	mov	r1, r2
 800740a:	9201      	str	r2, [sp, #4]
 800740c:	f7fe f900 	bl	8005610 <_malloc_r>
 8007410:	4604      	mov	r4, r0
 8007412:	b118      	cbz	r0, 800741c <_calloc_r+0x18>
 8007414:	9a01      	ldr	r2, [sp, #4]
 8007416:	2100      	movs	r1, #0
 8007418:	f7fe f8a2 	bl	8005560 <memset>
 800741c:	4620      	mov	r0, r4
 800741e:	b002      	add	sp, #8
 8007420:	bd10      	pop	{r4, pc}

08007422 <_realloc_r>:
 8007422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007424:	4607      	mov	r7, r0
 8007426:	4614      	mov	r4, r2
 8007428:	460e      	mov	r6, r1
 800742a:	b921      	cbnz	r1, 8007436 <_realloc_r+0x14>
 800742c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007430:	4611      	mov	r1, r2
 8007432:	f7fe b8ed 	b.w	8005610 <_malloc_r>
 8007436:	b922      	cbnz	r2, 8007442 <_realloc_r+0x20>
 8007438:	f7fe f89a 	bl	8005570 <_free_r>
 800743c:	4625      	mov	r5, r4
 800743e:	4628      	mov	r0, r5
 8007440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007442:	f000 f9ce 	bl	80077e2 <_malloc_usable_size_r>
 8007446:	42a0      	cmp	r0, r4
 8007448:	d20f      	bcs.n	800746a <_realloc_r+0x48>
 800744a:	4621      	mov	r1, r4
 800744c:	4638      	mov	r0, r7
 800744e:	f7fe f8df 	bl	8005610 <_malloc_r>
 8007452:	4605      	mov	r5, r0
 8007454:	2800      	cmp	r0, #0
 8007456:	d0f2      	beq.n	800743e <_realloc_r+0x1c>
 8007458:	4631      	mov	r1, r6
 800745a:	4622      	mov	r2, r4
 800745c:	f7fe f872 	bl	8005544 <memcpy>
 8007460:	4631      	mov	r1, r6
 8007462:	4638      	mov	r0, r7
 8007464:	f7fe f884 	bl	8005570 <_free_r>
 8007468:	e7e9      	b.n	800743e <_realloc_r+0x1c>
 800746a:	4635      	mov	r5, r6
 800746c:	e7e7      	b.n	800743e <_realloc_r+0x1c>

0800746e <__ssputs_r>:
 800746e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007472:	688e      	ldr	r6, [r1, #8]
 8007474:	429e      	cmp	r6, r3
 8007476:	4682      	mov	sl, r0
 8007478:	460c      	mov	r4, r1
 800747a:	4690      	mov	r8, r2
 800747c:	461f      	mov	r7, r3
 800747e:	d838      	bhi.n	80074f2 <__ssputs_r+0x84>
 8007480:	898a      	ldrh	r2, [r1, #12]
 8007482:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007486:	d032      	beq.n	80074ee <__ssputs_r+0x80>
 8007488:	6825      	ldr	r5, [r4, #0]
 800748a:	6909      	ldr	r1, [r1, #16]
 800748c:	eba5 0901 	sub.w	r9, r5, r1
 8007490:	6965      	ldr	r5, [r4, #20]
 8007492:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007496:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800749a:	3301      	adds	r3, #1
 800749c:	444b      	add	r3, r9
 800749e:	106d      	asrs	r5, r5, #1
 80074a0:	429d      	cmp	r5, r3
 80074a2:	bf38      	it	cc
 80074a4:	461d      	movcc	r5, r3
 80074a6:	0553      	lsls	r3, r2, #21
 80074a8:	d531      	bpl.n	800750e <__ssputs_r+0xa0>
 80074aa:	4629      	mov	r1, r5
 80074ac:	f7fe f8b0 	bl	8005610 <_malloc_r>
 80074b0:	4606      	mov	r6, r0
 80074b2:	b950      	cbnz	r0, 80074ca <__ssputs_r+0x5c>
 80074b4:	230c      	movs	r3, #12
 80074b6:	f8ca 3000 	str.w	r3, [sl]
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c0:	81a3      	strh	r3, [r4, #12]
 80074c2:	f04f 30ff 	mov.w	r0, #4294967295
 80074c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ca:	6921      	ldr	r1, [r4, #16]
 80074cc:	464a      	mov	r2, r9
 80074ce:	f7fe f839 	bl	8005544 <memcpy>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074dc:	81a3      	strh	r3, [r4, #12]
 80074de:	6126      	str	r6, [r4, #16]
 80074e0:	6165      	str	r5, [r4, #20]
 80074e2:	444e      	add	r6, r9
 80074e4:	eba5 0509 	sub.w	r5, r5, r9
 80074e8:	6026      	str	r6, [r4, #0]
 80074ea:	60a5      	str	r5, [r4, #8]
 80074ec:	463e      	mov	r6, r7
 80074ee:	42be      	cmp	r6, r7
 80074f0:	d900      	bls.n	80074f4 <__ssputs_r+0x86>
 80074f2:	463e      	mov	r6, r7
 80074f4:	4632      	mov	r2, r6
 80074f6:	6820      	ldr	r0, [r4, #0]
 80074f8:	4641      	mov	r1, r8
 80074fa:	f000 f958 	bl	80077ae <memmove>
 80074fe:	68a3      	ldr	r3, [r4, #8]
 8007500:	6822      	ldr	r2, [r4, #0]
 8007502:	1b9b      	subs	r3, r3, r6
 8007504:	4432      	add	r2, r6
 8007506:	60a3      	str	r3, [r4, #8]
 8007508:	6022      	str	r2, [r4, #0]
 800750a:	2000      	movs	r0, #0
 800750c:	e7db      	b.n	80074c6 <__ssputs_r+0x58>
 800750e:	462a      	mov	r2, r5
 8007510:	f7ff ff87 	bl	8007422 <_realloc_r>
 8007514:	4606      	mov	r6, r0
 8007516:	2800      	cmp	r0, #0
 8007518:	d1e1      	bne.n	80074de <__ssputs_r+0x70>
 800751a:	6921      	ldr	r1, [r4, #16]
 800751c:	4650      	mov	r0, sl
 800751e:	f7fe f827 	bl	8005570 <_free_r>
 8007522:	e7c7      	b.n	80074b4 <__ssputs_r+0x46>

08007524 <_svfiprintf_r>:
 8007524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007528:	4698      	mov	r8, r3
 800752a:	898b      	ldrh	r3, [r1, #12]
 800752c:	061b      	lsls	r3, r3, #24
 800752e:	b09d      	sub	sp, #116	; 0x74
 8007530:	4607      	mov	r7, r0
 8007532:	460d      	mov	r5, r1
 8007534:	4614      	mov	r4, r2
 8007536:	d50e      	bpl.n	8007556 <_svfiprintf_r+0x32>
 8007538:	690b      	ldr	r3, [r1, #16]
 800753a:	b963      	cbnz	r3, 8007556 <_svfiprintf_r+0x32>
 800753c:	2140      	movs	r1, #64	; 0x40
 800753e:	f7fe f867 	bl	8005610 <_malloc_r>
 8007542:	6028      	str	r0, [r5, #0]
 8007544:	6128      	str	r0, [r5, #16]
 8007546:	b920      	cbnz	r0, 8007552 <_svfiprintf_r+0x2e>
 8007548:	230c      	movs	r3, #12
 800754a:	603b      	str	r3, [r7, #0]
 800754c:	f04f 30ff 	mov.w	r0, #4294967295
 8007550:	e0d1      	b.n	80076f6 <_svfiprintf_r+0x1d2>
 8007552:	2340      	movs	r3, #64	; 0x40
 8007554:	616b      	str	r3, [r5, #20]
 8007556:	2300      	movs	r3, #0
 8007558:	9309      	str	r3, [sp, #36]	; 0x24
 800755a:	2320      	movs	r3, #32
 800755c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007560:	f8cd 800c 	str.w	r8, [sp, #12]
 8007564:	2330      	movs	r3, #48	; 0x30
 8007566:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007710 <_svfiprintf_r+0x1ec>
 800756a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800756e:	f04f 0901 	mov.w	r9, #1
 8007572:	4623      	mov	r3, r4
 8007574:	469a      	mov	sl, r3
 8007576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800757a:	b10a      	cbz	r2, 8007580 <_svfiprintf_r+0x5c>
 800757c:	2a25      	cmp	r2, #37	; 0x25
 800757e:	d1f9      	bne.n	8007574 <_svfiprintf_r+0x50>
 8007580:	ebba 0b04 	subs.w	fp, sl, r4
 8007584:	d00b      	beq.n	800759e <_svfiprintf_r+0x7a>
 8007586:	465b      	mov	r3, fp
 8007588:	4622      	mov	r2, r4
 800758a:	4629      	mov	r1, r5
 800758c:	4638      	mov	r0, r7
 800758e:	f7ff ff6e 	bl	800746e <__ssputs_r>
 8007592:	3001      	adds	r0, #1
 8007594:	f000 80aa 	beq.w	80076ec <_svfiprintf_r+0x1c8>
 8007598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800759a:	445a      	add	r2, fp
 800759c:	9209      	str	r2, [sp, #36]	; 0x24
 800759e:	f89a 3000 	ldrb.w	r3, [sl]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 80a2 	beq.w	80076ec <_svfiprintf_r+0x1c8>
 80075a8:	2300      	movs	r3, #0
 80075aa:	f04f 32ff 	mov.w	r2, #4294967295
 80075ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075b2:	f10a 0a01 	add.w	sl, sl, #1
 80075b6:	9304      	str	r3, [sp, #16]
 80075b8:	9307      	str	r3, [sp, #28]
 80075ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075be:	931a      	str	r3, [sp, #104]	; 0x68
 80075c0:	4654      	mov	r4, sl
 80075c2:	2205      	movs	r2, #5
 80075c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c8:	4851      	ldr	r0, [pc, #324]	; (8007710 <_svfiprintf_r+0x1ec>)
 80075ca:	f7f8 fe09 	bl	80001e0 <memchr>
 80075ce:	9a04      	ldr	r2, [sp, #16]
 80075d0:	b9d8      	cbnz	r0, 800760a <_svfiprintf_r+0xe6>
 80075d2:	06d0      	lsls	r0, r2, #27
 80075d4:	bf44      	itt	mi
 80075d6:	2320      	movmi	r3, #32
 80075d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075dc:	0711      	lsls	r1, r2, #28
 80075de:	bf44      	itt	mi
 80075e0:	232b      	movmi	r3, #43	; 0x2b
 80075e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075e6:	f89a 3000 	ldrb.w	r3, [sl]
 80075ea:	2b2a      	cmp	r3, #42	; 0x2a
 80075ec:	d015      	beq.n	800761a <_svfiprintf_r+0xf6>
 80075ee:	9a07      	ldr	r2, [sp, #28]
 80075f0:	4654      	mov	r4, sl
 80075f2:	2000      	movs	r0, #0
 80075f4:	f04f 0c0a 	mov.w	ip, #10
 80075f8:	4621      	mov	r1, r4
 80075fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075fe:	3b30      	subs	r3, #48	; 0x30
 8007600:	2b09      	cmp	r3, #9
 8007602:	d94e      	bls.n	80076a2 <_svfiprintf_r+0x17e>
 8007604:	b1b0      	cbz	r0, 8007634 <_svfiprintf_r+0x110>
 8007606:	9207      	str	r2, [sp, #28]
 8007608:	e014      	b.n	8007634 <_svfiprintf_r+0x110>
 800760a:	eba0 0308 	sub.w	r3, r0, r8
 800760e:	fa09 f303 	lsl.w	r3, r9, r3
 8007612:	4313      	orrs	r3, r2
 8007614:	9304      	str	r3, [sp, #16]
 8007616:	46a2      	mov	sl, r4
 8007618:	e7d2      	b.n	80075c0 <_svfiprintf_r+0x9c>
 800761a:	9b03      	ldr	r3, [sp, #12]
 800761c:	1d19      	adds	r1, r3, #4
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	9103      	str	r1, [sp, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	bfbb      	ittet	lt
 8007626:	425b      	neglt	r3, r3
 8007628:	f042 0202 	orrlt.w	r2, r2, #2
 800762c:	9307      	strge	r3, [sp, #28]
 800762e:	9307      	strlt	r3, [sp, #28]
 8007630:	bfb8      	it	lt
 8007632:	9204      	strlt	r2, [sp, #16]
 8007634:	7823      	ldrb	r3, [r4, #0]
 8007636:	2b2e      	cmp	r3, #46	; 0x2e
 8007638:	d10c      	bne.n	8007654 <_svfiprintf_r+0x130>
 800763a:	7863      	ldrb	r3, [r4, #1]
 800763c:	2b2a      	cmp	r3, #42	; 0x2a
 800763e:	d135      	bne.n	80076ac <_svfiprintf_r+0x188>
 8007640:	9b03      	ldr	r3, [sp, #12]
 8007642:	1d1a      	adds	r2, r3, #4
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	9203      	str	r2, [sp, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	bfb8      	it	lt
 800764c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007650:	3402      	adds	r4, #2
 8007652:	9305      	str	r3, [sp, #20]
 8007654:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007720 <_svfiprintf_r+0x1fc>
 8007658:	7821      	ldrb	r1, [r4, #0]
 800765a:	2203      	movs	r2, #3
 800765c:	4650      	mov	r0, sl
 800765e:	f7f8 fdbf 	bl	80001e0 <memchr>
 8007662:	b140      	cbz	r0, 8007676 <_svfiprintf_r+0x152>
 8007664:	2340      	movs	r3, #64	; 0x40
 8007666:	eba0 000a 	sub.w	r0, r0, sl
 800766a:	fa03 f000 	lsl.w	r0, r3, r0
 800766e:	9b04      	ldr	r3, [sp, #16]
 8007670:	4303      	orrs	r3, r0
 8007672:	3401      	adds	r4, #1
 8007674:	9304      	str	r3, [sp, #16]
 8007676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800767a:	4826      	ldr	r0, [pc, #152]	; (8007714 <_svfiprintf_r+0x1f0>)
 800767c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007680:	2206      	movs	r2, #6
 8007682:	f7f8 fdad 	bl	80001e0 <memchr>
 8007686:	2800      	cmp	r0, #0
 8007688:	d038      	beq.n	80076fc <_svfiprintf_r+0x1d8>
 800768a:	4b23      	ldr	r3, [pc, #140]	; (8007718 <_svfiprintf_r+0x1f4>)
 800768c:	bb1b      	cbnz	r3, 80076d6 <_svfiprintf_r+0x1b2>
 800768e:	9b03      	ldr	r3, [sp, #12]
 8007690:	3307      	adds	r3, #7
 8007692:	f023 0307 	bic.w	r3, r3, #7
 8007696:	3308      	adds	r3, #8
 8007698:	9303      	str	r3, [sp, #12]
 800769a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769c:	4433      	add	r3, r6
 800769e:	9309      	str	r3, [sp, #36]	; 0x24
 80076a0:	e767      	b.n	8007572 <_svfiprintf_r+0x4e>
 80076a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80076a6:	460c      	mov	r4, r1
 80076a8:	2001      	movs	r0, #1
 80076aa:	e7a5      	b.n	80075f8 <_svfiprintf_r+0xd4>
 80076ac:	2300      	movs	r3, #0
 80076ae:	3401      	adds	r4, #1
 80076b0:	9305      	str	r3, [sp, #20]
 80076b2:	4619      	mov	r1, r3
 80076b4:	f04f 0c0a 	mov.w	ip, #10
 80076b8:	4620      	mov	r0, r4
 80076ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076be:	3a30      	subs	r2, #48	; 0x30
 80076c0:	2a09      	cmp	r2, #9
 80076c2:	d903      	bls.n	80076cc <_svfiprintf_r+0x1a8>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0c5      	beq.n	8007654 <_svfiprintf_r+0x130>
 80076c8:	9105      	str	r1, [sp, #20]
 80076ca:	e7c3      	b.n	8007654 <_svfiprintf_r+0x130>
 80076cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80076d0:	4604      	mov	r4, r0
 80076d2:	2301      	movs	r3, #1
 80076d4:	e7f0      	b.n	80076b8 <_svfiprintf_r+0x194>
 80076d6:	ab03      	add	r3, sp, #12
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	462a      	mov	r2, r5
 80076dc:	4b0f      	ldr	r3, [pc, #60]	; (800771c <_svfiprintf_r+0x1f8>)
 80076de:	a904      	add	r1, sp, #16
 80076e0:	4638      	mov	r0, r7
 80076e2:	f7fe f88f 	bl	8005804 <_printf_float>
 80076e6:	1c42      	adds	r2, r0, #1
 80076e8:	4606      	mov	r6, r0
 80076ea:	d1d6      	bne.n	800769a <_svfiprintf_r+0x176>
 80076ec:	89ab      	ldrh	r3, [r5, #12]
 80076ee:	065b      	lsls	r3, r3, #25
 80076f0:	f53f af2c 	bmi.w	800754c <_svfiprintf_r+0x28>
 80076f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076f6:	b01d      	add	sp, #116	; 0x74
 80076f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fc:	ab03      	add	r3, sp, #12
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	462a      	mov	r2, r5
 8007702:	4b06      	ldr	r3, [pc, #24]	; (800771c <_svfiprintf_r+0x1f8>)
 8007704:	a904      	add	r1, sp, #16
 8007706:	4638      	mov	r0, r7
 8007708:	f7fe fb20 	bl	8005d4c <_printf_i>
 800770c:	e7eb      	b.n	80076e6 <_svfiprintf_r+0x1c2>
 800770e:	bf00      	nop
 8007710:	08008b9c 	.word	0x08008b9c
 8007714:	08008ba6 	.word	0x08008ba6
 8007718:	08005805 	.word	0x08005805
 800771c:	0800746f 	.word	0x0800746f
 8007720:	08008ba2 	.word	0x08008ba2

08007724 <__assert_func>:
 8007724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007726:	4614      	mov	r4, r2
 8007728:	461a      	mov	r2, r3
 800772a:	4b09      	ldr	r3, [pc, #36]	; (8007750 <__assert_func+0x2c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4605      	mov	r5, r0
 8007730:	68d8      	ldr	r0, [r3, #12]
 8007732:	b14c      	cbz	r4, 8007748 <__assert_func+0x24>
 8007734:	4b07      	ldr	r3, [pc, #28]	; (8007754 <__assert_func+0x30>)
 8007736:	9100      	str	r1, [sp, #0]
 8007738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800773c:	4906      	ldr	r1, [pc, #24]	; (8007758 <__assert_func+0x34>)
 800773e:	462b      	mov	r3, r5
 8007740:	f000 f80e 	bl	8007760 <fiprintf>
 8007744:	f000 fa7c 	bl	8007c40 <abort>
 8007748:	4b04      	ldr	r3, [pc, #16]	; (800775c <__assert_func+0x38>)
 800774a:	461c      	mov	r4, r3
 800774c:	e7f3      	b.n	8007736 <__assert_func+0x12>
 800774e:	bf00      	nop
 8007750:	20000610 	.word	0x20000610
 8007754:	08008bad 	.word	0x08008bad
 8007758:	08008bba 	.word	0x08008bba
 800775c:	08008be8 	.word	0x08008be8

08007760 <fiprintf>:
 8007760:	b40e      	push	{r1, r2, r3}
 8007762:	b503      	push	{r0, r1, lr}
 8007764:	4601      	mov	r1, r0
 8007766:	ab03      	add	r3, sp, #12
 8007768:	4805      	ldr	r0, [pc, #20]	; (8007780 <fiprintf+0x20>)
 800776a:	f853 2b04 	ldr.w	r2, [r3], #4
 800776e:	6800      	ldr	r0, [r0, #0]
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	f000 f867 	bl	8007844 <_vfiprintf_r>
 8007776:	b002      	add	sp, #8
 8007778:	f85d eb04 	ldr.w	lr, [sp], #4
 800777c:	b003      	add	sp, #12
 800777e:	4770      	bx	lr
 8007780:	20000610 	.word	0x20000610

08007784 <__retarget_lock_init_recursive>:
 8007784:	4770      	bx	lr

08007786 <__retarget_lock_acquire_recursive>:
 8007786:	4770      	bx	lr

08007788 <__retarget_lock_release_recursive>:
 8007788:	4770      	bx	lr

0800778a <__ascii_mbtowc>:
 800778a:	b082      	sub	sp, #8
 800778c:	b901      	cbnz	r1, 8007790 <__ascii_mbtowc+0x6>
 800778e:	a901      	add	r1, sp, #4
 8007790:	b142      	cbz	r2, 80077a4 <__ascii_mbtowc+0x1a>
 8007792:	b14b      	cbz	r3, 80077a8 <__ascii_mbtowc+0x1e>
 8007794:	7813      	ldrb	r3, [r2, #0]
 8007796:	600b      	str	r3, [r1, #0]
 8007798:	7812      	ldrb	r2, [r2, #0]
 800779a:	1e10      	subs	r0, r2, #0
 800779c:	bf18      	it	ne
 800779e:	2001      	movne	r0, #1
 80077a0:	b002      	add	sp, #8
 80077a2:	4770      	bx	lr
 80077a4:	4610      	mov	r0, r2
 80077a6:	e7fb      	b.n	80077a0 <__ascii_mbtowc+0x16>
 80077a8:	f06f 0001 	mvn.w	r0, #1
 80077ac:	e7f8      	b.n	80077a0 <__ascii_mbtowc+0x16>

080077ae <memmove>:
 80077ae:	4288      	cmp	r0, r1
 80077b0:	b510      	push	{r4, lr}
 80077b2:	eb01 0402 	add.w	r4, r1, r2
 80077b6:	d902      	bls.n	80077be <memmove+0x10>
 80077b8:	4284      	cmp	r4, r0
 80077ba:	4623      	mov	r3, r4
 80077bc:	d807      	bhi.n	80077ce <memmove+0x20>
 80077be:	1e43      	subs	r3, r0, #1
 80077c0:	42a1      	cmp	r1, r4
 80077c2:	d008      	beq.n	80077d6 <memmove+0x28>
 80077c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077cc:	e7f8      	b.n	80077c0 <memmove+0x12>
 80077ce:	4402      	add	r2, r0
 80077d0:	4601      	mov	r1, r0
 80077d2:	428a      	cmp	r2, r1
 80077d4:	d100      	bne.n	80077d8 <memmove+0x2a>
 80077d6:	bd10      	pop	{r4, pc}
 80077d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077e0:	e7f7      	b.n	80077d2 <memmove+0x24>

080077e2 <_malloc_usable_size_r>:
 80077e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077e6:	1f18      	subs	r0, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	bfbc      	itt	lt
 80077ec:	580b      	ldrlt	r3, [r1, r0]
 80077ee:	18c0      	addlt	r0, r0, r3
 80077f0:	4770      	bx	lr

080077f2 <__sfputc_r>:
 80077f2:	6893      	ldr	r3, [r2, #8]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	b410      	push	{r4}
 80077fa:	6093      	str	r3, [r2, #8]
 80077fc:	da08      	bge.n	8007810 <__sfputc_r+0x1e>
 80077fe:	6994      	ldr	r4, [r2, #24]
 8007800:	42a3      	cmp	r3, r4
 8007802:	db01      	blt.n	8007808 <__sfputc_r+0x16>
 8007804:	290a      	cmp	r1, #10
 8007806:	d103      	bne.n	8007810 <__sfputc_r+0x1e>
 8007808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800780c:	f000 b94a 	b.w	8007aa4 <__swbuf_r>
 8007810:	6813      	ldr	r3, [r2, #0]
 8007812:	1c58      	adds	r0, r3, #1
 8007814:	6010      	str	r0, [r2, #0]
 8007816:	7019      	strb	r1, [r3, #0]
 8007818:	4608      	mov	r0, r1
 800781a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800781e:	4770      	bx	lr

08007820 <__sfputs_r>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	4606      	mov	r6, r0
 8007824:	460f      	mov	r7, r1
 8007826:	4614      	mov	r4, r2
 8007828:	18d5      	adds	r5, r2, r3
 800782a:	42ac      	cmp	r4, r5
 800782c:	d101      	bne.n	8007832 <__sfputs_r+0x12>
 800782e:	2000      	movs	r0, #0
 8007830:	e007      	b.n	8007842 <__sfputs_r+0x22>
 8007832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007836:	463a      	mov	r2, r7
 8007838:	4630      	mov	r0, r6
 800783a:	f7ff ffda 	bl	80077f2 <__sfputc_r>
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	d1f3      	bne.n	800782a <__sfputs_r+0xa>
 8007842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007844 <_vfiprintf_r>:
 8007844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007848:	460d      	mov	r5, r1
 800784a:	b09d      	sub	sp, #116	; 0x74
 800784c:	4614      	mov	r4, r2
 800784e:	4698      	mov	r8, r3
 8007850:	4606      	mov	r6, r0
 8007852:	b118      	cbz	r0, 800785c <_vfiprintf_r+0x18>
 8007854:	6983      	ldr	r3, [r0, #24]
 8007856:	b90b      	cbnz	r3, 800785c <_vfiprintf_r+0x18>
 8007858:	f000 fb14 	bl	8007e84 <__sinit>
 800785c:	4b89      	ldr	r3, [pc, #548]	; (8007a84 <_vfiprintf_r+0x240>)
 800785e:	429d      	cmp	r5, r3
 8007860:	d11b      	bne.n	800789a <_vfiprintf_r+0x56>
 8007862:	6875      	ldr	r5, [r6, #4]
 8007864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007866:	07d9      	lsls	r1, r3, #31
 8007868:	d405      	bmi.n	8007876 <_vfiprintf_r+0x32>
 800786a:	89ab      	ldrh	r3, [r5, #12]
 800786c:	059a      	lsls	r2, r3, #22
 800786e:	d402      	bmi.n	8007876 <_vfiprintf_r+0x32>
 8007870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007872:	f7ff ff88 	bl	8007786 <__retarget_lock_acquire_recursive>
 8007876:	89ab      	ldrh	r3, [r5, #12]
 8007878:	071b      	lsls	r3, r3, #28
 800787a:	d501      	bpl.n	8007880 <_vfiprintf_r+0x3c>
 800787c:	692b      	ldr	r3, [r5, #16]
 800787e:	b9eb      	cbnz	r3, 80078bc <_vfiprintf_r+0x78>
 8007880:	4629      	mov	r1, r5
 8007882:	4630      	mov	r0, r6
 8007884:	f000 f96e 	bl	8007b64 <__swsetup_r>
 8007888:	b1c0      	cbz	r0, 80078bc <_vfiprintf_r+0x78>
 800788a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800788c:	07dc      	lsls	r4, r3, #31
 800788e:	d50e      	bpl.n	80078ae <_vfiprintf_r+0x6a>
 8007890:	f04f 30ff 	mov.w	r0, #4294967295
 8007894:	b01d      	add	sp, #116	; 0x74
 8007896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789a:	4b7b      	ldr	r3, [pc, #492]	; (8007a88 <_vfiprintf_r+0x244>)
 800789c:	429d      	cmp	r5, r3
 800789e:	d101      	bne.n	80078a4 <_vfiprintf_r+0x60>
 80078a0:	68b5      	ldr	r5, [r6, #8]
 80078a2:	e7df      	b.n	8007864 <_vfiprintf_r+0x20>
 80078a4:	4b79      	ldr	r3, [pc, #484]	; (8007a8c <_vfiprintf_r+0x248>)
 80078a6:	429d      	cmp	r5, r3
 80078a8:	bf08      	it	eq
 80078aa:	68f5      	ldreq	r5, [r6, #12]
 80078ac:	e7da      	b.n	8007864 <_vfiprintf_r+0x20>
 80078ae:	89ab      	ldrh	r3, [r5, #12]
 80078b0:	0598      	lsls	r0, r3, #22
 80078b2:	d4ed      	bmi.n	8007890 <_vfiprintf_r+0x4c>
 80078b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078b6:	f7ff ff67 	bl	8007788 <__retarget_lock_release_recursive>
 80078ba:	e7e9      	b.n	8007890 <_vfiprintf_r+0x4c>
 80078bc:	2300      	movs	r3, #0
 80078be:	9309      	str	r3, [sp, #36]	; 0x24
 80078c0:	2320      	movs	r3, #32
 80078c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80078ca:	2330      	movs	r3, #48	; 0x30
 80078cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a90 <_vfiprintf_r+0x24c>
 80078d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078d4:	f04f 0901 	mov.w	r9, #1
 80078d8:	4623      	mov	r3, r4
 80078da:	469a      	mov	sl, r3
 80078dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078e0:	b10a      	cbz	r2, 80078e6 <_vfiprintf_r+0xa2>
 80078e2:	2a25      	cmp	r2, #37	; 0x25
 80078e4:	d1f9      	bne.n	80078da <_vfiprintf_r+0x96>
 80078e6:	ebba 0b04 	subs.w	fp, sl, r4
 80078ea:	d00b      	beq.n	8007904 <_vfiprintf_r+0xc0>
 80078ec:	465b      	mov	r3, fp
 80078ee:	4622      	mov	r2, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	4630      	mov	r0, r6
 80078f4:	f7ff ff94 	bl	8007820 <__sfputs_r>
 80078f8:	3001      	adds	r0, #1
 80078fa:	f000 80aa 	beq.w	8007a52 <_vfiprintf_r+0x20e>
 80078fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007900:	445a      	add	r2, fp
 8007902:	9209      	str	r2, [sp, #36]	; 0x24
 8007904:	f89a 3000 	ldrb.w	r3, [sl]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 80a2 	beq.w	8007a52 <_vfiprintf_r+0x20e>
 800790e:	2300      	movs	r3, #0
 8007910:	f04f 32ff 	mov.w	r2, #4294967295
 8007914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007918:	f10a 0a01 	add.w	sl, sl, #1
 800791c:	9304      	str	r3, [sp, #16]
 800791e:	9307      	str	r3, [sp, #28]
 8007920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007924:	931a      	str	r3, [sp, #104]	; 0x68
 8007926:	4654      	mov	r4, sl
 8007928:	2205      	movs	r2, #5
 800792a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800792e:	4858      	ldr	r0, [pc, #352]	; (8007a90 <_vfiprintf_r+0x24c>)
 8007930:	f7f8 fc56 	bl	80001e0 <memchr>
 8007934:	9a04      	ldr	r2, [sp, #16]
 8007936:	b9d8      	cbnz	r0, 8007970 <_vfiprintf_r+0x12c>
 8007938:	06d1      	lsls	r1, r2, #27
 800793a:	bf44      	itt	mi
 800793c:	2320      	movmi	r3, #32
 800793e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007942:	0713      	lsls	r3, r2, #28
 8007944:	bf44      	itt	mi
 8007946:	232b      	movmi	r3, #43	; 0x2b
 8007948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800794c:	f89a 3000 	ldrb.w	r3, [sl]
 8007950:	2b2a      	cmp	r3, #42	; 0x2a
 8007952:	d015      	beq.n	8007980 <_vfiprintf_r+0x13c>
 8007954:	9a07      	ldr	r2, [sp, #28]
 8007956:	4654      	mov	r4, sl
 8007958:	2000      	movs	r0, #0
 800795a:	f04f 0c0a 	mov.w	ip, #10
 800795e:	4621      	mov	r1, r4
 8007960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007964:	3b30      	subs	r3, #48	; 0x30
 8007966:	2b09      	cmp	r3, #9
 8007968:	d94e      	bls.n	8007a08 <_vfiprintf_r+0x1c4>
 800796a:	b1b0      	cbz	r0, 800799a <_vfiprintf_r+0x156>
 800796c:	9207      	str	r2, [sp, #28]
 800796e:	e014      	b.n	800799a <_vfiprintf_r+0x156>
 8007970:	eba0 0308 	sub.w	r3, r0, r8
 8007974:	fa09 f303 	lsl.w	r3, r9, r3
 8007978:	4313      	orrs	r3, r2
 800797a:	9304      	str	r3, [sp, #16]
 800797c:	46a2      	mov	sl, r4
 800797e:	e7d2      	b.n	8007926 <_vfiprintf_r+0xe2>
 8007980:	9b03      	ldr	r3, [sp, #12]
 8007982:	1d19      	adds	r1, r3, #4
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	9103      	str	r1, [sp, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	bfbb      	ittet	lt
 800798c:	425b      	neglt	r3, r3
 800798e:	f042 0202 	orrlt.w	r2, r2, #2
 8007992:	9307      	strge	r3, [sp, #28]
 8007994:	9307      	strlt	r3, [sp, #28]
 8007996:	bfb8      	it	lt
 8007998:	9204      	strlt	r2, [sp, #16]
 800799a:	7823      	ldrb	r3, [r4, #0]
 800799c:	2b2e      	cmp	r3, #46	; 0x2e
 800799e:	d10c      	bne.n	80079ba <_vfiprintf_r+0x176>
 80079a0:	7863      	ldrb	r3, [r4, #1]
 80079a2:	2b2a      	cmp	r3, #42	; 0x2a
 80079a4:	d135      	bne.n	8007a12 <_vfiprintf_r+0x1ce>
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	1d1a      	adds	r2, r3, #4
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	9203      	str	r2, [sp, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bfb8      	it	lt
 80079b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80079b6:	3402      	adds	r4, #2
 80079b8:	9305      	str	r3, [sp, #20]
 80079ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007aa0 <_vfiprintf_r+0x25c>
 80079be:	7821      	ldrb	r1, [r4, #0]
 80079c0:	2203      	movs	r2, #3
 80079c2:	4650      	mov	r0, sl
 80079c4:	f7f8 fc0c 	bl	80001e0 <memchr>
 80079c8:	b140      	cbz	r0, 80079dc <_vfiprintf_r+0x198>
 80079ca:	2340      	movs	r3, #64	; 0x40
 80079cc:	eba0 000a 	sub.w	r0, r0, sl
 80079d0:	fa03 f000 	lsl.w	r0, r3, r0
 80079d4:	9b04      	ldr	r3, [sp, #16]
 80079d6:	4303      	orrs	r3, r0
 80079d8:	3401      	adds	r4, #1
 80079da:	9304      	str	r3, [sp, #16]
 80079dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e0:	482c      	ldr	r0, [pc, #176]	; (8007a94 <_vfiprintf_r+0x250>)
 80079e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079e6:	2206      	movs	r2, #6
 80079e8:	f7f8 fbfa 	bl	80001e0 <memchr>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d03f      	beq.n	8007a70 <_vfiprintf_r+0x22c>
 80079f0:	4b29      	ldr	r3, [pc, #164]	; (8007a98 <_vfiprintf_r+0x254>)
 80079f2:	bb1b      	cbnz	r3, 8007a3c <_vfiprintf_r+0x1f8>
 80079f4:	9b03      	ldr	r3, [sp, #12]
 80079f6:	3307      	adds	r3, #7
 80079f8:	f023 0307 	bic.w	r3, r3, #7
 80079fc:	3308      	adds	r3, #8
 80079fe:	9303      	str	r3, [sp, #12]
 8007a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a02:	443b      	add	r3, r7
 8007a04:	9309      	str	r3, [sp, #36]	; 0x24
 8007a06:	e767      	b.n	80078d8 <_vfiprintf_r+0x94>
 8007a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	2001      	movs	r0, #1
 8007a10:	e7a5      	b.n	800795e <_vfiprintf_r+0x11a>
 8007a12:	2300      	movs	r3, #0
 8007a14:	3401      	adds	r4, #1
 8007a16:	9305      	str	r3, [sp, #20]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	f04f 0c0a 	mov.w	ip, #10
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a24:	3a30      	subs	r2, #48	; 0x30
 8007a26:	2a09      	cmp	r2, #9
 8007a28:	d903      	bls.n	8007a32 <_vfiprintf_r+0x1ee>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d0c5      	beq.n	80079ba <_vfiprintf_r+0x176>
 8007a2e:	9105      	str	r1, [sp, #20]
 8007a30:	e7c3      	b.n	80079ba <_vfiprintf_r+0x176>
 8007a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a36:	4604      	mov	r4, r0
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e7f0      	b.n	8007a1e <_vfiprintf_r+0x1da>
 8007a3c:	ab03      	add	r3, sp, #12
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	462a      	mov	r2, r5
 8007a42:	4b16      	ldr	r3, [pc, #88]	; (8007a9c <_vfiprintf_r+0x258>)
 8007a44:	a904      	add	r1, sp, #16
 8007a46:	4630      	mov	r0, r6
 8007a48:	f7fd fedc 	bl	8005804 <_printf_float>
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	1c78      	adds	r0, r7, #1
 8007a50:	d1d6      	bne.n	8007a00 <_vfiprintf_r+0x1bc>
 8007a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a54:	07d9      	lsls	r1, r3, #31
 8007a56:	d405      	bmi.n	8007a64 <_vfiprintf_r+0x220>
 8007a58:	89ab      	ldrh	r3, [r5, #12]
 8007a5a:	059a      	lsls	r2, r3, #22
 8007a5c:	d402      	bmi.n	8007a64 <_vfiprintf_r+0x220>
 8007a5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a60:	f7ff fe92 	bl	8007788 <__retarget_lock_release_recursive>
 8007a64:	89ab      	ldrh	r3, [r5, #12]
 8007a66:	065b      	lsls	r3, r3, #25
 8007a68:	f53f af12 	bmi.w	8007890 <_vfiprintf_r+0x4c>
 8007a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a6e:	e711      	b.n	8007894 <_vfiprintf_r+0x50>
 8007a70:	ab03      	add	r3, sp, #12
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	462a      	mov	r2, r5
 8007a76:	4b09      	ldr	r3, [pc, #36]	; (8007a9c <_vfiprintf_r+0x258>)
 8007a78:	a904      	add	r1, sp, #16
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f7fe f966 	bl	8005d4c <_printf_i>
 8007a80:	e7e4      	b.n	8007a4c <_vfiprintf_r+0x208>
 8007a82:	bf00      	nop
 8007a84:	08008d14 	.word	0x08008d14
 8007a88:	08008d34 	.word	0x08008d34
 8007a8c:	08008cf4 	.word	0x08008cf4
 8007a90:	08008b9c 	.word	0x08008b9c
 8007a94:	08008ba6 	.word	0x08008ba6
 8007a98:	08005805 	.word	0x08005805
 8007a9c:	08007821 	.word	0x08007821
 8007aa0:	08008ba2 	.word	0x08008ba2

08007aa4 <__swbuf_r>:
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa6:	460e      	mov	r6, r1
 8007aa8:	4614      	mov	r4, r2
 8007aaa:	4605      	mov	r5, r0
 8007aac:	b118      	cbz	r0, 8007ab6 <__swbuf_r+0x12>
 8007aae:	6983      	ldr	r3, [r0, #24]
 8007ab0:	b90b      	cbnz	r3, 8007ab6 <__swbuf_r+0x12>
 8007ab2:	f000 f9e7 	bl	8007e84 <__sinit>
 8007ab6:	4b21      	ldr	r3, [pc, #132]	; (8007b3c <__swbuf_r+0x98>)
 8007ab8:	429c      	cmp	r4, r3
 8007aba:	d12b      	bne.n	8007b14 <__swbuf_r+0x70>
 8007abc:	686c      	ldr	r4, [r5, #4]
 8007abe:	69a3      	ldr	r3, [r4, #24]
 8007ac0:	60a3      	str	r3, [r4, #8]
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	071a      	lsls	r2, r3, #28
 8007ac6:	d52f      	bpl.n	8007b28 <__swbuf_r+0x84>
 8007ac8:	6923      	ldr	r3, [r4, #16]
 8007aca:	b36b      	cbz	r3, 8007b28 <__swbuf_r+0x84>
 8007acc:	6923      	ldr	r3, [r4, #16]
 8007ace:	6820      	ldr	r0, [r4, #0]
 8007ad0:	1ac0      	subs	r0, r0, r3
 8007ad2:	6963      	ldr	r3, [r4, #20]
 8007ad4:	b2f6      	uxtb	r6, r6
 8007ad6:	4283      	cmp	r3, r0
 8007ad8:	4637      	mov	r7, r6
 8007ada:	dc04      	bgt.n	8007ae6 <__swbuf_r+0x42>
 8007adc:	4621      	mov	r1, r4
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f000 f93c 	bl	8007d5c <_fflush_r>
 8007ae4:	bb30      	cbnz	r0, 8007b34 <__swbuf_r+0x90>
 8007ae6:	68a3      	ldr	r3, [r4, #8]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	60a3      	str	r3, [r4, #8]
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	6022      	str	r2, [r4, #0]
 8007af2:	701e      	strb	r6, [r3, #0]
 8007af4:	6963      	ldr	r3, [r4, #20]
 8007af6:	3001      	adds	r0, #1
 8007af8:	4283      	cmp	r3, r0
 8007afa:	d004      	beq.n	8007b06 <__swbuf_r+0x62>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	07db      	lsls	r3, r3, #31
 8007b00:	d506      	bpl.n	8007b10 <__swbuf_r+0x6c>
 8007b02:	2e0a      	cmp	r6, #10
 8007b04:	d104      	bne.n	8007b10 <__swbuf_r+0x6c>
 8007b06:	4621      	mov	r1, r4
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 f927 	bl	8007d5c <_fflush_r>
 8007b0e:	b988      	cbnz	r0, 8007b34 <__swbuf_r+0x90>
 8007b10:	4638      	mov	r0, r7
 8007b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b14:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <__swbuf_r+0x9c>)
 8007b16:	429c      	cmp	r4, r3
 8007b18:	d101      	bne.n	8007b1e <__swbuf_r+0x7a>
 8007b1a:	68ac      	ldr	r4, [r5, #8]
 8007b1c:	e7cf      	b.n	8007abe <__swbuf_r+0x1a>
 8007b1e:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <__swbuf_r+0xa0>)
 8007b20:	429c      	cmp	r4, r3
 8007b22:	bf08      	it	eq
 8007b24:	68ec      	ldreq	r4, [r5, #12]
 8007b26:	e7ca      	b.n	8007abe <__swbuf_r+0x1a>
 8007b28:	4621      	mov	r1, r4
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f000 f81a 	bl	8007b64 <__swsetup_r>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d0cb      	beq.n	8007acc <__swbuf_r+0x28>
 8007b34:	f04f 37ff 	mov.w	r7, #4294967295
 8007b38:	e7ea      	b.n	8007b10 <__swbuf_r+0x6c>
 8007b3a:	bf00      	nop
 8007b3c:	08008d14 	.word	0x08008d14
 8007b40:	08008d34 	.word	0x08008d34
 8007b44:	08008cf4 	.word	0x08008cf4

08007b48 <__ascii_wctomb>:
 8007b48:	b149      	cbz	r1, 8007b5e <__ascii_wctomb+0x16>
 8007b4a:	2aff      	cmp	r2, #255	; 0xff
 8007b4c:	bf85      	ittet	hi
 8007b4e:	238a      	movhi	r3, #138	; 0x8a
 8007b50:	6003      	strhi	r3, [r0, #0]
 8007b52:	700a      	strbls	r2, [r1, #0]
 8007b54:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b58:	bf98      	it	ls
 8007b5a:	2001      	movls	r0, #1
 8007b5c:	4770      	bx	lr
 8007b5e:	4608      	mov	r0, r1
 8007b60:	4770      	bx	lr
	...

08007b64 <__swsetup_r>:
 8007b64:	4b32      	ldr	r3, [pc, #200]	; (8007c30 <__swsetup_r+0xcc>)
 8007b66:	b570      	push	{r4, r5, r6, lr}
 8007b68:	681d      	ldr	r5, [r3, #0]
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	b125      	cbz	r5, 8007b7a <__swsetup_r+0x16>
 8007b70:	69ab      	ldr	r3, [r5, #24]
 8007b72:	b913      	cbnz	r3, 8007b7a <__swsetup_r+0x16>
 8007b74:	4628      	mov	r0, r5
 8007b76:	f000 f985 	bl	8007e84 <__sinit>
 8007b7a:	4b2e      	ldr	r3, [pc, #184]	; (8007c34 <__swsetup_r+0xd0>)
 8007b7c:	429c      	cmp	r4, r3
 8007b7e:	d10f      	bne.n	8007ba0 <__swsetup_r+0x3c>
 8007b80:	686c      	ldr	r4, [r5, #4]
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b88:	0719      	lsls	r1, r3, #28
 8007b8a:	d42c      	bmi.n	8007be6 <__swsetup_r+0x82>
 8007b8c:	06dd      	lsls	r5, r3, #27
 8007b8e:	d411      	bmi.n	8007bb4 <__swsetup_r+0x50>
 8007b90:	2309      	movs	r3, #9
 8007b92:	6033      	str	r3, [r6, #0]
 8007b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9e:	e03e      	b.n	8007c1e <__swsetup_r+0xba>
 8007ba0:	4b25      	ldr	r3, [pc, #148]	; (8007c38 <__swsetup_r+0xd4>)
 8007ba2:	429c      	cmp	r4, r3
 8007ba4:	d101      	bne.n	8007baa <__swsetup_r+0x46>
 8007ba6:	68ac      	ldr	r4, [r5, #8]
 8007ba8:	e7eb      	b.n	8007b82 <__swsetup_r+0x1e>
 8007baa:	4b24      	ldr	r3, [pc, #144]	; (8007c3c <__swsetup_r+0xd8>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	bf08      	it	eq
 8007bb0:	68ec      	ldreq	r4, [r5, #12]
 8007bb2:	e7e6      	b.n	8007b82 <__swsetup_r+0x1e>
 8007bb4:	0758      	lsls	r0, r3, #29
 8007bb6:	d512      	bpl.n	8007bde <__swsetup_r+0x7a>
 8007bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bba:	b141      	cbz	r1, 8007bce <__swsetup_r+0x6a>
 8007bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bc0:	4299      	cmp	r1, r3
 8007bc2:	d002      	beq.n	8007bca <__swsetup_r+0x66>
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f7fd fcd3 	bl	8005570 <_free_r>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bd4:	81a3      	strh	r3, [r4, #12]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	6063      	str	r3, [r4, #4]
 8007bda:	6923      	ldr	r3, [r4, #16]
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	f043 0308 	orr.w	r3, r3, #8
 8007be4:	81a3      	strh	r3, [r4, #12]
 8007be6:	6923      	ldr	r3, [r4, #16]
 8007be8:	b94b      	cbnz	r3, 8007bfe <__swsetup_r+0x9a>
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bf4:	d003      	beq.n	8007bfe <__swsetup_r+0x9a>
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f000 fa05 	bl	8008008 <__smakebuf_r>
 8007bfe:	89a0      	ldrh	r0, [r4, #12]
 8007c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c04:	f010 0301 	ands.w	r3, r0, #1
 8007c08:	d00a      	beq.n	8007c20 <__swsetup_r+0xbc>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60a3      	str	r3, [r4, #8]
 8007c0e:	6963      	ldr	r3, [r4, #20]
 8007c10:	425b      	negs	r3, r3
 8007c12:	61a3      	str	r3, [r4, #24]
 8007c14:	6923      	ldr	r3, [r4, #16]
 8007c16:	b943      	cbnz	r3, 8007c2a <__swsetup_r+0xc6>
 8007c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c1c:	d1ba      	bne.n	8007b94 <__swsetup_r+0x30>
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	0781      	lsls	r1, r0, #30
 8007c22:	bf58      	it	pl
 8007c24:	6963      	ldrpl	r3, [r4, #20]
 8007c26:	60a3      	str	r3, [r4, #8]
 8007c28:	e7f4      	b.n	8007c14 <__swsetup_r+0xb0>
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	e7f7      	b.n	8007c1e <__swsetup_r+0xba>
 8007c2e:	bf00      	nop
 8007c30:	20000610 	.word	0x20000610
 8007c34:	08008d14 	.word	0x08008d14
 8007c38:	08008d34 	.word	0x08008d34
 8007c3c:	08008cf4 	.word	0x08008cf4

08007c40 <abort>:
 8007c40:	b508      	push	{r3, lr}
 8007c42:	2006      	movs	r0, #6
 8007c44:	f000 fa48 	bl	80080d8 <raise>
 8007c48:	2001      	movs	r0, #1
 8007c4a:	f000 fb4d 	bl	80082e8 <_exit>
	...

08007c50 <__sflush_r>:
 8007c50:	898a      	ldrh	r2, [r1, #12]
 8007c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c56:	4605      	mov	r5, r0
 8007c58:	0710      	lsls	r0, r2, #28
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	d458      	bmi.n	8007d10 <__sflush_r+0xc0>
 8007c5e:	684b      	ldr	r3, [r1, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	dc05      	bgt.n	8007c70 <__sflush_r+0x20>
 8007c64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	dc02      	bgt.n	8007c70 <__sflush_r+0x20>
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c72:	2e00      	cmp	r6, #0
 8007c74:	d0f9      	beq.n	8007c6a <__sflush_r+0x1a>
 8007c76:	2300      	movs	r3, #0
 8007c78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c7c:	682f      	ldr	r7, [r5, #0]
 8007c7e:	602b      	str	r3, [r5, #0]
 8007c80:	d032      	beq.n	8007ce8 <__sflush_r+0x98>
 8007c82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	075a      	lsls	r2, r3, #29
 8007c88:	d505      	bpl.n	8007c96 <__sflush_r+0x46>
 8007c8a:	6863      	ldr	r3, [r4, #4]
 8007c8c:	1ac0      	subs	r0, r0, r3
 8007c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c90:	b10b      	cbz	r3, 8007c96 <__sflush_r+0x46>
 8007c92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c94:	1ac0      	subs	r0, r0, r3
 8007c96:	2300      	movs	r3, #0
 8007c98:	4602      	mov	r2, r0
 8007c9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c9c:	6a21      	ldr	r1, [r4, #32]
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	47b0      	blx	r6
 8007ca2:	1c43      	adds	r3, r0, #1
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	d106      	bne.n	8007cb6 <__sflush_r+0x66>
 8007ca8:	6829      	ldr	r1, [r5, #0]
 8007caa:	291d      	cmp	r1, #29
 8007cac:	d82c      	bhi.n	8007d08 <__sflush_r+0xb8>
 8007cae:	4a2a      	ldr	r2, [pc, #168]	; (8007d58 <__sflush_r+0x108>)
 8007cb0:	40ca      	lsrs	r2, r1
 8007cb2:	07d6      	lsls	r6, r2, #31
 8007cb4:	d528      	bpl.n	8007d08 <__sflush_r+0xb8>
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	6062      	str	r2, [r4, #4]
 8007cba:	04d9      	lsls	r1, r3, #19
 8007cbc:	6922      	ldr	r2, [r4, #16]
 8007cbe:	6022      	str	r2, [r4, #0]
 8007cc0:	d504      	bpl.n	8007ccc <__sflush_r+0x7c>
 8007cc2:	1c42      	adds	r2, r0, #1
 8007cc4:	d101      	bne.n	8007cca <__sflush_r+0x7a>
 8007cc6:	682b      	ldr	r3, [r5, #0]
 8007cc8:	b903      	cbnz	r3, 8007ccc <__sflush_r+0x7c>
 8007cca:	6560      	str	r0, [r4, #84]	; 0x54
 8007ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cce:	602f      	str	r7, [r5, #0]
 8007cd0:	2900      	cmp	r1, #0
 8007cd2:	d0ca      	beq.n	8007c6a <__sflush_r+0x1a>
 8007cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cd8:	4299      	cmp	r1, r3
 8007cda:	d002      	beq.n	8007ce2 <__sflush_r+0x92>
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f7fd fc47 	bl	8005570 <_free_r>
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ce6:	e7c1      	b.n	8007c6c <__sflush_r+0x1c>
 8007ce8:	6a21      	ldr	r1, [r4, #32]
 8007cea:	2301      	movs	r3, #1
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b0      	blx	r6
 8007cf0:	1c41      	adds	r1, r0, #1
 8007cf2:	d1c7      	bne.n	8007c84 <__sflush_r+0x34>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0c4      	beq.n	8007c84 <__sflush_r+0x34>
 8007cfa:	2b1d      	cmp	r3, #29
 8007cfc:	d001      	beq.n	8007d02 <__sflush_r+0xb2>
 8007cfe:	2b16      	cmp	r3, #22
 8007d00:	d101      	bne.n	8007d06 <__sflush_r+0xb6>
 8007d02:	602f      	str	r7, [r5, #0]
 8007d04:	e7b1      	b.n	8007c6a <__sflush_r+0x1a>
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d0c:	81a3      	strh	r3, [r4, #12]
 8007d0e:	e7ad      	b.n	8007c6c <__sflush_r+0x1c>
 8007d10:	690f      	ldr	r7, [r1, #16]
 8007d12:	2f00      	cmp	r7, #0
 8007d14:	d0a9      	beq.n	8007c6a <__sflush_r+0x1a>
 8007d16:	0793      	lsls	r3, r2, #30
 8007d18:	680e      	ldr	r6, [r1, #0]
 8007d1a:	bf08      	it	eq
 8007d1c:	694b      	ldreq	r3, [r1, #20]
 8007d1e:	600f      	str	r7, [r1, #0]
 8007d20:	bf18      	it	ne
 8007d22:	2300      	movne	r3, #0
 8007d24:	eba6 0807 	sub.w	r8, r6, r7
 8007d28:	608b      	str	r3, [r1, #8]
 8007d2a:	f1b8 0f00 	cmp.w	r8, #0
 8007d2e:	dd9c      	ble.n	8007c6a <__sflush_r+0x1a>
 8007d30:	6a21      	ldr	r1, [r4, #32]
 8007d32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d34:	4643      	mov	r3, r8
 8007d36:	463a      	mov	r2, r7
 8007d38:	4628      	mov	r0, r5
 8007d3a:	47b0      	blx	r6
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	dc06      	bgt.n	8007d4e <__sflush_r+0xfe>
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d46:	81a3      	strh	r3, [r4, #12]
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4c:	e78e      	b.n	8007c6c <__sflush_r+0x1c>
 8007d4e:	4407      	add	r7, r0
 8007d50:	eba8 0800 	sub.w	r8, r8, r0
 8007d54:	e7e9      	b.n	8007d2a <__sflush_r+0xda>
 8007d56:	bf00      	nop
 8007d58:	20400001 	.word	0x20400001

08007d5c <_fflush_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	690b      	ldr	r3, [r1, #16]
 8007d60:	4605      	mov	r5, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	b913      	cbnz	r3, 8007d6c <_fflush_r+0x10>
 8007d66:	2500      	movs	r5, #0
 8007d68:	4628      	mov	r0, r5
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	b118      	cbz	r0, 8007d76 <_fflush_r+0x1a>
 8007d6e:	6983      	ldr	r3, [r0, #24]
 8007d70:	b90b      	cbnz	r3, 8007d76 <_fflush_r+0x1a>
 8007d72:	f000 f887 	bl	8007e84 <__sinit>
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <_fflush_r+0x6c>)
 8007d78:	429c      	cmp	r4, r3
 8007d7a:	d11b      	bne.n	8007db4 <_fflush_r+0x58>
 8007d7c:	686c      	ldr	r4, [r5, #4]
 8007d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0ef      	beq.n	8007d66 <_fflush_r+0xa>
 8007d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d88:	07d0      	lsls	r0, r2, #31
 8007d8a:	d404      	bmi.n	8007d96 <_fflush_r+0x3a>
 8007d8c:	0599      	lsls	r1, r3, #22
 8007d8e:	d402      	bmi.n	8007d96 <_fflush_r+0x3a>
 8007d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d92:	f7ff fcf8 	bl	8007786 <__retarget_lock_acquire_recursive>
 8007d96:	4628      	mov	r0, r5
 8007d98:	4621      	mov	r1, r4
 8007d9a:	f7ff ff59 	bl	8007c50 <__sflush_r>
 8007d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007da0:	07da      	lsls	r2, r3, #31
 8007da2:	4605      	mov	r5, r0
 8007da4:	d4e0      	bmi.n	8007d68 <_fflush_r+0xc>
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	059b      	lsls	r3, r3, #22
 8007daa:	d4dd      	bmi.n	8007d68 <_fflush_r+0xc>
 8007dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dae:	f7ff fceb 	bl	8007788 <__retarget_lock_release_recursive>
 8007db2:	e7d9      	b.n	8007d68 <_fflush_r+0xc>
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <_fflush_r+0x70>)
 8007db6:	429c      	cmp	r4, r3
 8007db8:	d101      	bne.n	8007dbe <_fflush_r+0x62>
 8007dba:	68ac      	ldr	r4, [r5, #8]
 8007dbc:	e7df      	b.n	8007d7e <_fflush_r+0x22>
 8007dbe:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <_fflush_r+0x74>)
 8007dc0:	429c      	cmp	r4, r3
 8007dc2:	bf08      	it	eq
 8007dc4:	68ec      	ldreq	r4, [r5, #12]
 8007dc6:	e7da      	b.n	8007d7e <_fflush_r+0x22>
 8007dc8:	08008d14 	.word	0x08008d14
 8007dcc:	08008d34 	.word	0x08008d34
 8007dd0:	08008cf4 	.word	0x08008cf4

08007dd4 <std>:
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	b510      	push	{r4, lr}
 8007dd8:	4604      	mov	r4, r0
 8007dda:	e9c0 3300 	strd	r3, r3, [r0]
 8007dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007de2:	6083      	str	r3, [r0, #8]
 8007de4:	8181      	strh	r1, [r0, #12]
 8007de6:	6643      	str	r3, [r0, #100]	; 0x64
 8007de8:	81c2      	strh	r2, [r0, #14]
 8007dea:	6183      	str	r3, [r0, #24]
 8007dec:	4619      	mov	r1, r3
 8007dee:	2208      	movs	r2, #8
 8007df0:	305c      	adds	r0, #92	; 0x5c
 8007df2:	f7fd fbb5 	bl	8005560 <memset>
 8007df6:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <std+0x38>)
 8007df8:	6263      	str	r3, [r4, #36]	; 0x24
 8007dfa:	4b05      	ldr	r3, [pc, #20]	; (8007e10 <std+0x3c>)
 8007dfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dfe:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <std+0x40>)
 8007e00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <std+0x44>)
 8007e04:	6224      	str	r4, [r4, #32]
 8007e06:	6323      	str	r3, [r4, #48]	; 0x30
 8007e08:	bd10      	pop	{r4, pc}
 8007e0a:	bf00      	nop
 8007e0c:	08008111 	.word	0x08008111
 8007e10:	08008133 	.word	0x08008133
 8007e14:	0800816b 	.word	0x0800816b
 8007e18:	0800818f 	.word	0x0800818f

08007e1c <_cleanup_r>:
 8007e1c:	4901      	ldr	r1, [pc, #4]	; (8007e24 <_cleanup_r+0x8>)
 8007e1e:	f000 b8af 	b.w	8007f80 <_fwalk_reent>
 8007e22:	bf00      	nop
 8007e24:	08007d5d 	.word	0x08007d5d

08007e28 <__sfmoreglue>:
 8007e28:	b570      	push	{r4, r5, r6, lr}
 8007e2a:	1e4a      	subs	r2, r1, #1
 8007e2c:	2568      	movs	r5, #104	; 0x68
 8007e2e:	4355      	muls	r5, r2
 8007e30:	460e      	mov	r6, r1
 8007e32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e36:	f7fd fbeb 	bl	8005610 <_malloc_r>
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	b140      	cbz	r0, 8007e50 <__sfmoreglue+0x28>
 8007e3e:	2100      	movs	r1, #0
 8007e40:	e9c0 1600 	strd	r1, r6, [r0]
 8007e44:	300c      	adds	r0, #12
 8007e46:	60a0      	str	r0, [r4, #8]
 8007e48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e4c:	f7fd fb88 	bl	8005560 <memset>
 8007e50:	4620      	mov	r0, r4
 8007e52:	bd70      	pop	{r4, r5, r6, pc}

08007e54 <__sfp_lock_acquire>:
 8007e54:	4801      	ldr	r0, [pc, #4]	; (8007e5c <__sfp_lock_acquire+0x8>)
 8007e56:	f7ff bc96 	b.w	8007786 <__retarget_lock_acquire_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	20000988 	.word	0x20000988

08007e60 <__sfp_lock_release>:
 8007e60:	4801      	ldr	r0, [pc, #4]	; (8007e68 <__sfp_lock_release+0x8>)
 8007e62:	f7ff bc91 	b.w	8007788 <__retarget_lock_release_recursive>
 8007e66:	bf00      	nop
 8007e68:	20000988 	.word	0x20000988

08007e6c <__sinit_lock_acquire>:
 8007e6c:	4801      	ldr	r0, [pc, #4]	; (8007e74 <__sinit_lock_acquire+0x8>)
 8007e6e:	f7ff bc8a 	b.w	8007786 <__retarget_lock_acquire_recursive>
 8007e72:	bf00      	nop
 8007e74:	20000983 	.word	0x20000983

08007e78 <__sinit_lock_release>:
 8007e78:	4801      	ldr	r0, [pc, #4]	; (8007e80 <__sinit_lock_release+0x8>)
 8007e7a:	f7ff bc85 	b.w	8007788 <__retarget_lock_release_recursive>
 8007e7e:	bf00      	nop
 8007e80:	20000983 	.word	0x20000983

08007e84 <__sinit>:
 8007e84:	b510      	push	{r4, lr}
 8007e86:	4604      	mov	r4, r0
 8007e88:	f7ff fff0 	bl	8007e6c <__sinit_lock_acquire>
 8007e8c:	69a3      	ldr	r3, [r4, #24]
 8007e8e:	b11b      	cbz	r3, 8007e98 <__sinit+0x14>
 8007e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e94:	f7ff bff0 	b.w	8007e78 <__sinit_lock_release>
 8007e98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e9c:	6523      	str	r3, [r4, #80]	; 0x50
 8007e9e:	4b13      	ldr	r3, [pc, #76]	; (8007eec <__sinit+0x68>)
 8007ea0:	4a13      	ldr	r2, [pc, #76]	; (8007ef0 <__sinit+0x6c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ea6:	42a3      	cmp	r3, r4
 8007ea8:	bf04      	itt	eq
 8007eaa:	2301      	moveq	r3, #1
 8007eac:	61a3      	streq	r3, [r4, #24]
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 f820 	bl	8007ef4 <__sfp>
 8007eb4:	6060      	str	r0, [r4, #4]
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f000 f81c 	bl	8007ef4 <__sfp>
 8007ebc:	60a0      	str	r0, [r4, #8]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 f818 	bl	8007ef4 <__sfp>
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	60e0      	str	r0, [r4, #12]
 8007ec8:	2104      	movs	r1, #4
 8007eca:	6860      	ldr	r0, [r4, #4]
 8007ecc:	f7ff ff82 	bl	8007dd4 <std>
 8007ed0:	68a0      	ldr	r0, [r4, #8]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	2109      	movs	r1, #9
 8007ed6:	f7ff ff7d 	bl	8007dd4 <std>
 8007eda:	68e0      	ldr	r0, [r4, #12]
 8007edc:	2202      	movs	r2, #2
 8007ede:	2112      	movs	r1, #18
 8007ee0:	f7ff ff78 	bl	8007dd4 <std>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	61a3      	str	r3, [r4, #24]
 8007ee8:	e7d2      	b.n	8007e90 <__sinit+0xc>
 8007eea:	bf00      	nop
 8007eec:	08008974 	.word	0x08008974
 8007ef0:	08007e1d 	.word	0x08007e1d

08007ef4 <__sfp>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	4607      	mov	r7, r0
 8007ef8:	f7ff ffac 	bl	8007e54 <__sfp_lock_acquire>
 8007efc:	4b1e      	ldr	r3, [pc, #120]	; (8007f78 <__sfp+0x84>)
 8007efe:	681e      	ldr	r6, [r3, #0]
 8007f00:	69b3      	ldr	r3, [r6, #24]
 8007f02:	b913      	cbnz	r3, 8007f0a <__sfp+0x16>
 8007f04:	4630      	mov	r0, r6
 8007f06:	f7ff ffbd 	bl	8007e84 <__sinit>
 8007f0a:	3648      	adds	r6, #72	; 0x48
 8007f0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f10:	3b01      	subs	r3, #1
 8007f12:	d503      	bpl.n	8007f1c <__sfp+0x28>
 8007f14:	6833      	ldr	r3, [r6, #0]
 8007f16:	b30b      	cbz	r3, 8007f5c <__sfp+0x68>
 8007f18:	6836      	ldr	r6, [r6, #0]
 8007f1a:	e7f7      	b.n	8007f0c <__sfp+0x18>
 8007f1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f20:	b9d5      	cbnz	r5, 8007f58 <__sfp+0x64>
 8007f22:	4b16      	ldr	r3, [pc, #88]	; (8007f7c <__sfp+0x88>)
 8007f24:	60e3      	str	r3, [r4, #12]
 8007f26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f2a:	6665      	str	r5, [r4, #100]	; 0x64
 8007f2c:	f7ff fc2a 	bl	8007784 <__retarget_lock_init_recursive>
 8007f30:	f7ff ff96 	bl	8007e60 <__sfp_lock_release>
 8007f34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f3c:	6025      	str	r5, [r4, #0]
 8007f3e:	61a5      	str	r5, [r4, #24]
 8007f40:	2208      	movs	r2, #8
 8007f42:	4629      	mov	r1, r5
 8007f44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f48:	f7fd fb0a 	bl	8005560 <memset>
 8007f4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f54:	4620      	mov	r0, r4
 8007f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f58:	3468      	adds	r4, #104	; 0x68
 8007f5a:	e7d9      	b.n	8007f10 <__sfp+0x1c>
 8007f5c:	2104      	movs	r1, #4
 8007f5e:	4638      	mov	r0, r7
 8007f60:	f7ff ff62 	bl	8007e28 <__sfmoreglue>
 8007f64:	4604      	mov	r4, r0
 8007f66:	6030      	str	r0, [r6, #0]
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d1d5      	bne.n	8007f18 <__sfp+0x24>
 8007f6c:	f7ff ff78 	bl	8007e60 <__sfp_lock_release>
 8007f70:	230c      	movs	r3, #12
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	e7ee      	b.n	8007f54 <__sfp+0x60>
 8007f76:	bf00      	nop
 8007f78:	08008974 	.word	0x08008974
 8007f7c:	ffff0001 	.word	0xffff0001

08007f80 <_fwalk_reent>:
 8007f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	4606      	mov	r6, r0
 8007f86:	4688      	mov	r8, r1
 8007f88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f8c:	2700      	movs	r7, #0
 8007f8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f92:	f1b9 0901 	subs.w	r9, r9, #1
 8007f96:	d505      	bpl.n	8007fa4 <_fwalk_reent+0x24>
 8007f98:	6824      	ldr	r4, [r4, #0]
 8007f9a:	2c00      	cmp	r4, #0
 8007f9c:	d1f7      	bne.n	8007f8e <_fwalk_reent+0xe>
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa4:	89ab      	ldrh	r3, [r5, #12]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d907      	bls.n	8007fba <_fwalk_reent+0x3a>
 8007faa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	d003      	beq.n	8007fba <_fwalk_reent+0x3a>
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	47c0      	blx	r8
 8007fb8:	4307      	orrs	r7, r0
 8007fba:	3568      	adds	r5, #104	; 0x68
 8007fbc:	e7e9      	b.n	8007f92 <_fwalk_reent+0x12>

08007fbe <__swhatbuf_r>:
 8007fbe:	b570      	push	{r4, r5, r6, lr}
 8007fc0:	460e      	mov	r6, r1
 8007fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc6:	2900      	cmp	r1, #0
 8007fc8:	b096      	sub	sp, #88	; 0x58
 8007fca:	4614      	mov	r4, r2
 8007fcc:	461d      	mov	r5, r3
 8007fce:	da07      	bge.n	8007fe0 <__swhatbuf_r+0x22>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	602b      	str	r3, [r5, #0]
 8007fd4:	89b3      	ldrh	r3, [r6, #12]
 8007fd6:	061a      	lsls	r2, r3, #24
 8007fd8:	d410      	bmi.n	8007ffc <__swhatbuf_r+0x3e>
 8007fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fde:	e00e      	b.n	8007ffe <__swhatbuf_r+0x40>
 8007fe0:	466a      	mov	r2, sp
 8007fe2:	f000 f8fb 	bl	80081dc <_fstat_r>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	dbf2      	blt.n	8007fd0 <__swhatbuf_r+0x12>
 8007fea:	9a01      	ldr	r2, [sp, #4]
 8007fec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ff0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ff4:	425a      	negs	r2, r3
 8007ff6:	415a      	adcs	r2, r3
 8007ff8:	602a      	str	r2, [r5, #0]
 8007ffa:	e7ee      	b.n	8007fda <__swhatbuf_r+0x1c>
 8007ffc:	2340      	movs	r3, #64	; 0x40
 8007ffe:	2000      	movs	r0, #0
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	b016      	add	sp, #88	; 0x58
 8008004:	bd70      	pop	{r4, r5, r6, pc}
	...

08008008 <__smakebuf_r>:
 8008008:	898b      	ldrh	r3, [r1, #12]
 800800a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800800c:	079d      	lsls	r5, r3, #30
 800800e:	4606      	mov	r6, r0
 8008010:	460c      	mov	r4, r1
 8008012:	d507      	bpl.n	8008024 <__smakebuf_r+0x1c>
 8008014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	6123      	str	r3, [r4, #16]
 800801c:	2301      	movs	r3, #1
 800801e:	6163      	str	r3, [r4, #20]
 8008020:	b002      	add	sp, #8
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	ab01      	add	r3, sp, #4
 8008026:	466a      	mov	r2, sp
 8008028:	f7ff ffc9 	bl	8007fbe <__swhatbuf_r>
 800802c:	9900      	ldr	r1, [sp, #0]
 800802e:	4605      	mov	r5, r0
 8008030:	4630      	mov	r0, r6
 8008032:	f7fd faed 	bl	8005610 <_malloc_r>
 8008036:	b948      	cbnz	r0, 800804c <__smakebuf_r+0x44>
 8008038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800803c:	059a      	lsls	r2, r3, #22
 800803e:	d4ef      	bmi.n	8008020 <__smakebuf_r+0x18>
 8008040:	f023 0303 	bic.w	r3, r3, #3
 8008044:	f043 0302 	orr.w	r3, r3, #2
 8008048:	81a3      	strh	r3, [r4, #12]
 800804a:	e7e3      	b.n	8008014 <__smakebuf_r+0xc>
 800804c:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <__smakebuf_r+0x7c>)
 800804e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	6020      	str	r0, [r4, #0]
 8008054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	9b00      	ldr	r3, [sp, #0]
 800805c:	6163      	str	r3, [r4, #20]
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	6120      	str	r0, [r4, #16]
 8008062:	b15b      	cbz	r3, 800807c <__smakebuf_r+0x74>
 8008064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008068:	4630      	mov	r0, r6
 800806a:	f000 f8c9 	bl	8008200 <_isatty_r>
 800806e:	b128      	cbz	r0, 800807c <__smakebuf_r+0x74>
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	f023 0303 	bic.w	r3, r3, #3
 8008076:	f043 0301 	orr.w	r3, r3, #1
 800807a:	81a3      	strh	r3, [r4, #12]
 800807c:	89a0      	ldrh	r0, [r4, #12]
 800807e:	4305      	orrs	r5, r0
 8008080:	81a5      	strh	r5, [r4, #12]
 8008082:	e7cd      	b.n	8008020 <__smakebuf_r+0x18>
 8008084:	08007e1d 	.word	0x08007e1d

08008088 <_raise_r>:
 8008088:	291f      	cmp	r1, #31
 800808a:	b538      	push	{r3, r4, r5, lr}
 800808c:	4604      	mov	r4, r0
 800808e:	460d      	mov	r5, r1
 8008090:	d904      	bls.n	800809c <_raise_r+0x14>
 8008092:	2316      	movs	r3, #22
 8008094:	6003      	str	r3, [r0, #0]
 8008096:	f04f 30ff 	mov.w	r0, #4294967295
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800809e:	b112      	cbz	r2, 80080a6 <_raise_r+0x1e>
 80080a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080a4:	b94b      	cbnz	r3, 80080ba <_raise_r+0x32>
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 f830 	bl	800810c <_getpid_r>
 80080ac:	462a      	mov	r2, r5
 80080ae:	4601      	mov	r1, r0
 80080b0:	4620      	mov	r0, r4
 80080b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080b6:	f000 b817 	b.w	80080e8 <_kill_r>
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d00a      	beq.n	80080d4 <_raise_r+0x4c>
 80080be:	1c59      	adds	r1, r3, #1
 80080c0:	d103      	bne.n	80080ca <_raise_r+0x42>
 80080c2:	2316      	movs	r3, #22
 80080c4:	6003      	str	r3, [r0, #0]
 80080c6:	2001      	movs	r0, #1
 80080c8:	e7e7      	b.n	800809a <_raise_r+0x12>
 80080ca:	2400      	movs	r4, #0
 80080cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080d0:	4628      	mov	r0, r5
 80080d2:	4798      	blx	r3
 80080d4:	2000      	movs	r0, #0
 80080d6:	e7e0      	b.n	800809a <_raise_r+0x12>

080080d8 <raise>:
 80080d8:	4b02      	ldr	r3, [pc, #8]	; (80080e4 <raise+0xc>)
 80080da:	4601      	mov	r1, r0
 80080dc:	6818      	ldr	r0, [r3, #0]
 80080de:	f7ff bfd3 	b.w	8008088 <_raise_r>
 80080e2:	bf00      	nop
 80080e4:	20000610 	.word	0x20000610

080080e8 <_kill_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d07      	ldr	r5, [pc, #28]	; (8008108 <_kill_r+0x20>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	602b      	str	r3, [r5, #0]
 80080f6:	f000 f8d7 	bl	80082a8 <_kill>
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	d102      	bne.n	8008104 <_kill_r+0x1c>
 80080fe:	682b      	ldr	r3, [r5, #0]
 8008100:	b103      	cbz	r3, 8008104 <_kill_r+0x1c>
 8008102:	6023      	str	r3, [r4, #0]
 8008104:	bd38      	pop	{r3, r4, r5, pc}
 8008106:	bf00      	nop
 8008108:	2000097c 	.word	0x2000097c

0800810c <_getpid_r>:
 800810c:	f000 b8bc 	b.w	8008288 <_getpid>

08008110 <__sread>:
 8008110:	b510      	push	{r4, lr}
 8008112:	460c      	mov	r4, r1
 8008114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008118:	f000 f894 	bl	8008244 <_read_r>
 800811c:	2800      	cmp	r0, #0
 800811e:	bfab      	itete	ge
 8008120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008122:	89a3      	ldrhlt	r3, [r4, #12]
 8008124:	181b      	addge	r3, r3, r0
 8008126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800812a:	bfac      	ite	ge
 800812c:	6563      	strge	r3, [r4, #84]	; 0x54
 800812e:	81a3      	strhlt	r3, [r4, #12]
 8008130:	bd10      	pop	{r4, pc}

08008132 <__swrite>:
 8008132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008136:	461f      	mov	r7, r3
 8008138:	898b      	ldrh	r3, [r1, #12]
 800813a:	05db      	lsls	r3, r3, #23
 800813c:	4605      	mov	r5, r0
 800813e:	460c      	mov	r4, r1
 8008140:	4616      	mov	r6, r2
 8008142:	d505      	bpl.n	8008150 <__swrite+0x1e>
 8008144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008148:	2302      	movs	r3, #2
 800814a:	2200      	movs	r2, #0
 800814c:	f000 f868 	bl	8008220 <_lseek_r>
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800815a:	81a3      	strh	r3, [r4, #12]
 800815c:	4632      	mov	r2, r6
 800815e:	463b      	mov	r3, r7
 8008160:	4628      	mov	r0, r5
 8008162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008166:	f000 b817 	b.w	8008198 <_write_r>

0800816a <__sseek>:
 800816a:	b510      	push	{r4, lr}
 800816c:	460c      	mov	r4, r1
 800816e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008172:	f000 f855 	bl	8008220 <_lseek_r>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	bf15      	itete	ne
 800817c:	6560      	strne	r0, [r4, #84]	; 0x54
 800817e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008186:	81a3      	strheq	r3, [r4, #12]
 8008188:	bf18      	it	ne
 800818a:	81a3      	strhne	r3, [r4, #12]
 800818c:	bd10      	pop	{r4, pc}

0800818e <__sclose>:
 800818e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008192:	f000 b813 	b.w	80081bc <_close_r>
	...

08008198 <_write_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d07      	ldr	r5, [pc, #28]	; (80081b8 <_write_r+0x20>)
 800819c:	4604      	mov	r4, r0
 800819e:	4608      	mov	r0, r1
 80081a0:	4611      	mov	r1, r2
 80081a2:	2200      	movs	r2, #0
 80081a4:	602a      	str	r2, [r5, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	f000 f896 	bl	80082d8 <_write>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_write_r+0x1e>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_write_r+0x1e>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	2000097c 	.word	0x2000097c

080081bc <_close_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4d06      	ldr	r5, [pc, #24]	; (80081d8 <_close_r+0x1c>)
 80081c0:	2300      	movs	r3, #0
 80081c2:	4604      	mov	r4, r0
 80081c4:	4608      	mov	r0, r1
 80081c6:	602b      	str	r3, [r5, #0]
 80081c8:	f000 f84e 	bl	8008268 <_close>
 80081cc:	1c43      	adds	r3, r0, #1
 80081ce:	d102      	bne.n	80081d6 <_close_r+0x1a>
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	b103      	cbz	r3, 80081d6 <_close_r+0x1a>
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	2000097c 	.word	0x2000097c

080081dc <_fstat_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d07      	ldr	r5, [pc, #28]	; (80081fc <_fstat_r+0x20>)
 80081e0:	2300      	movs	r3, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	f000 f845 	bl	8008278 <_fstat>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d102      	bne.n	80081f8 <_fstat_r+0x1c>
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	b103      	cbz	r3, 80081f8 <_fstat_r+0x1c>
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	2000097c 	.word	0x2000097c

08008200 <_isatty_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	; (800821c <_isatty_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f000 f844 	bl	8008298 <_isatty>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_isatty_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_isatty_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	2000097c 	.word	0x2000097c

08008220 <_lseek_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d07      	ldr	r5, [pc, #28]	; (8008240 <_lseek_r+0x20>)
 8008224:	4604      	mov	r4, r0
 8008226:	4608      	mov	r0, r1
 8008228:	4611      	mov	r1, r2
 800822a:	2200      	movs	r2, #0
 800822c:	602a      	str	r2, [r5, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	f000 f842 	bl	80082b8 <_lseek>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	d102      	bne.n	800823e <_lseek_r+0x1e>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	b103      	cbz	r3, 800823e <_lseek_r+0x1e>
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	2000097c 	.word	0x2000097c

08008244 <_read_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4d07      	ldr	r5, [pc, #28]	; (8008264 <_read_r+0x20>)
 8008248:	4604      	mov	r4, r0
 800824a:	4608      	mov	r0, r1
 800824c:	4611      	mov	r1, r2
 800824e:	2200      	movs	r2, #0
 8008250:	602a      	str	r2, [r5, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	f000 f838 	bl	80082c8 <_read>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_read_r+0x1e>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_read_r+0x1e>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	2000097c 	.word	0x2000097c

08008268 <_close>:
 8008268:	4b02      	ldr	r3, [pc, #8]	; (8008274 <_close+0xc>)
 800826a:	2258      	movs	r2, #88	; 0x58
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	f04f 30ff 	mov.w	r0, #4294967295
 8008272:	4770      	bx	lr
 8008274:	2000097c 	.word	0x2000097c

08008278 <_fstat>:
 8008278:	4b02      	ldr	r3, [pc, #8]	; (8008284 <_fstat+0xc>)
 800827a:	2258      	movs	r2, #88	; 0x58
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	f04f 30ff 	mov.w	r0, #4294967295
 8008282:	4770      	bx	lr
 8008284:	2000097c 	.word	0x2000097c

08008288 <_getpid>:
 8008288:	4b02      	ldr	r3, [pc, #8]	; (8008294 <_getpid+0xc>)
 800828a:	2258      	movs	r2, #88	; 0x58
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	f04f 30ff 	mov.w	r0, #4294967295
 8008292:	4770      	bx	lr
 8008294:	2000097c 	.word	0x2000097c

08008298 <_isatty>:
 8008298:	4b02      	ldr	r3, [pc, #8]	; (80082a4 <_isatty+0xc>)
 800829a:	2258      	movs	r2, #88	; 0x58
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	2000      	movs	r0, #0
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	2000097c 	.word	0x2000097c

080082a8 <_kill>:
 80082a8:	4b02      	ldr	r3, [pc, #8]	; (80082b4 <_kill+0xc>)
 80082aa:	2258      	movs	r2, #88	; 0x58
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	f04f 30ff 	mov.w	r0, #4294967295
 80082b2:	4770      	bx	lr
 80082b4:	2000097c 	.word	0x2000097c

080082b8 <_lseek>:
 80082b8:	4b02      	ldr	r3, [pc, #8]	; (80082c4 <_lseek+0xc>)
 80082ba:	2258      	movs	r2, #88	; 0x58
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	f04f 30ff 	mov.w	r0, #4294967295
 80082c2:	4770      	bx	lr
 80082c4:	2000097c 	.word	0x2000097c

080082c8 <_read>:
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <_read+0xc>)
 80082ca:	2258      	movs	r2, #88	; 0x58
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	f04f 30ff 	mov.w	r0, #4294967295
 80082d2:	4770      	bx	lr
 80082d4:	2000097c 	.word	0x2000097c

080082d8 <_write>:
 80082d8:	4b02      	ldr	r3, [pc, #8]	; (80082e4 <_write+0xc>)
 80082da:	2258      	movs	r2, #88	; 0x58
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	f04f 30ff 	mov.w	r0, #4294967295
 80082e2:	4770      	bx	lr
 80082e4:	2000097c 	.word	0x2000097c

080082e8 <_exit>:
 80082e8:	e7fe      	b.n	80082e8 <_exit>
	...

080082ec <_init>:
 80082ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ee:	bf00      	nop
 80082f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f2:	bc08      	pop	{r3}
 80082f4:	469e      	mov	lr, r3
 80082f6:	4770      	bx	lr

080082f8 <_fini>:
 80082f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fa:	bf00      	nop
 80082fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fe:	bc08      	pop	{r3}
 8008300:	469e      	mov	lr, r3
 8008302:	4770      	bx	lr
